
Hethongnhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080091d0  080091d0  0000a1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d4  080095d4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095d4  080095d4  0000a5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095dc  080095dc  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095dc  080095dc  0000a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080095e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001d8  080097b8  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  080097b8  0000b510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cc1  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030df  00000000  00000000  0001debe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00020fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e26  00000000  00000000  000221c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a797  00000000  00000000  00022fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c7c  00000000  00000000  0003d77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093df6  00000000  00000000  000553f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e91ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c68  00000000  00000000  000e9234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000eee9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080091b8 	.word	0x080091b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080091b8 	.word	0x080091b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d54:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d56:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <MX_ADC1_Init+0x98>)
 8000d58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d70:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d82:	4815      	ldr	r0, [pc, #84]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000d84:	f001 f820 	bl	8001dc8 <HAL_ADC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d8e:	f000 fc30 	bl	80015f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d92:	2311      	movs	r3, #17
 8000d94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000da4:	f001 faa0 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 fc20 	bl	80015f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000db2:	2310      	movs	r3, #16
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_ADC1_Init+0x94>)
 8000dc0:	f001 fa92 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000dca:	f000 fc12 	bl	80015f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001f4 	.word	0x200001f4
 8000ddc:	40012400 	.word	0x40012400

08000de0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <HAL_ADC_MspInit+0x94>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d13b      	bne.n	8000e6a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <HAL_ADC_MspInit+0x98>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <HAL_ADC_MspInit+0x98>)
 8000df8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <HAL_ADC_MspInit+0x98>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <HAL_ADC_MspInit+0xa0>)
 8000e0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e1e:	2280      	movs	r2, #128	@ 0x80
 8000e20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e34:	2220      	movs	r2, #32
 8000e36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e3e:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e40:	f001 fd62 	bl	8002908 <HAL_DMA_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e4a:	f000 fbd2 	bl	80015f2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e52:	621a      	str	r2, [r3, #32]
 8000e54:	4a09      	ldr	r2, [pc, #36]	@ (8000e7c <HAL_ADC_MspInit+0x9c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2012      	movs	r0, #18
 8000e60:	f001 fd1b 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e64:	2012      	movs	r0, #18
 8000e66:	f001 fd34 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012400 	.word	0x40012400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	20000224 	.word	0x20000224
 8000e80:	40020008 	.word	0x40020008

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_DMA_Init+0x38>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <MX_DMA_Init+0x38>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_DMA_Init+0x38>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200b      	movs	r0, #11
 8000ea8:	f001 fcf7 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eac:	200b      	movs	r0, #11
 8000eae:	f001 fd10 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000ecc:	f043 0320 	orr.w	r3, r3, #32
 8000ed0:	6193      	str	r3, [r2, #24]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <MX_GPIO_Init+0x58>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000

08000f1c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x40 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f023 030f 	bic.w	r3, r3, #15
 8000f2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 030c 	orr.w	r3, r3, #12
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	f043 030c 	orr.w	r3, r3, #12
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2304      	movs	r3, #4
 8000f66:	2140      	movs	r1, #64	@ 0x40
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <lcd_send_cmd+0x5c>)
 8000f6a:	f002 fa37 	bl	80033dc <HAL_I2C_Master_Transmit>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000268 	.word	0x20000268

08000f7c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f023 030f 	bic.w	r3, r3, #15
 8000f8c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	f043 030d 	orr.w	r3, r3, #13
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	f043 0309 	orr.w	r3, r3, #9
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	f043 030d 	orr.w	r3, r3, #13
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	f043 0309 	orr.w	r3, r3, #9
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fbc:	f107 0208 	add.w	r2, r7, #8
 8000fc0:	2364      	movs	r3, #100	@ 0x64
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	2140      	movs	r1, #64	@ 0x40
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <lcd_send_data+0x5c>)
 8000fca:	f002 fa07 	bl	80033dc <HAL_I2C_Master_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000268 	.word	0x20000268

08000fdc <lcd_clear>:

void lcd_clear (void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000fe2:	2080      	movs	r0, #128	@ 0x80
 8000fe4:	f7ff ff9a 	bl	8000f1c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	e005      	b.n	8000ffa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f7ff ffc4 	bl	8000f7c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b45      	cmp	r3, #69	@ 0x45
 8000ffe:	ddf6      	ble.n	8000fee <lcd_clear+0x12>
	}
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
    switch (row)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <lcd_put_cur+0x18>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d005      	beq.n	800102c <lcd_put_cur+0x22>
 8001020:	e009      	b.n	8001036 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001028:	603b      	str	r3, [r7, #0]
            break;
 800102a:	e004      	b.n	8001036 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001032:	603b      	str	r3, [r7, #0]
            break;
 8001034:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff6e 	bl	8000f1c <lcd_send_cmd>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <lcd_init>:


void lcd_init (void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800104c:	2032      	movs	r0, #50	@ 0x32
 800104e:	f000 fe97 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001052:	2030      	movs	r0, #48	@ 0x30
 8001054:	f7ff ff62 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001058:	2005      	movs	r0, #5
 800105a:	f000 fe91 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x30);
 800105e:	2030      	movs	r0, #48	@ 0x30
 8001060:	f7ff ff5c 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001064:	2001      	movs	r0, #1
 8001066:	f000 fe8b 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x30);
 800106a:	2030      	movs	r0, #48	@ 0x30
 800106c:	f7ff ff56 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 fe85 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001076:	2020      	movs	r0, #32
 8001078:	f7ff ff50 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(10);
 800107c:	200a      	movs	r0, #10
 800107e:	f000 fe7f 	bl	8001d80 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001082:	2028      	movs	r0, #40	@ 0x28
 8001084:	f7ff ff4a 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f000 fe79 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800108e:	2008      	movs	r0, #8
 8001090:	f7ff ff44 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f000 fe73 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff3e 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 fe6d 	bl	8001d80 <HAL_Delay>
	HAL_Delay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 fe6a 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010ac:	2006      	movs	r0, #6
 80010ae:	f7ff ff35 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fe64 	bl	8001d80 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010b8:	200c      	movs	r0, #12
 80010ba:	f7ff ff2f 	bl	8000f1c <lcd_send_cmd>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80010ca:	e006      	b.n	80010da <lcd_send_string+0x18>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff51 	bl	8000f7c <lcd_send_data>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f4      	bne.n	80010cc <lcd_send_string+0xa>
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_I2C2_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <MX_I2C2_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_I2C2_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <MX_I2C2_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_I2C2_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_I2C2_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_I2C2_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_I2C2_Init+0x50>)
 800112a:	f002 f813 	bl	8003154 <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 fa5d 	bl	80015f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000268 	.word	0x20000268
 8001140:	40005800 	.word	0x40005800
 8001144:	000186a0 	.word	0x000186a0

08001148 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <HAL_I2C_MspInit+0x74>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d124      	bne.n	80011b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_I2C_MspInit+0x78>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <HAL_I2C_MspInit+0x78>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_I2C_MspInit+0x78>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001180:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <HAL_I2C_MspInit+0x7c>)
 8001196:	f001 fe59 	bl	8002e4c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_I2C_MspInit+0x78>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_I2C_MspInit+0x78>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_I2C_MspInit+0x78>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40005800 	.word	0x40005800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <HAL_TIM_IC_CaptureCallback+0x28>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d104      	bne.n	80011e4 <HAL_TIM_IC_CaptureCallback+0x1c>
        pulse_count++;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80011e2:	6013      	str	r3, [r2, #0]
    }
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40000400 	.word	0x40000400
 80011f4:	200002bc 	.word	0x200002bc

080011f8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a05      	ldr	r2, [pc, #20]	@ (800121c <HAL_ADC_ConvCpltCallback+0x24>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d102      	bne.n	8001210 <HAL_ADC_ConvCpltCallback+0x18>
        AdcConvCmplt = 1;
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_ADC_ConvCpltCallback+0x28>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
    }
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40012400 	.word	0x40012400
 8001220:	200002e0 	.word	0x200002e0
 8001224:	00000000 	.word	0x00000000

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0a2      	sub	sp, #136	@ 0x88
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f000 fd45 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f985 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f7ff fe43 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f7ff fe23 	bl	8000e84 <MX_DMA_Init>
  MX_TIM3_Init();
 800123e:	f000 fba3 	bl	8001988 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001242:	f000 fb2b 	bl	800189c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001246:	f7ff fd7d 	bl	8000d44 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800124a:	f000 fc95 	bl	8001b78 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800124e:	f7ff ff4d 	bl	80010ec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001252:	2100      	movs	r1, #0
 8001254:	48a6      	ldr	r0, [pc, #664]	@ (80014f0 <main+0x2c8>)
 8001256:	f003 f9d1 	bl	80045fc <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800125a:	2104      	movs	r1, #4
 800125c:	48a5      	ldr	r0, [pc, #660]	@ (80014f4 <main+0x2cc>)
 800125e:	f003 fac7 	bl	80047f0 <HAL_TIM_IC_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcRaw, 2);
 8001262:	2202      	movs	r2, #2
 8001264:	49a4      	ldr	r1, [pc, #656]	@ (80014f8 <main+0x2d0>)
 8001266:	48a5      	ldr	r0, [pc, #660]	@ (80014fc <main+0x2d4>)
 8001268:	f000 fe86 	bl	8001f78 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800126c:	48a1      	ldr	r0, [pc, #644]	@ (80014f4 <main+0x2cc>)
 800126e:	f003 f923 	bl	80044b8 <HAL_TIM_Base_Start>
  lcd_init();
 8001272:	f7ff fee9 	bl	8001048 <lcd_init>
  lcd_clear();
 8001276:	f7ff feb1 	bl	8000fdc <lcd_clear>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      uint32_t cycle_start = HAL_GetTick();
 800127a:	f000 fd77 	bl	8001d6c <HAL_GetTick>
 800127e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      pulse_count = 0;
 8001282:	4b9f      	ldr	r3, [pc, #636]	@ (8001500 <main+0x2d8>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
      freq_measuring = 1;
 8001288:	4b9e      	ldr	r3, [pc, #632]	@ (8001504 <main+0x2dc>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
      lcd_sent = 0;
 800128e:	4b9e      	ldr	r3, [pc, #632]	@ (8001508 <main+0x2e0>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
      while (HAL_GetTick() - cycle_start < CYCLE_MS) {
 8001294:	e10e      	b.n	80014b4 <main+0x28c>
          uint32_t now = HAL_GetTick();
 8001296:	f000 fd69 	bl	8001d6c <HAL_GetTick>
 800129a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
          uint32_t elapsed = now - cycle_start;
 800129e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80012a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
          if (elapsed < 1000) {
 80012aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b0:	f0c0 8100 	bcc.w	80014b4 <main+0x28c>

          }
          else if (elapsed >= 1000 && freq_measuring) {
 80012b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012ba:	d30f      	bcc.n	80012dc <main+0xb4>
 80012bc:	4b91      	ldr	r3, [pc, #580]	@ (8001504 <main+0x2dc>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00b      	beq.n	80012dc <main+0xb4>
              saved_frequency = pulse_count;
 80012c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001500 <main+0x2d8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fce3 	bl	8000c94 <__aeabi_ui2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a8e      	ldr	r2, [pc, #568]	@ (800150c <main+0x2e4>)
 80012d2:	6013      	str	r3, [r2, #0]
              freq_measuring = 0;
 80012d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001504 <main+0x2dc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e0eb      	b.n	80014b4 <main+0x28c>
          }
          else if (elapsed < 2000) {
 80012dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012e2:	d254      	bcs.n	800138e <main+0x166>
              if (AdcConvCmplt) {
 80012e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001510 <main+0x2e8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80e3 	beq.w	80014b4 <main+0x28c>
                  VrefeInt = (VREFRINT * ADCMAX) / (AdcRaw[0]);
 80012ee:	4b82      	ldr	r3, [pc, #520]	@ (80014f8 <main+0x2d0>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f886 	bl	8000404 <__aeabi_i2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	a174      	add	r1, pc, #464	@ (adr r1, 80014d0 <main+0x2a8>)
 80012fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001302:	f7ff fa13 	bl	800072c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4982      	ldr	r1, [pc, #520]	@ (8001514 <main+0x2ec>)
 800130c:	e9c1 2300 	strd	r2, r3, [r1]
                  VTmpSens = (VrefeInt * AdcRaw[1]) / (ADCMAX);
 8001310:	4b79      	ldr	r3, [pc, #484]	@ (80014f8 <main+0x2d0>)
 8001312:	885b      	ldrh	r3, [r3, #2]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f875 	bl	8000404 <__aeabi_i2d>
 800131a:	4b7e      	ldr	r3, [pc, #504]	@ (8001514 <main+0x2ec>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f8da 	bl	80004d8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	a36a      	add	r3, pc, #424	@ (adr r3, 80014d8 <main+0x2b0>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f9fb 	bl	800072c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4977      	ldr	r1, [pc, #476]	@ (8001518 <main+0x2f0>)
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
                  saved_temperature = (V25 - VTmpSens) / (AVG_SLOPE) + 25.0;
 8001340:	4b75      	ldr	r3, [pc, #468]	@ (8001518 <main+0x2f0>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	a166      	add	r1, pc, #408	@ (adr r1, 80014e0 <main+0x2b8>)
 8001348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800134c:	f7fe ff0c 	bl	8000168 <__aeabi_dsub>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	a363      	add	r3, pc, #396	@ (adr r3, 80014e8 <main+0x2c0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f9e5 	bl	800072c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b6b      	ldr	r3, [pc, #428]	@ (800151c <main+0x2f4>)
 8001370:	f7fe fefc 	bl	800016c <__adddf3>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fb84 	bl	8000a88 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	4a67      	ldr	r2, [pc, #412]	@ (8001520 <main+0x2f8>)
 8001384:	6013      	str	r3, [r2, #0]
                  AdcConvCmplt = 0;
 8001386:	4b62      	ldr	r3, [pc, #392]	@ (8001510 <main+0x2e8>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e092      	b.n	80014b4 <main+0x28c>
              }
          }
          else if (elapsed < 4000) {
 800138e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001390:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001394:	d246      	bcs.n	8001424 <main+0x1fc>
              char msg[100];
              sprintf(msg, "Tan so = %.0f Hz\r\n\n", saved_frequency);
 8001396:	4b5d      	ldr	r3, [pc, #372]	@ (800150c <main+0x2e4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f844 	bl	8000428 <__aeabi_f2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	1d38      	adds	r0, r7, #4
 80013a6:	495f      	ldr	r1, [pc, #380]	@ (8001524 <main+0x2fc>)
 80013a8:	f005 fdc8 	bl	8006f3c <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe fece 	bl	8000150 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	1d39      	adds	r1, r7, #4
 80013ba:	2364      	movs	r3, #100	@ 0x64
 80013bc:	485a      	ldr	r0, [pc, #360]	@ (8001528 <main+0x300>)
 80013be:	f004 fadb 	bl	8005978 <HAL_UART_Transmit>
              sprintf(msg, "Nhiet do = %.1f C\r\n\n", saved_temperature);
 80013c2:	4b57      	ldr	r3, [pc, #348]	@ (8001520 <main+0x2f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f82e 	bl	8000428 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	1d38      	adds	r0, r7, #4
 80013d2:	4956      	ldr	r1, [pc, #344]	@ (800152c <main+0x304>)
 80013d4:	f005 fdb2 	bl	8006f3c <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe feb8 	bl	8000150 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	1d39      	adds	r1, r7, #4
 80013e6:	2364      	movs	r3, #100	@ 0x64
 80013e8:	484f      	ldr	r0, [pc, #316]	@ (8001528 <main+0x300>)
 80013ea:	f004 fac5 	bl	8005978 <HAL_UART_Transmit>
              sprintf(msg, "Da gui len UART\r\n\n");
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	494f      	ldr	r1, [pc, #316]	@ (8001530 <main+0x308>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fda2 	bl	8006f3c <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fea8 	bl	8000150 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	2364      	movs	r3, #100	@ 0x64
 8001408:	4847      	ldr	r0, [pc, #284]	@ (8001528 <main+0x300>)
 800140a:	f004 fab5 	bl	8005978 <HAL_UART_Transmit>
              while (HAL_GetTick() - cycle_start < 4000);
 800140e:	bf00      	nop
 8001410:	f000 fcac 	bl	8001d6c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001420:	d3f6      	bcc.n	8001410 <main+0x1e8>
 8001422:	e047      	b.n	80014b4 <main+0x28c>
          }
          else if (elapsed < 4500 && !lcd_sent) {
 8001424:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001426:	f241 1293 	movw	r2, #4499	@ 0x1193
 800142a:	4293      	cmp	r3, r2
 800142c:	d842      	bhi.n	80014b4 <main+0x28c>
 800142e:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <main+0x2e0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d13e      	bne.n	80014b4 <main+0x28c>
              char line[17];
              char msg[100];
              lcd_clear();
 8001436:	f7ff fdd1 	bl	8000fdc <lcd_clear>
              lcd_put_cur(0, 0);
 800143a:	2100      	movs	r1, #0
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff fde4 	bl	800100a <lcd_put_cur>
              sprintf(line, "F:%.0fHz", saved_frequency);
 8001442:	4b32      	ldr	r3, [pc, #200]	@ (800150c <main+0x2e4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ffee 	bl	8000428 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001454:	4937      	ldr	r1, [pc, #220]	@ (8001534 <main+0x30c>)
 8001456:	f005 fd71 	bl	8006f3c <siprintf>
              lcd_send_string(line);
 800145a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe2f 	bl	80010c2 <lcd_send_string>
              lcd_put_cur(1, 0);
 8001464:	2100      	movs	r1, #0
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fdcf 	bl	800100a <lcd_put_cur>
              sprintf(line, "T:%.1fC", saved_temperature);
 800146c:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <main+0x2f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ffd9 	bl	8000428 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800147e:	492e      	ldr	r1, [pc, #184]	@ (8001538 <main+0x310>)
 8001480:	f005 fd5c 	bl	8006f3c <siprintf>
              lcd_send_string(line);
 8001484:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe1a 	bl	80010c2 <lcd_send_string>
              lcd_sent = 1;
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <main+0x2e0>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
              sprintf(msg, "Da gui len lcd\r\n\n");
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4929      	ldr	r1, [pc, #164]	@ (800153c <main+0x314>)
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fd4f 	bl	8006f3c <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe fe55 	bl	8000150 <strlen>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	1d39      	adds	r1, r7, #4
 80014ac:	2364      	movs	r3, #100	@ 0x64
 80014ae:	481e      	ldr	r0, [pc, #120]	@ (8001528 <main+0x300>)
 80014b0:	f004 fa62 	bl	8005978 <HAL_UART_Transmit>
      while (HAL_GetTick() - cycle_start < CYCLE_MS) {
 80014b4:	f000 fc5a 	bl	8001d6c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 726f 	movw	r2, #5999	@ 0x176f
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f67f aee6 	bls.w	8001296 <main+0x6e>
  while (1) {
 80014ca:	e6d6      	b.n	800127a <main+0x52>
 80014cc:	f3af 8000 	nop.w
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40b33200 	.word	0x40b33200
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40affe00 	.word	0x40affe00
 80014e0:	ae147ae1 	.word	0xae147ae1
 80014e4:	3ff6e147 	.word	0x3ff6e147
 80014e8:	75f6fd22 	.word	0x75f6fd22
 80014ec:	3f719ce0 	.word	0x3f719ce0
 80014f0:	200002e8 	.word	0x200002e8
 80014f4:	20000330 	.word	0x20000330
 80014f8:	200002dc 	.word	0x200002dc
 80014fc:	200001f4 	.word	0x200001f4
 8001500:	200002bc 	.word	0x200002bc
 8001504:	200002d9 	.word	0x200002d9
 8001508:	200002d8 	.word	0x200002d8
 800150c:	200002d0 	.word	0x200002d0
 8001510:	200002e0 	.word	0x200002e0
 8001514:	200002c8 	.word	0x200002c8
 8001518:	200002c0 	.word	0x200002c0
 800151c:	40390000 	.word	0x40390000
 8001520:	200002d4 	.word	0x200002d4
 8001524:	080091d0 	.word	0x080091d0
 8001528:	20000378 	.word	0x20000378
 800152c:	080091e4 	.word	0x080091e4
 8001530:	080091fc 	.word	0x080091fc
 8001534:	08009210 	.word	0x08009210
 8001538:	0800921c 	.word	0x0800921c
 800153c:	08009224 	.word	0x08009224

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	@ 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800154a:	2228      	movs	r2, #40	@ 0x28
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f005 fd59 	bl	8007006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157e:	2301      	movs	r3, #1
 8001580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001582:	2302      	movs	r3, #2
 8001584:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001586:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800158a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800158c:	2300      	movs	r3, #0
 800158e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fa79 	bl	8003a8c <HAL_RCC_OscConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80015a0:	f000 f827 	bl	80015f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a4:	230f      	movs	r3, #15
 80015a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fce5 	bl	8003f90 <HAL_RCC_ClockConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015cc:	f000 f811 	bl	80015f2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015d0:	2302      	movs	r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fe66 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015e6:	f000 f804 	bl	80015f2 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3750      	adds	r7, #80	@ 0x50
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f6:	b672      	cpsid	i
}
 80015f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fa:	bf00      	nop
 80015fc:	e7fd      	b.n	80015fa <Error_Handler+0x8>
	...

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_MspInit+0x5c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <HAL_MspInit+0x5c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_MspInit+0x5c>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_MspInit+0x5c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <HAL_MspInit+0x5c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_MspInit+0x5c>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_MspInit+0x60>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_MspInit+0x60>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 fb48 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <DMA1_Channel1_IRQHandler+0x10>)
 80016c2:	f001 fa8f 	bl	8002be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000224 	.word	0x20000224

080016d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <ADC1_2_IRQHandler+0x10>)
 80016d6:	f000 fd2d 	bl	8002134 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001f4 	.word	0x200001f4

080016e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <TIM3_IRQHandler+0x10>)
 80016ea:	f003 f98d 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000330 	.word	0x20000330

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f004 f9c7 	bl	8005a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000378 	.word	0x20000378

0800170c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return 1;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <_kill>:

int _kill(int pid, int sig)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001724:	f005 fcc2 	bl	80070ac <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	2216      	movs	r2, #22
 800172c:	601a      	str	r2, [r3, #0]
  return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_exit>:

void _exit (int status)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001742:	f04f 31ff 	mov.w	r1, #4294967295
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffe7 	bl	800171a <_kill>
  while (1) {}    /* Make sure we hang here */
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <_exit+0x12>

08001750 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
  }

  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e009      	b.n	80017b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf1      	blt.n	800179c <_write+0x12>
  }
  return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_close>:

int _close(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <_isatty>:

int _isatty(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
	...

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f005 fc2a 	bl	80070ac <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20005000 	.word	0x20005000
 8001884:	00000400 	.word	0x00000400
 8001888:	200002e4 	.word	0x200002e4
 800188c:	20000510 	.word	0x20000510

08001890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08e      	sub	sp, #56	@ 0x38
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <MX_TIM2_Init+0xe8>)
 80018ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80018d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <MX_TIM2_Init+0xe8>)
 80018d6:	220f      	movs	r2, #15
 80018d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <MX_TIM2_Init+0xe8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80018e0:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <MX_TIM2_Init+0xe8>)
 80018e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <MX_TIM2_Init+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <MX_TIM2_Init+0xe8>)
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f4:	4823      	ldr	r0, [pc, #140]	@ (8001984 <MX_TIM2_Init+0xe8>)
 80018f6:	f002 fd8f 	bl	8004418 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001900:	f7ff fe77 	bl	80015f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800190a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800190e:	4619      	mov	r1, r3
 8001910:	481c      	ldr	r0, [pc, #112]	@ (8001984 <MX_TIM2_Init+0xe8>)
 8001912:	f003 fac7 	bl	8004ea4 <HAL_TIM_ConfigClockSource>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800191c:	f7ff fe69 	bl	80015f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001920:	4818      	ldr	r0, [pc, #96]	@ (8001984 <MX_TIM2_Init+0xe8>)
 8001922:	f002 fe13 	bl	800454c <HAL_TIM_PWM_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800192c:	f7ff fe61 	bl	80015f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4619      	mov	r1, r3
 800193e:	4811      	ldr	r0, [pc, #68]	@ (8001984 <MX_TIM2_Init+0xe8>)
 8001940:	f003 ff5a 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800194a:	f7ff fe52 	bl	80015f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194e:	2360      	movs	r3, #96	@ 0x60
 8001950:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 49;
 8001952:	2331      	movs	r3, #49	@ 0x31
 8001954:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <MX_TIM2_Init+0xe8>)
 8001966:	f003 f9db 	bl	8004d20 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001970:	f7ff fe3f 	bl	80015f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001974:	4803      	ldr	r0, [pc, #12]	@ (8001984 <MX_TIM2_Init+0xe8>)
 8001976:	f000 f8cf 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3738      	adds	r7, #56	@ 0x38
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002e8 	.word	0x200002e8

08001988 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019a6:	463b      	mov	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a64 <MX_TIM3_Init+0xdc>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019ba:	220f      	movs	r2, #15
 80019bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019d8:	4821      	ldr	r0, [pc, #132]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019da:	f002 fd1d 	bl	8004418 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80019e4:	f7ff fe05 	bl	80015f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	4619      	mov	r1, r3
 80019f4:	481a      	ldr	r0, [pc, #104]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019f6:	f003 fa55 	bl	8004ea4 <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a00:	f7ff fdf7 	bl	80015f2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a04:	4816      	ldr	r0, [pc, #88]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 8001a06:	f002 fe9b 	bl	8004740 <HAL_TIM_IC_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a10:	f7ff fdef 	bl	80015f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a14:	2320      	movs	r3, #32
 8001a16:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4619      	mov	r1, r3
 8001a22:	480f      	ldr	r0, [pc, #60]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 8001a24:	f003 fee8 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001a2e:	f7ff fde0 	bl	80015f2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a36:	2301      	movs	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	2204      	movs	r2, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 8001a4a:	f003 f8cd 	bl	8004be8 <HAL_TIM_IC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001a54:	f7ff fdcd 	bl	80015f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	@ 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000330 	.word	0x20000330
 8001a64:	40000400 	.word	0x40000400

08001a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a86:	d10c      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a88:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	61d3      	str	r3, [r2, #28]
 8001a94:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001aa0:	e030      	b.n	8001b04 <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b10 <HAL_TIM_Base_MspInit+0xa8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d12b      	bne.n	8001b04 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aac:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4a16      	ldr	r2, [pc, #88]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	61d3      	str	r3, [r2, #28]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a10      	ldr	r2, [pc, #64]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <HAL_TIM_Base_MspInit+0xa4>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <HAL_TIM_Base_MspInit+0xac>)
 8001af0:	f001 f9ac 	bl	8002e4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	201d      	movs	r0, #29
 8001afa:	f000 fece 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001afe:	201d      	movs	r0, #29
 8001b00:	f000 fee7 	bl	80028d2 <HAL_NVIC_EnableIRQ>
}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	@ 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40010800 	.word	0x40010800

08001b18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b36:	d117      	bne.n	8001b68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <HAL_TIM_MspPostInit+0x58>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <HAL_TIM_MspPostInit+0x58>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_TIM_MspPostInit+0x58>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b50:	2301      	movs	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4804      	ldr	r0, [pc, #16]	@ (8001b74 <HAL_TIM_MspPostInit+0x5c>)
 8001b64:	f001 f972 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010800 	.word	0x40010800

08001b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <MX_USART2_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f003 fe92 	bl	80058d8 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f7ff fd1a 	bl	80015f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000378 	.word	0x20000378
 8001bc8:	40004400 	.word	0x40004400

08001bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c64 <HAL_UART_MspInit+0x98>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d137      	bne.n	8001c5c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_UART_MspInit+0x9c>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_UART_MspInit+0x9c>)
 8001bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf6:	61d3      	str	r3, [r2, #28]
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_UART_MspInit+0x9c>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_UART_MspInit+0x9c>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <HAL_UART_MspInit+0x9c>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_UART_MspInit+0x9c>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480f      	ldr	r0, [pc, #60]	@ (8001c6c <HAL_UART_MspInit+0xa0>)
 8001c30:	f001 f90c 	bl	8002e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c34:	2308      	movs	r3, #8
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <HAL_UART_MspInit+0xa0>)
 8001c48:	f001 f900 	bl	8002e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2026      	movs	r0, #38	@ 0x26
 8001c52:	f000 fe22 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c56:	2026      	movs	r0, #38	@ 0x26
 8001c58:	f000 fe3b 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40004400 	.word	0x40004400
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010800 	.word	0x40010800

08001c70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c70:	f7ff fe0e 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c74:	480b      	ldr	r0, [pc, #44]	@ (8001ca4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c76:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c78:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c8c:	4c09      	ldr	r4, [pc, #36]	@ (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f005 fa0d 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c9e:	f7ff fac3 	bl	8001228 <main>
  bx lr
 8001ca2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cac:	080095e4 	.word	0x080095e4
  ldr r2, =_sbss
 8001cb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001cb4:	20000510 	.word	0x20000510

08001cb8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <CAN1_RX1_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_Init+0x28>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_Init+0x28>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 fdd9 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	200f      	movs	r0, #15
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fc92 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fdf1 	bl	80028ee <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 fdb9 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	@ (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_IncTick+0x1c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a03      	ldr	r2, [pc, #12]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000008 	.word	0x20000008
 8001d68:	200003c0 	.word	0x200003c0

08001d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b02      	ldr	r3, [pc, #8]	@ (8001d7c <HAL_GetTick+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	200003c0 	.word	0x200003c0

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffe0 	bl	8001d6c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0be      	b.n	8001f68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe ffea 	bl	8000de0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fbbd 	bl	800258c <ADC_ConversionStop_Disable>
 8001e12:	4603      	mov	r3, r0
 8001e14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 8099 	bne.w	8001f56 <HAL_ADC_Init+0x18e>
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 8095 	bne.w	8001f56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e34:	f023 0302 	bic.w	r3, r3, #2
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7b1b      	ldrb	r3, [r3, #12]
 8001e4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e60:	d003      	beq.n	8001e6a <HAL_ADC_Init+0xa2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <HAL_ADC_Init+0xa8>
 8001e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6e:	e000      	b.n	8001e72 <HAL_ADC_Init+0xaa>
 8001e70:	2300      	movs	r3, #0
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7d1b      	ldrb	r3, [r3, #20]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d119      	bne.n	8001eb4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7b1b      	ldrb	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	035a      	lsls	r2, r3, #13
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	f043 0220 	orr.w	r2, r3, #32
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_ADC_Init+0x1a8>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee4:	d003      	beq.n	8001eee <HAL_ADC_Init+0x126>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d104      	bne.n	8001ef8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	051b      	lsls	r3, r3, #20
 8001ef6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_ADC_Init+0x1ac>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f32:	e018      	b.n	8001f66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	f023 0312 	bic.w	r3, r3, #18
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f54:	e007      	b.n	8001f66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	ffe1f7fd 	.word	0xffe1f7fd
 8001f74:	ff1f0efe 	.word	0xff1f0efe

08001f78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a64      	ldr	r2, [pc, #400]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_Start_DMA+0x24>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a63      	ldr	r2, [pc, #396]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_Start_DMA+0x32>
 8001f9c:	4b60      	ldr	r3, [pc, #384]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 80b3 	bne.w	8002110 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_Start_DMA+0x40>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0ae      	b.n	8002116 <HAL_ADC_Start_DMA+0x19e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fa89 	bl	80024d8 <ADC_Enable>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 809a 	bne.w	8002106 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a4e      	ldr	r2, [pc, #312]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_Start_DMA+0x84>
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d115      	bne.n	8002028 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d026      	beq.n	8002064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800201e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002026:	e01d      	b.n	8002064 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a39      	ldr	r2, [pc, #228]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_ADC_Start_DMA+0xd0>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a38      	ldr	r2, [pc, #224]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d10d      	bne.n	8002064 <HAL_ADC_Start_DMA+0xec>
 8002048:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800205c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	f023 0206 	bic.w	r2, r3, #6
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800207c:	e002      	b.n	8002084 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <HAL_ADC_Start_DMA+0x1b0>)
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a24      	ldr	r2, [pc, #144]	@ (800212c <HAL_ADC_Start_DMA+0x1b4>)
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <HAL_ADC_Start_DMA+0x1b8>)
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0202 	mvn.w	r2, #2
 80020ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a18      	ldr	r0, [r3, #32]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	334c      	adds	r3, #76	@ 0x4c
 80020c8:	4619      	mov	r1, r3
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f000 fc75 	bl	80029bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020dc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020e0:	d108      	bne.n	80020f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020f2:	e00f      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002102:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002104:	e006      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800210e:	e001      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002114:	7dfb      	ldrb	r3, [r7, #23]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40012400 	.word	0x40012400
 8002124:	40012800 	.word	0x40012800
 8002128:	0800260f 	.word	0x0800260f
 800212c:	0800268b 	.word	0x0800268b
 8002130:	080026a7 	.word	0x080026a7

08002134 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03e      	beq.n	80021d4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d039      	beq.n	80021d4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002182:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002186:	d11d      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800218c:	2b00      	cmp	r3, #0
 800218e:	d119      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0220 	bic.w	r2, r2, #32
 800219e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff f817 	bl	80011f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0212 	mvn.w	r2, #18
 80021d2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d04d      	beq.n	800227a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d048      	beq.n	800227a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800220a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800220e:	d012      	beq.n	8002236 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800221a:	2b00      	cmp	r3, #0
 800221c:	d125      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002228:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800222c:	d11d      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002244:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa35 	bl	80026da <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 020c 	mvn.w	r2, #12
 8002278:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f812 	bl	80022c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0201 	mvn.w	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x20>
 8002304:	2302      	movs	r3, #2
 8002306:	e0dc      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x1da>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b06      	cmp	r3, #6
 8002316:	d81c      	bhi.n	8002352 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b05      	subs	r3, #5
 800232a:	221f      	movs	r2, #31
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4019      	ands	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b05      	subs	r3, #5
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002350:	e03c      	b.n	80023cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d81c      	bhi.n	8002394 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	@ 0x23
 800236c:	221f      	movs	r2, #31
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	4019      	ands	r1, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b23      	subs	r3, #35	@ 0x23
 8002386:	fa00 f203 	lsl.w	r2, r0, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	631a      	str	r2, [r3, #48]	@ 0x30
 8002392:	e01b      	b.n	80023cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b41      	subs	r3, #65	@ 0x41
 80023a6:	221f      	movs	r2, #31
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4019      	ands	r1, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	3b41      	subs	r3, #65	@ 0x41
 80023c0:	fa00 f203 	lsl.w	r2, r0, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	d91c      	bls.n	800240e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	3b1e      	subs	r3, #30
 80023e6:	2207      	movs	r2, #7
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4019      	ands	r1, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6898      	ldr	r0, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	3b1e      	subs	r3, #30
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	e019      	b.n	8002442 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6919      	ldr	r1, [r3, #16]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	2207      	movs	r2, #7
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	4019      	ands	r1, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6898      	ldr	r0, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	fa00 f203 	lsl.w	r2, r0, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b10      	cmp	r3, #16
 8002448:	d003      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800244e:	2b11      	cmp	r3, #17
 8002450:	d132      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d125      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d126      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002478:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d11a      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	0c9a      	lsrs	r2, r3, #18
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002498:	e002      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3b01      	subs	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f9      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1b2>
 80024a6:	e007      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012400 	.word	0x40012400
 80024d0:	20000000 	.word	0x20000000
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d040      	beq.n	8002578 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002506:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <ADC_Enable+0xac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1f      	ldr	r2, [pc, #124]	@ (8002588 <ADC_Enable+0xb0>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002514:	e002      	b.n	800251c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3b01      	subs	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f9      	bne.n	8002516 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002522:	f7ff fc23 	bl	8001d6c <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002528:	e01f      	b.n	800256a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800252a:	f7ff fc1f 	bl	8001d6c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d918      	bls.n	800256a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d011      	beq.n	800256a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e007      	b.n	800257a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d1d8      	bne.n	800252a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000
 8002588:	431bde83 	.word	0x431bde83

0800258c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d12e      	bne.n	8002604 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b6:	f7ff fbd9 	bl	8001d6c <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025bc:	e01b      	b.n	80025f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025be:	f7ff fbd5 	bl	8001d6c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d914      	bls.n	80025f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10d      	bne.n	80025f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d0dc      	beq.n	80025be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002624:	2b00      	cmp	r3, #0
 8002626:	d127      	bne.n	8002678 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800263e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002642:	d115      	bne.n	8002670 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7fe fdc1 	bl	80011f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002676:	e004      	b.n	8002682 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff fe0a 	bl	80022b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	f043 0204 	orr.w	r2, r3, #4
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7ff fe02 	bl	80022d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4906      	ldr	r1, [pc, #24]	@ (8002784 <__NVIC_EnableIRQ+0x34>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	@ (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	@ (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	@ 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f7ff ff90 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff2d 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff42 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff90 	bl	80027dc <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5f 	bl	8002788 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff35 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e043      	b.n	80029a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	4b22      	ldr	r3, [pc, #136]	@ (80029b0 <HAL_DMA_Init+0xa8>)
 8002926:	4413      	add	r3, r2
 8002928:	4a22      	ldr	r2, [pc, #136]	@ (80029b4 <HAL_DMA_Init+0xac>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	009a      	lsls	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <HAL_DMA_Init+0xb0>)
 800293a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002952:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	bffdfff8 	.word	0xbffdfff8
 80029b4:	cccccccd 	.word	0xcccccccd
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_DMA_Start_IT+0x20>
 80029d8:	2302      	movs	r3, #2
 80029da:	e04b      	b.n	8002a74 <HAL_DMA_Start_IT+0xb8>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d13a      	bne.n	8002a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f9eb 	bl	8002df0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 020e 	orr.w	r2, r2, #14
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e00f      	b.n	8002a54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0204 	bic.w	r2, r2, #4
 8002a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 020a 	orr.w	r2, r2, #10
 8002a52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e005      	b.n	8002a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e020      	b.n	8002ae8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 020e 	bic.w	r2, r2, #14
 8002ab4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d005      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e051      	b.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 020e 	bic.w	r2, r2, #14
 8002b26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a22      	ldr	r2, [pc, #136]	@ (8002bc8 <HAL_DMA_Abort_IT+0xd4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d029      	beq.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a21      	ldr	r2, [pc, #132]	@ (8002bcc <HAL_DMA_Abort_IT+0xd8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d022      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x9e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <HAL_DMA_Abort_IT+0xdc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01a      	beq.n	8002b8c <HAL_DMA_Abort_IT+0x98>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd4 <HAL_DMA_Abort_IT+0xe0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d012      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x92>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_DMA_Abort_IT+0xe4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00a      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x8c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <HAL_DMA_Abort_IT+0xe8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d102      	bne.n	8002b7a <HAL_DMA_Abort_IT+0x86>
 8002b74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b78:	e00e      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b7e:	e00b      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b84:	e008      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b8a:	e005      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b90:	e002      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b92:	2310      	movs	r3, #16
 8002b94:	e000      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b96:	2301      	movs	r3, #1
 8002b98:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_DMA_Abort_IT+0xec>)
 8002b9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
    } 
  }
  return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40020008 	.word	0x40020008
 8002bcc:	4002001c 	.word	0x4002001c
 8002bd0:	40020030 	.word	0x40020030
 8002bd4:	40020044 	.word	0x40020044
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	4002006c 	.word	0x4002006c
 8002be0:	40020000 	.word	0x40020000

08002be4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	2204      	movs	r2, #4
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d04f      	beq.n	8002cac <HAL_DMA_IRQHandler+0xc8>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04a      	beq.n	8002cac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a66      	ldr	r2, [pc, #408]	@ (8002dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d029      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xae>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a65      	ldr	r2, [pc, #404]	@ (8002dd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xaa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a63      	ldr	r2, [pc, #396]	@ (8002ddc <HAL_DMA_IRQHandler+0x1f8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0xa4>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a62      	ldr	r2, [pc, #392]	@ (8002de0 <HAL_DMA_IRQHandler+0x1fc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x9e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a60      	ldr	r2, [pc, #384]	@ (8002de4 <HAL_DMA_IRQHandler+0x200>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x98>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5f      	ldr	r2, [pc, #380]	@ (8002de8 <HAL_DMA_IRQHandler+0x204>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x92>
 8002c70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c74:	e00e      	b.n	8002c94 <HAL_DMA_IRQHandler+0xb0>
 8002c76:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c7a:	e00b      	b.n	8002c94 <HAL_DMA_IRQHandler+0xb0>
 8002c7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c80:	e008      	b.n	8002c94 <HAL_DMA_IRQHandler+0xb0>
 8002c82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c86:	e005      	b.n	8002c94 <HAL_DMA_IRQHandler+0xb0>
 8002c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c8c:	e002      	b.n	8002c94 <HAL_DMA_IRQHandler+0xb0>
 8002c8e:	2340      	movs	r3, #64	@ 0x40
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_IRQHandler+0xb0>
 8002c92:	2304      	movs	r3, #4
 8002c94:	4a55      	ldr	r2, [pc, #340]	@ (8002dec <HAL_DMA_IRQHandler+0x208>)
 8002c96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8094 	beq.w	8002dca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002caa:	e08e      	b.n	8002dca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d056      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x186>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d051      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020a 	bic.w	r2, r2, #10
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a38      	ldr	r2, [pc, #224]	@ (8002dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d029      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x166>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a37      	ldr	r2, [pc, #220]	@ (8002dd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x162>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a35      	ldr	r2, [pc, #212]	@ (8002ddc <HAL_DMA_IRQHandler+0x1f8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x15c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	@ (8002de0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d012      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x156>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <HAL_DMA_IRQHandler+0x200>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00a      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x150>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a31      	ldr	r2, [pc, #196]	@ (8002de8 <HAL_DMA_IRQHandler+0x204>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x14a>
 8002d28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d2c:	e00e      	b.n	8002d4c <HAL_DMA_IRQHandler+0x168>
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d32:	e00b      	b.n	8002d4c <HAL_DMA_IRQHandler+0x168>
 8002d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d38:	e008      	b.n	8002d4c <HAL_DMA_IRQHandler+0x168>
 8002d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d3e:	e005      	b.n	8002d4c <HAL_DMA_IRQHandler+0x168>
 8002d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d44:	e002      	b.n	8002d4c <HAL_DMA_IRQHandler+0x168>
 8002d46:	2320      	movs	r3, #32
 8002d48:	e000      	b.n	8002d4c <HAL_DMA_IRQHandler+0x168>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	4a27      	ldr	r2, [pc, #156]	@ (8002dec <HAL_DMA_IRQHandler+0x208>)
 8002d4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d034      	beq.n	8002dca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d68:	e02f      	b.n	8002dca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	2208      	movs	r2, #8
 8002d70:	409a      	lsls	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d028      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x1e8>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d023      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 020e 	bic.w	r2, r2, #14
 8002d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
    }
  }
  return;
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
}
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40020008 	.word	0x40020008
 8002dd8:	4002001c 	.word	0x4002001c
 8002ddc:	40020030 	.word	0x40020030
 8002de0:	40020044 	.word	0x40020044
 8002de4:	40020058 	.word	0x40020058
 8002de8:	4002006c 	.word	0x4002006c
 8002dec:	40020000 	.word	0x40020000

08002df0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d108      	bne.n	8002e30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e2e:	e007      	b.n	8002e40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b08b      	sub	sp, #44	@ 0x2c
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5e:	e169      	b.n	8003134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e60:	2201      	movs	r2, #1
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f040 8158 	bne.w	800312e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a9a      	ldr	r2, [pc, #616]	@ (80030ec <HAL_GPIO_Init+0x2a0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d05e      	beq.n	8002f46 <HAL_GPIO_Init+0xfa>
 8002e88:	4a98      	ldr	r2, [pc, #608]	@ (80030ec <HAL_GPIO_Init+0x2a0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d875      	bhi.n	8002f7a <HAL_GPIO_Init+0x12e>
 8002e8e:	4a98      	ldr	r2, [pc, #608]	@ (80030f0 <HAL_GPIO_Init+0x2a4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d058      	beq.n	8002f46 <HAL_GPIO_Init+0xfa>
 8002e94:	4a96      	ldr	r2, [pc, #600]	@ (80030f0 <HAL_GPIO_Init+0x2a4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d86f      	bhi.n	8002f7a <HAL_GPIO_Init+0x12e>
 8002e9a:	4a96      	ldr	r2, [pc, #600]	@ (80030f4 <HAL_GPIO_Init+0x2a8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d052      	beq.n	8002f46 <HAL_GPIO_Init+0xfa>
 8002ea0:	4a94      	ldr	r2, [pc, #592]	@ (80030f4 <HAL_GPIO_Init+0x2a8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d869      	bhi.n	8002f7a <HAL_GPIO_Init+0x12e>
 8002ea6:	4a94      	ldr	r2, [pc, #592]	@ (80030f8 <HAL_GPIO_Init+0x2ac>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d04c      	beq.n	8002f46 <HAL_GPIO_Init+0xfa>
 8002eac:	4a92      	ldr	r2, [pc, #584]	@ (80030f8 <HAL_GPIO_Init+0x2ac>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d863      	bhi.n	8002f7a <HAL_GPIO_Init+0x12e>
 8002eb2:	4a92      	ldr	r2, [pc, #584]	@ (80030fc <HAL_GPIO_Init+0x2b0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d046      	beq.n	8002f46 <HAL_GPIO_Init+0xfa>
 8002eb8:	4a90      	ldr	r2, [pc, #576]	@ (80030fc <HAL_GPIO_Init+0x2b0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d85d      	bhi.n	8002f7a <HAL_GPIO_Init+0x12e>
 8002ebe:	2b12      	cmp	r3, #18
 8002ec0:	d82a      	bhi.n	8002f18 <HAL_GPIO_Init+0xcc>
 8002ec2:	2b12      	cmp	r3, #18
 8002ec4:	d859      	bhi.n	8002f7a <HAL_GPIO_Init+0x12e>
 8002ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ecc <HAL_GPIO_Init+0x80>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002f47 	.word	0x08002f47
 8002ed0:	08002f21 	.word	0x08002f21
 8002ed4:	08002f33 	.word	0x08002f33
 8002ed8:	08002f75 	.word	0x08002f75
 8002edc:	08002f7b 	.word	0x08002f7b
 8002ee0:	08002f7b 	.word	0x08002f7b
 8002ee4:	08002f7b 	.word	0x08002f7b
 8002ee8:	08002f7b 	.word	0x08002f7b
 8002eec:	08002f7b 	.word	0x08002f7b
 8002ef0:	08002f7b 	.word	0x08002f7b
 8002ef4:	08002f7b 	.word	0x08002f7b
 8002ef8:	08002f7b 	.word	0x08002f7b
 8002efc:	08002f7b 	.word	0x08002f7b
 8002f00:	08002f7b 	.word	0x08002f7b
 8002f04:	08002f7b 	.word	0x08002f7b
 8002f08:	08002f7b 	.word	0x08002f7b
 8002f0c:	08002f7b 	.word	0x08002f7b
 8002f10:	08002f29 	.word	0x08002f29
 8002f14:	08002f3d 	.word	0x08002f3d
 8002f18:	4a79      	ldr	r2, [pc, #484]	@ (8003100 <HAL_GPIO_Init+0x2b4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f1e:	e02c      	b.n	8002f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	623b      	str	r3, [r7, #32]
          break;
 8002f26:	e029      	b.n	8002f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	623b      	str	r3, [r7, #32]
          break;
 8002f30:	e024      	b.n	8002f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	3308      	adds	r3, #8
 8002f38:	623b      	str	r3, [r7, #32]
          break;
 8002f3a:	e01f      	b.n	8002f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	330c      	adds	r3, #12
 8002f42:	623b      	str	r3, [r7, #32]
          break;
 8002f44:	e01a      	b.n	8002f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f4e:	2304      	movs	r3, #4
 8002f50:	623b      	str	r3, [r7, #32]
          break;
 8002f52:	e013      	b.n	8002f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	611a      	str	r2, [r3, #16]
          break;
 8002f66:	e009      	b.n	8002f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f68:	2308      	movs	r3, #8
 8002f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	615a      	str	r2, [r3, #20]
          break;
 8002f72:	e003      	b.n	8002f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]
          break;
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x130>
          break;
 8002f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2bff      	cmp	r3, #255	@ 0xff
 8002f80:	d801      	bhi.n	8002f86 <HAL_GPIO_Init+0x13a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	e001      	b.n	8002f8a <HAL_GPIO_Init+0x13e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2bff      	cmp	r3, #255	@ 0xff
 8002f90:	d802      	bhi.n	8002f98 <HAL_GPIO_Init+0x14c>
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	e002      	b.n	8002f9e <HAL_GPIO_Init+0x152>
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	3b08      	subs	r3, #8
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	6a39      	ldr	r1, [r7, #32]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80b1 	beq.w	800312e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8003104 <HAL_GPIO_Init+0x2b8>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	4a4c      	ldr	r2, [pc, #304]	@ (8003104 <HAL_GPIO_Init+0x2b8>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6193      	str	r3, [r2, #24]
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <HAL_GPIO_Init+0x2b8>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fe4:	4a48      	ldr	r2, [pc, #288]	@ (8003108 <HAL_GPIO_Init+0x2bc>)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a40      	ldr	r2, [pc, #256]	@ (800310c <HAL_GPIO_Init+0x2c0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_GPIO_Init+0x1ec>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <HAL_GPIO_Init+0x2c4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00d      	beq.n	8003034 <HAL_GPIO_Init+0x1e8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3e      	ldr	r2, [pc, #248]	@ (8003114 <HAL_GPIO_Init+0x2c8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <HAL_GPIO_Init+0x1e4>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a3d      	ldr	r2, [pc, #244]	@ (8003118 <HAL_GPIO_Init+0x2cc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_GPIO_Init+0x1e0>
 8003028:	2303      	movs	r3, #3
 800302a:	e006      	b.n	800303a <HAL_GPIO_Init+0x1ee>
 800302c:	2304      	movs	r3, #4
 800302e:	e004      	b.n	800303a <HAL_GPIO_Init+0x1ee>
 8003030:	2302      	movs	r3, #2
 8003032:	e002      	b.n	800303a <HAL_GPIO_Init+0x1ee>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_GPIO_Init+0x1ee>
 8003038:	2300      	movs	r3, #0
 800303a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303c:	f002 0203 	and.w	r2, r2, #3
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	4093      	lsls	r3, r2
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800304a:	492f      	ldr	r1, [pc, #188]	@ (8003108 <HAL_GPIO_Init+0x2bc>)
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003064:	4b2d      	ldr	r3, [pc, #180]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	492c      	ldr	r1, [pc, #176]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]
 8003070:	e006      	b.n	8003080 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003072:	4b2a      	ldr	r3, [pc, #168]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	43db      	mvns	r3, r3
 800307a:	4928      	ldr	r1, [pc, #160]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 800307c:	4013      	ands	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d006      	beq.n	800309a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	4922      	ldr	r1, [pc, #136]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	60cb      	str	r3, [r1, #12]
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800309a:	4b20      	ldr	r3, [pc, #128]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	491e      	ldr	r1, [pc, #120]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4918      	ldr	r1, [pc, #96]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
 80030c0:	e006      	b.n	80030d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030c2:	4b16      	ldr	r3, [pc, #88]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	4914      	ldr	r1, [pc, #80]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d021      	beq.n	8003120 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030dc:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	490e      	ldr	r1, [pc, #56]	@ (800311c <HAL_GPIO_Init+0x2d0>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e021      	b.n	800312e <HAL_GPIO_Init+0x2e2>
 80030ea:	bf00      	nop
 80030ec:	10320000 	.word	0x10320000
 80030f0:	10310000 	.word	0x10310000
 80030f4:	10220000 	.word	0x10220000
 80030f8:	10210000 	.word	0x10210000
 80030fc:	10120000 	.word	0x10120000
 8003100:	10110000 	.word	0x10110000
 8003104:	40021000 	.word	0x40021000
 8003108:	40010000 	.word	0x40010000
 800310c:	40010800 	.word	0x40010800
 8003110:	40010c00 	.word	0x40010c00
 8003114:	40011000 	.word	0x40011000
 8003118:	40011400 	.word	0x40011400
 800311c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_GPIO_Init+0x304>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	43db      	mvns	r3, r3
 8003128:	4909      	ldr	r1, [pc, #36]	@ (8003150 <HAL_GPIO_Init+0x304>)
 800312a:	4013      	ands	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	3301      	adds	r3, #1
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	f47f ae8e 	bne.w	8002e60 <HAL_GPIO_Init+0x14>
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	372c      	adds	r7, #44	@ 0x2c
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40010400 	.word	0x40010400

08003154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e12b      	b.n	80033be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd ffe4 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	@ 0x24
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031b8:	f001 f832 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 80031bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a81      	ldr	r2, [pc, #516]	@ (80033c8 <HAL_I2C_Init+0x274>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d807      	bhi.n	80031d8 <HAL_I2C_Init+0x84>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a80      	ldr	r2, [pc, #512]	@ (80033cc <HAL_I2C_Init+0x278>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e006      	b.n	80031e6 <HAL_I2C_Init+0x92>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a7d      	ldr	r2, [pc, #500]	@ (80033d0 <HAL_I2C_Init+0x27c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	bf94      	ite	ls
 80031e0:	2301      	movls	r3, #1
 80031e2:	2300      	movhi	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0e7      	b.n	80033be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a78      	ldr	r2, [pc, #480]	@ (80033d4 <HAL_I2C_Init+0x280>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9b      	lsrs	r3, r3, #18
 80031f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a6a      	ldr	r2, [pc, #424]	@ (80033c8 <HAL_I2C_Init+0x274>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d802      	bhi.n	8003228 <HAL_I2C_Init+0xd4>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3301      	adds	r3, #1
 8003226:	e009      	b.n	800323c <HAL_I2C_Init+0xe8>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	4a69      	ldr	r2, [pc, #420]	@ (80033d8 <HAL_I2C_Init+0x284>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	3301      	adds	r3, #1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800324e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	495c      	ldr	r1, [pc, #368]	@ (80033c8 <HAL_I2C_Init+0x274>)
 8003258:	428b      	cmp	r3, r1
 800325a:	d819      	bhi.n	8003290 <HAL_I2C_Init+0x13c>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e59      	subs	r1, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fbb1 f3f3 	udiv	r3, r1, r3
 800326a:	1c59      	adds	r1, r3, #1
 800326c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003270:	400b      	ands	r3, r1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_I2C_Init+0x138>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e59      	subs	r1, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fbb1 f3f3 	udiv	r3, r1, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	e051      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 800328c:	2304      	movs	r3, #4
 800328e:	e04f      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <HAL_I2C_Init+0x168>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e012      	b.n	80032e2 <HAL_I2C_Init+0x18e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	0099      	lsls	r1, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Init+0x196>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10e      	bne.n	8003310 <HAL_I2C_Init+0x1bc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e58      	subs	r0, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	440b      	add	r3, r1
 8003300:	fbb0 f3f3 	udiv	r3, r0, r3
 8003304:	3301      	adds	r3, #1
 8003306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	0099      	lsls	r1, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	6809      	ldr	r1, [r1, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800335e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6911      	ldr	r1, [r2, #16]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	430b      	orrs	r3, r1
 8003372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	000186a0 	.word	0x000186a0
 80033cc:	001e847f 	.word	0x001e847f
 80033d0:	003d08ff 	.word	0x003d08ff
 80033d4:	431bde83 	.word	0x431bde83
 80033d8:	10624dd3 	.word	0x10624dd3

080033dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	461a      	mov	r2, r3
 80033e8:	460b      	mov	r3, r1
 80033ea:	817b      	strh	r3, [r7, #10]
 80033ec:	4613      	mov	r3, r2
 80033ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f7fe fcbc 	bl	8001d6c <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b20      	cmp	r3, #32
 8003400:	f040 80e0 	bne.w	80035c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2319      	movs	r3, #25
 800340a:	2201      	movs	r2, #1
 800340c:	4970      	ldr	r1, [pc, #448]	@ (80035d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f964 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
 800341c:	e0d3      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_I2C_Master_Transmit+0x50>
 8003428:	2302      	movs	r3, #2
 800342a:	e0cc      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d007      	beq.n	8003452 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2221      	movs	r2, #33	@ 0x21
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2210      	movs	r2, #16
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	893a      	ldrh	r2, [r7, #8]
 8003482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a50      	ldr	r2, [pc, #320]	@ (80035d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003492:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003494:	8979      	ldrh	r1, [r7, #10]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f89c 	bl	80035d8 <I2C_MasterRequestWrite>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e08d      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034c0:	e066      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	6a39      	ldr	r1, [r7, #32]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fa22 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d107      	bne.n	80034ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06b      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d11b      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x188>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d017      	beq.n	8003564 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6a39      	ldr	r1, [r7, #32]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa19 	bl	80039a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e01a      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d194      	bne.n	80034c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000

080035d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	460b      	mov	r3, r1
 80035e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d006      	beq.n	8003602 <I2C_MasterRequestWrite+0x2a>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d003      	beq.n	8003602 <I2C_MasterRequestWrite+0x2a>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003600:	d108      	bne.n	8003614 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e00b      	b.n	800362c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	2b12      	cmp	r3, #18
 800361a:	d107      	bne.n	800362c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800362a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f84f 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003652:	d103      	bne.n	800365c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800365a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e035      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003668:	d108      	bne.n	800367c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	e01b      	b.n	80036b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800367c:	897b      	ldrh	r3, [r7, #10]
 800367e:	11db      	asrs	r3, r3, #7
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f063 030f 	orn	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	490e      	ldr	r1, [pc, #56]	@ (80036d4 <I2C_MasterRequestWrite+0xfc>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f898 	bl	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e010      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4907      	ldr	r1, [pc, #28]	@ (80036d8 <I2C_MasterRequestWrite+0x100>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f888 	bl	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	00010008 	.word	0x00010008
 80036d8:	00010002 	.word	0x00010002

080036dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ec:	e048      	b.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d044      	beq.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe fb39 	bl	8001d6c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d139      	bne.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10d      	bne.n	8003732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	e00c      	b.n	800374c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	43da      	mvns	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	429a      	cmp	r2, r3
 8003750:	d116      	bne.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e023      	b.n	80037c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	0c1b      	lsrs	r3, r3, #16
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d10d      	bne.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	43da      	mvns	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4013      	ands	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	e00c      	b.n	80037c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d093      	beq.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037de:	e071      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ee:	d123      	bne.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e067      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d041      	beq.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003840:	f7fe fa94 	bl	8001d6c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d136      	bne.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10c      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf14      	ite	ne
 8003872:	2301      	movne	r3, #1
 8003874:	2300      	moveq	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	e00b      	b.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	43da      	mvns	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e021      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10c      	bne.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	43da      	mvns	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e00b      	b.n	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f af6d 	bne.w	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391c:	e034      	b.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f886 	bl	8003a30 <I2C_IsAcknowledgeFailed>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e034      	b.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d028      	beq.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fa19 	bl	8001d6c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11d      	bne.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b80      	cmp	r3, #128	@ 0x80
 8003958:	d016      	beq.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e007      	b.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	2b80      	cmp	r3, #128	@ 0x80
 8003994:	d1c3      	bne.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ac:	e034      	b.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f83e 	bl	8003a30 <I2C_IsAcknowledgeFailed>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e034      	b.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d028      	beq.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe f9d1 	bl	8001d6c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11d      	bne.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d016      	beq.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e007      	b.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d1c3      	bne.n	80039ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a46:	d11b      	bne.n	8003a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	f043 0204 	orr.w	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e272      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8087 	beq.w	8003bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aac:	4b92      	ldr	r3, [pc, #584]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d112      	bne.n	8003aea <HAL_RCC_OscConfig+0x5e>
 8003ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad2:	4b89      	ldr	r3, [pc, #548]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x12c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d168      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e24c      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x76>
 8003af4:	4b80      	ldr	r3, [pc, #512]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7f      	ldr	r2, [pc, #508]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e02e      	b.n	8003b60 <HAL_RCC_OscConfig+0xd4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7a      	ldr	r2, [pc, #488]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b78      	ldr	r3, [pc, #480]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a77      	ldr	r2, [pc, #476]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xd4>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0xbc>
 8003b2e:	4b72      	ldr	r3, [pc, #456]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a71      	ldr	r2, [pc, #452]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xd4>
 8003b48:	4b6b      	ldr	r3, [pc, #428]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b68      	ldr	r3, [pc, #416]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a67      	ldr	r2, [pc, #412]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fe f900 	bl	8001d6c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe f8fc 	bl	8001d6c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	@ 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e200      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b5d      	ldr	r3, [pc, #372]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xe4>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f8ec 	bl	8001d6c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe f8e8 	bl	8001d6c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1ec      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b53      	ldr	r3, [pc, #332]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x10c>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d063      	beq.n	8003c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bd2:	4b49      	ldr	r3, [pc, #292]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x18c>
 8003bde:	4b46      	ldr	r3, [pc, #280]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	4b43      	ldr	r3, [pc, #268]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x176>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e1c0      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4939      	ldr	r1, [pc, #228]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	e03a      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	4b36      	ldr	r3, [pc, #216]	@ (8003cfc <HAL_RCC_OscConfig+0x270>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fe f8a1 	bl	8001d6c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fe f89d 	bl	8001d6c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e1a1      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4927      	ldr	r1, [pc, #156]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
 8003c60:	e015      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c62:	4b26      	ldr	r3, [pc, #152]	@ (8003cfc <HAL_RCC_OscConfig+0x270>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe f880 	bl	8001d6c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fe f87c 	bl	8001d6c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e180      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03a      	beq.n	8003d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d019      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b17      	ldr	r3, [pc, #92]	@ (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fe f860 	bl	8001d6c <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb0:	f7fe f85c 	bl	8001d6c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e160      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f000 face 	bl	8004270 <RCC_Delay>
 8003cd4:	e01c      	b.n	8003d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7fe f846 	bl	8001d6c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce2:	e00f      	b.n	8003d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fe f842 	bl	8001d6c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d908      	bls.n	8003d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e146      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	42420000 	.word	0x42420000
 8003d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	4b92      	ldr	r3, [pc, #584]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e9      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a6 	beq.w	8003e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d22:	4b8b      	ldr	r3, [pc, #556]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10d      	bne.n	8003d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	4b88      	ldr	r3, [pc, #544]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4a87      	ldr	r2, [pc, #540]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	61d3      	str	r3, [r2, #28]
 8003d3a:	4b85      	ldr	r3, [pc, #532]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4a:	4b82      	ldr	r3, [pc, #520]	@ (8003f54 <HAL_RCC_OscConfig+0x4c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d56:	4b7f      	ldr	r3, [pc, #508]	@ (8003f54 <HAL_RCC_OscConfig+0x4c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f54 <HAL_RCC_OscConfig+0x4c8>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fe f803 	bl	8001d6c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd ffff 	bl	8001d6c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b64      	cmp	r3, #100	@ 0x64
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e103      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b75      	ldr	r3, [pc, #468]	@ (8003f54 <HAL_RCC_OscConfig+0x4c8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x312>
 8003d90:	4b6f      	ldr	r3, [pc, #444]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4a6e      	ldr	r2, [pc, #440]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6213      	str	r3, [r2, #32]
 8003d9c:	e02d      	b.n	8003dfa <HAL_RCC_OscConfig+0x36e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x334>
 8003da6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4a69      	ldr	r2, [pc, #420]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6213      	str	r3, [r2, #32]
 8003db2:	4b67      	ldr	r3, [pc, #412]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4a66      	ldr	r2, [pc, #408]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6213      	str	r3, [r2, #32]
 8003dbe:	e01c      	b.n	8003dfa <HAL_RCC_OscConfig+0x36e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b05      	cmp	r3, #5
 8003dc6:	d10c      	bne.n	8003de2 <HAL_RCC_OscConfig+0x356>
 8003dc8:	4b61      	ldr	r3, [pc, #388]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4a60      	ldr	r2, [pc, #384]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	6213      	str	r3, [r2, #32]
 8003dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	e00b      	b.n	8003dfa <HAL_RCC_OscConfig+0x36e>
 8003de2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4a5a      	ldr	r2, [pc, #360]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	6213      	str	r3, [r2, #32]
 8003dee:	4b58      	ldr	r3, [pc, #352]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4a57      	ldr	r2, [pc, #348]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d015      	beq.n	8003e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd ffb3 	bl	8001d6c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fd ffaf 	bl	8001d6c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0b1      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	4b4b      	ldr	r3, [pc, #300]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ee      	beq.n	8003e0a <HAL_RCC_OscConfig+0x37e>
 8003e2c:	e014      	b.n	8003e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fd ff9d 	bl	8001d6c <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fd ff99 	bl	8001d6c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e09b      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4c:	4b40      	ldr	r3, [pc, #256]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ee      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	4a3b      	ldr	r2, [pc, #236]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8087 	beq.w	8003f82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e74:	4b36      	ldr	r3, [pc, #216]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d061      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d146      	bne.n	8003f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b33      	ldr	r3, [pc, #204]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd ff6d 	bl	8001d6c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fd ff69 	bl	8001d6c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e06d      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea8:	4b29      	ldr	r3, [pc, #164]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ebe:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4921      	ldr	r1, [pc, #132]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a19      	ldr	r1, [r3, #32]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	491b      	ldr	r1, [pc, #108]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd ff3d 	bl	8001d6c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd ff39 	bl	8001d6c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e03d      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f08:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x46a>
 8003f14:	e035      	b.n	8003f82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd ff26 	bl	8001d6c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd ff22 	bl	8001d6c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e026      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x498>
 8003f42:	e01e      	b.n	8003f82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e019      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40007000 	.word	0x40007000
 8003f58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f8c <HAL_RCC_OscConfig+0x500>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000

08003f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d0      	b.n	8004146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b67      	ldr	r3, [pc, #412]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	4965      	ldr	r1, [pc, #404]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b63      	ldr	r3, [pc, #396]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0b8      	b.n	8004146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fec:	4b59      	ldr	r3, [pc, #356]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a58      	ldr	r2, [pc, #352]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004004:	4b53      	ldr	r3, [pc, #332]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a52      	ldr	r2, [pc, #328]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800400e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004010:	4b50      	ldr	r3, [pc, #320]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	494d      	ldr	r1, [pc, #308]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d040      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d115      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e07f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e073      	b.n	8004146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	4b3d      	ldr	r3, [pc, #244]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e06b      	b.n	8004146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406e:	4b39      	ldr	r3, [pc, #228]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4936      	ldr	r1, [pc, #216]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004080:	f7fd fe74 	bl	8001d6c <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	e00a      	b.n	800409e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004088:	f7fd fe70 	bl	8001d6c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e053      	b.n	8004146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 020c 	and.w	r2, r3, #12
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d1eb      	bne.n	8004088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b0:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d210      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 0207 	bic.w	r2, r3, #7
 80040c6:	4922      	ldr	r1, [pc, #136]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e032      	b.n	8004146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b19      	ldr	r3, [pc, #100]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4916      	ldr	r1, [pc, #88]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800410a:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	490e      	ldr	r1, [pc, #56]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800411e:	f000 f821 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	490a      	ldr	r1, [pc, #40]	@ (8004158 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	fa22 f303 	lsr.w	r3, r2, r3
 8004136:	4a09      	ldr	r2, [pc, #36]	@ (800415c <HAL_RCC_ClockConfig+0x1cc>)
 8004138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800413a:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <HAL_RCC_ClockConfig+0x1d0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fdd2 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40022000 	.word	0x40022000
 8004154:	40021000 	.word	0x40021000
 8004158:	08009238 	.word	0x08009238
 800415c:	20000000 	.word	0x20000000
 8004160:	20000004 	.word	0x20000004

08004164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	2300      	movs	r3, #0
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800417e:	4b1e      	ldr	r3, [pc, #120]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b04      	cmp	r3, #4
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x30>
 800418e:	2b08      	cmp	r3, #8
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x36>
 8004192:	e027      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004194:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004196:	613b      	str	r3, [r7, #16]
      break;
 8004198:	e027      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	0c9b      	lsrs	r3, r3, #18
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	4a17      	ldr	r2, [pc, #92]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041b2:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	0c5b      	lsrs	r3, r3, #17
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a0d      	ldr	r2, [pc, #52]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x98>)
 80041c6:	fb03 f202 	mul.w	r2, r3, r2
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e004      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004208 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	613b      	str	r3, [r7, #16]
      break;
 80041e2:	e002      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x98>)
 80041e6:	613b      	str	r3, [r7, #16]
      break;
 80041e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ea:	693b      	ldr	r3, [r7, #16]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	007a1200 	.word	0x007a1200
 8004200:	08009250 	.word	0x08009250
 8004204:	08009260 	.word	0x08009260
 8004208:	003d0900 	.word	0x003d0900

0800420c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004210:	4b02      	ldr	r3, [pc, #8]	@ (800421c <HAL_RCC_GetHCLKFreq+0x10>)
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	20000000 	.word	0x20000000

08004220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004224:	f7ff fff2 	bl	800420c <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4903      	ldr	r1, [pc, #12]	@ (8004244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	08009248 	.word	0x08009248

08004248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800424c:	f7ff ffde 	bl	800420c <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	0adb      	lsrs	r3, r3, #11
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	@ (800426c <HAL_RCC_GetPCLK2Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000
 800426c:	08009248 	.word	0x08009248

08004270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004278:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <RCC_Delay+0x34>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0a      	ldr	r2, [pc, #40]	@ (80042a8 <RCC_Delay+0x38>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a5b      	lsrs	r3, r3, #9
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800428c:	bf00      	nop
  }
  while (Delay --);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	60fa      	str	r2, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f9      	bne.n	800428c <RCC_Delay+0x1c>
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	20000000 	.word	0x20000000
 80042a8:	10624dd3 	.word	0x10624dd3

080042ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d07d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042c8:	2300      	movs	r3, #0
 80042ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042cc:	4b4f      	ldr	r3, [pc, #316]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b4c      	ldr	r3, [pc, #304]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4a4b      	ldr	r2, [pc, #300]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	61d3      	str	r3, [r2, #28]
 80042e4:	4b49      	ldr	r3, [pc, #292]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4b46      	ldr	r3, [pc, #280]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d118      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004300:	4b43      	ldr	r3, [pc, #268]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a42      	ldr	r2, [pc, #264]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800430a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430c:	f7fd fd2e 	bl	8001d6c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004314:	f7fd fd2a 	bl	8001d6c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e06d      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b3a      	ldr	r3, [pc, #232]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004332:	4b36      	ldr	r3, [pc, #216]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02e      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	429a      	cmp	r2, r3
 800434e:	d027      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004350:	4b2e      	ldr	r3, [pc, #184]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004358:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800435a:	4b2e      	ldr	r3, [pc, #184]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b2c      	ldr	r3, [pc, #176]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004366:	4a29      	ldr	r2, [pc, #164]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d014      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fd fcf9 	bl	8001d6c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	e00a      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd fcf5 	bl	8001d6c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e036      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ee      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4917      	ldr	r1, [pc, #92]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b14      	ldr	r3, [pc, #80]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d0:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	490b      	ldr	r1, [pc, #44]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ee:	4b07      	ldr	r3, [pc, #28]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4904      	ldr	r1, [pc, #16]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	42420440 	.word	0x42420440

08004418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e041      	b.n	80044ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fb12 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 fe10 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d001      	beq.n	80044d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e032      	b.n	8004536 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <HAL_TIM_Base_Start+0x88>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_TIM_Base_Start+0x48>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ea:	d009      	beq.n	8004500 <HAL_TIM_Base_Start+0x48>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a14      	ldr	r2, [pc, #80]	@ (8004544 <HAL_TIM_Base_Start+0x8c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_TIM_Base_Start+0x48>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <HAL_TIM_Base_Start+0x90>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d111      	bne.n	8004524 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b06      	cmp	r3, #6
 8004510:	d010      	beq.n	8004534 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004522:	e007      	b.n	8004534 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800

0800454c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e041      	b.n	80045e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f839 	bl	80045ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f000 fd76 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <HAL_TIM_PWM_Start+0x24>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e022      	b.n	8004666 <HAL_TIM_PWM_Start+0x6a>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b04      	cmp	r3, #4
 8004624:	d109      	bne.n	800463a <HAL_TIM_PWM_Start+0x3e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e015      	b.n	8004666 <HAL_TIM_PWM_Start+0x6a>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d109      	bne.n	8004654 <HAL_TIM_PWM_Start+0x58>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e008      	b.n	8004666 <HAL_TIM_PWM_Start+0x6a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e05e      	b.n	800472c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0x82>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800467c:	e013      	b.n	80046a6 <HAL_TIM_PWM_Start+0xaa>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start+0x92>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800468c:	e00b      	b.n	80046a6 <HAL_TIM_PWM_Start+0xaa>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0xa2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800469c:	e003      	b.n	80046a6 <HAL_TIM_PWM_Start+0xaa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2201      	movs	r2, #1
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f87d 	bl	80057ae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004734 <HAL_TIM_PWM_Start+0x138>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d107      	bne.n	80046ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_TIM_PWM_Start+0x138>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIM_PWM_Start+0xfa>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e0:	d009      	beq.n	80046f6 <HAL_TIM_PWM_Start+0xfa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a14      	ldr	r2, [pc, #80]	@ (8004738 <HAL_TIM_PWM_Start+0x13c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIM_PWM_Start+0xfa>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a12      	ldr	r2, [pc, #72]	@ (800473c <HAL_TIM_PWM_Start+0x140>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d111      	bne.n	800471a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d010      	beq.n	800472a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	e007      	b.n	800472a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800

08004740 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e041      	b.n	80047d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f839 	bl	80047de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fc7c 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_TIM_IC_Start_IT+0x1e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e013      	b.n	8004836 <HAL_TIM_IC_Start_IT+0x46>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d104      	bne.n	800481e <HAL_TIM_IC_Start_IT+0x2e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e00b      	b.n	8004836 <HAL_TIM_IC_Start_IT+0x46>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d104      	bne.n	800482e <HAL_TIM_IC_Start_IT+0x3e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e003      	b.n	8004836 <HAL_TIM_IC_Start_IT+0x46>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004834:	b2db      	uxtb	r3, r3
 8004836:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <HAL_TIM_IC_Start_IT+0x58>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e013      	b.n	8004870 <HAL_TIM_IC_Start_IT+0x80>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d104      	bne.n	8004858 <HAL_TIM_IC_Start_IT+0x68>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e00b      	b.n	8004870 <HAL_TIM_IC_Start_IT+0x80>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b08      	cmp	r3, #8
 800485c:	d104      	bne.n	8004868 <HAL_TIM_IC_Start_IT+0x78>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e003      	b.n	8004870 <HAL_TIM_IC_Start_IT+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800486e:	b2db      	uxtb	r3, r3
 8004870:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004872:	7bbb      	ldrb	r3, [r7, #14]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d102      	bne.n	800487e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004878:	7b7b      	ldrb	r3, [r7, #13]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d001      	beq.n	8004882 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e0b8      	b.n	80049f4 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <HAL_TIM_IC_Start_IT+0xa2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004890:	e013      	b.n	80048ba <HAL_TIM_IC_Start_IT+0xca>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b04      	cmp	r3, #4
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_IC_Start_IT+0xb2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048a0:	e00b      	b.n	80048ba <HAL_TIM_IC_Start_IT+0xca>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_IC_Start_IT+0xc2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b0:	e003      	b.n	80048ba <HAL_TIM_IC_Start_IT+0xca>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <HAL_TIM_IC_Start_IT+0xda>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048c8:	e013      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x102>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d104      	bne.n	80048da <HAL_TIM_IC_Start_IT+0xea>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048d8:	e00b      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x102>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d104      	bne.n	80048ea <HAL_TIM_IC_Start_IT+0xfa>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048e8:	e003      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x102>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	d841      	bhi.n	800497c <HAL_TIM_IC_Start_IT+0x18c>
 80048f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004900 <HAL_TIM_IC_Start_IT+0x110>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004935 	.word	0x08004935
 8004904:	0800497d 	.word	0x0800497d
 8004908:	0800497d 	.word	0x0800497d
 800490c:	0800497d 	.word	0x0800497d
 8004910:	08004947 	.word	0x08004947
 8004914:	0800497d 	.word	0x0800497d
 8004918:	0800497d 	.word	0x0800497d
 800491c:	0800497d 	.word	0x0800497d
 8004920:	08004959 	.word	0x08004959
 8004924:	0800497d 	.word	0x0800497d
 8004928:	0800497d 	.word	0x0800497d
 800492c:	0800497d 	.word	0x0800497d
 8004930:	0800496b 	.word	0x0800496b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0202 	orr.w	r2, r2, #2
 8004942:	60da      	str	r2, [r3, #12]
      break;
 8004944:	e01d      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0204 	orr.w	r2, r2, #4
 8004954:	60da      	str	r2, [r3, #12]
      break;
 8004956:	e014      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0208 	orr.w	r2, r2, #8
 8004966:	60da      	str	r2, [r3, #12]
      break;
 8004968:	e00b      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0210 	orr.w	r2, r2, #16
 8004978:	60da      	str	r2, [r3, #12]
      break;
 800497a:	e002      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      break;
 8004980:	bf00      	nop
  }

  if (status == HAL_OK)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d134      	bne.n	80049f2 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2201      	movs	r2, #1
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f000 ff0c 	bl	80057ae <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a18      	ldr	r2, [pc, #96]	@ (80049fc <HAL_TIM_IC_Start_IT+0x20c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_TIM_IC_Start_IT+0x1ce>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a8:	d009      	beq.n	80049be <HAL_TIM_IC_Start_IT+0x1ce>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <HAL_TIM_IC_Start_IT+0x210>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_TIM_IC_Start_IT+0x1ce>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a12      	ldr	r2, [pc, #72]	@ (8004a04 <HAL_TIM_IC_Start_IT+0x214>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d111      	bne.n	80049e2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d010      	beq.n	80049f2 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	e007      	b.n	80049f2 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800

08004a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fc fbb8 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 faf2 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 faf8 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0204 	mvn.w	r2, #4
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fb92 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 facc 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fad2 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0208 	mvn.w	r2, #8
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fc fb6c 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 faa6 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 faac 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0210 	mvn.w	r2, #16
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2208      	movs	r2, #8
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc fb46 	bl	80011c8 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa80 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa86 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa5f 	bl	8005032 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fe97 	bl	80058c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa56 	bl	8005068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0220 	mvn.w	r2, #32
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fe6a 	bl	80058b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e088      	b.n	8004d18 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004c24:	f000 fc20 	bl	8005468 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 020c 	bic.w	r2, r2, #12
 8004c36:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	619a      	str	r2, [r3, #24]
 8004c4a:	e060      	b.n	8004d0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d11c      	bne.n	8004c8c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c62:	f000 fc89 	bl	8005578 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c74:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6999      	ldr	r1, [r3, #24]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	619a      	str	r2, [r3, #24]
 8004c8a:	e040      	b.n	8004d0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d11b      	bne.n	8004cca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004ca2:	f000 fcd4 	bl	800564e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 020c 	bic.w	r2, r2, #12
 8004cb4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	61da      	str	r2, [r3, #28]
 8004cc8:	e021      	b.n	8004d0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d11c      	bne.n	8004d0a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ce0:	f000 fcf0 	bl	80056c4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cf2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69d9      	ldr	r1, [r3, #28]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	61da      	str	r2, [r3, #28]
 8004d08:	e001      	b.n	8004d0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e0ae      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	f200 809f 	bhi.w	8004e8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004e8d 	.word	0x08004e8d
 8004d5c:	08004e8d 	.word	0x08004e8d
 8004d60:	08004e8d 	.word	0x08004e8d
 8004d64:	08004dc9 	.word	0x08004dc9
 8004d68:	08004e8d 	.word	0x08004e8d
 8004d6c:	08004e8d 	.word	0x08004e8d
 8004d70:	08004e8d 	.word	0x08004e8d
 8004d74:	08004e0b 	.word	0x08004e0b
 8004d78:	08004e8d 	.word	0x08004e8d
 8004d7c:	08004e8d 	.word	0x08004e8d
 8004d80:	08004e8d 	.word	0x08004e8d
 8004d84:	08004e4b 	.word	0x08004e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f9e2 	bl	8005158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6999      	ldr	r1, [r3, #24]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	619a      	str	r2, [r3, #24]
      break;
 8004dc6:	e064      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fa28 	bl	8005224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6999      	ldr	r1, [r3, #24]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	619a      	str	r2, [r3, #24]
      break;
 8004e08:	e043      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fa71 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0208 	orr.w	r2, r2, #8
 8004e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0204 	bic.w	r2, r2, #4
 8004e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69d9      	ldr	r1, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	61da      	str	r2, [r3, #28]
      break;
 8004e48:	e023      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fabb 	bl	80053cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69d9      	ldr	r1, [r3, #28]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	021a      	lsls	r2, r3, #8
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	61da      	str	r2, [r3, #28]
      break;
 8004e8a:	e002      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0b4      	b.n	800502a <HAL_TIM_ConfigClockSource+0x186>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef8:	d03e      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0xd4>
 8004efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004efe:	f200 8087 	bhi.w	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f06:	f000 8086 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x172>
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0e:	d87f      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b70      	cmp	r3, #112	@ 0x70
 8004f12:	d01a      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0xa6>
 8004f14:	2b70      	cmp	r3, #112	@ 0x70
 8004f16:	d87b      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b60      	cmp	r3, #96	@ 0x60
 8004f1a:	d050      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x11a>
 8004f1c:	2b60      	cmp	r3, #96	@ 0x60
 8004f1e:	d877      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b50      	cmp	r3, #80	@ 0x50
 8004f22:	d03c      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0xfa>
 8004f24:	2b50      	cmp	r3, #80	@ 0x50
 8004f26:	d873      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d058      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x13a>
 8004f2c:	2b40      	cmp	r3, #64	@ 0x40
 8004f2e:	d86f      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f30:	2b30      	cmp	r3, #48	@ 0x30
 8004f32:	d064      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x15a>
 8004f34:	2b30      	cmp	r3, #48	@ 0x30
 8004f36:	d86b      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d060      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x15a>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d867      	bhi.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05c      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x15a>
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d05a      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x15a>
 8004f48:	e062      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f5a:	f000 fc09 	bl	8005770 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	609a      	str	r2, [r3, #8]
      break;
 8004f76:	e04f      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	f000 fbf2 	bl	8005770 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f9a:	609a      	str	r2, [r3, #8]
      break;
 8004f9c:	e03c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004faa:	461a      	mov	r2, r3
 8004fac:	f000 fab6 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2150      	movs	r1, #80	@ 0x50
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fbc0 	bl	800573c <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e02c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 fb10 	bl	80055f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2160      	movs	r1, #96	@ 0x60
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fbb0 	bl	800573c <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e01c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 fa96 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2140      	movs	r1, #64	@ 0x40
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fba0 	bl	800573c <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e00c      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f000 fb97 	bl	800573c <TIM_ITRx_SetConfig>
      break;
 800500e:	e003      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      break;
 8005014:	e000      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr
	...

0800507c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a2f      	ldr	r2, [pc, #188]	@ (800514c <TIM_Base_SetConfig+0xd0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_Base_SetConfig+0x30>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509a:	d007      	beq.n	80050ac <TIM_Base_SetConfig+0x30>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2c      	ldr	r2, [pc, #176]	@ (8005150 <TIM_Base_SetConfig+0xd4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_Base_SetConfig+0x30>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005154 <TIM_Base_SetConfig+0xd8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d108      	bne.n	80050be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a22      	ldr	r2, [pc, #136]	@ (800514c <TIM_Base_SetConfig+0xd0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_Base_SetConfig+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d007      	beq.n	80050de <TIM_Base_SetConfig+0x62>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005150 <TIM_Base_SetConfig+0xd4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_Base_SetConfig+0x62>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005154 <TIM_Base_SetConfig+0xd8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0d      	ldr	r2, [pc, #52]	@ (800514c <TIM_Base_SetConfig+0xd0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	611a      	str	r2, [r3, #16]
  }
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800

08005158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f023 0201 	bic.w	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0302 	bic.w	r3, r3, #2
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <TIM_OC1_SetConfig+0xc8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10c      	bne.n	80051ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0308 	bic.w	r3, r3, #8
 80051ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <TIM_OC1_SetConfig+0xc8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d111      	bne.n	80051fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00

08005224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0210 	bic.w	r2, r3, #16
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0320 	bic.w	r3, r3, #32
 800526e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <TIM_OC2_SetConfig+0xd0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d10d      	bne.n	80052a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800529e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a14      	ldr	r2, [pc, #80]	@ (80052f4 <TIM_OC2_SetConfig+0xd0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d113      	bne.n	80052d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	40012c00 	.word	0x40012c00

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <TIM_OC3_SetConfig+0xd0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10d      	bne.n	8005372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800535c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a14      	ldr	r2, [pc, #80]	@ (80053c8 <TIM_OC3_SetConfig+0xd0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d113      	bne.n	80053a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40012c00 	.word	0x40012c00

080053cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	031b      	lsls	r3, r3, #12
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0f      	ldr	r2, [pc, #60]	@ (8005464 <TIM_OC4_SetConfig+0x98>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d109      	bne.n	8005440 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00

08005468 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f023 0201 	bic.w	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a1f      	ldr	r2, [pc, #124]	@ (8005510 <TIM_TI1_SetConfig+0xa8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00b      	beq.n	80054ae <TIM_TI1_SetConfig+0x46>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549c:	d007      	beq.n	80054ae <TIM_TI1_SetConfig+0x46>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <TIM_TI1_SetConfig+0xac>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_TI1_SetConfig+0x46>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005518 <TIM_TI1_SetConfig+0xb0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <TIM_TI1_SetConfig+0x4a>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <TIM_TI1_SetConfig+0x4c>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e003      	b.n	80054d2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f023 030a 	bic.w	r3, r3, #10
 80054ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f003 030a 	and.w	r3, r3, #10
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800

0800551c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 030a 	bic.w	r3, r3, #10
 8005558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 0210 	bic.w	r2, r3, #16
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	031b      	lsls	r3, r3, #12
 80055bc:	b29b      	uxth	r3, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0210 	bic.w	r2, r3, #16
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800561a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	031b      	lsls	r3, r3, #12
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800562c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr

0800564e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800564e:	b480      	push	{r7}
 8005650:	b087      	sub	sp, #28
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800568a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	b2db      	uxtb	r3, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800569e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005702:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	031b      	lsls	r3, r3, #12
 8005708:	b29b      	uxth	r3, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005716:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	031b      	lsls	r3, r3, #12
 800571c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr

0800573c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	f043 0307 	orr.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	609a      	str	r2, [r3, #8]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800578a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	021a      	lsls	r2, r3, #8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	431a      	orrs	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2201      	movs	r2, #1
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	401a      	ands	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1a      	ldr	r2, [r3, #32]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	fa01 f303 	lsl.w	r3, r1, r3
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e046      	b.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585c:	d009      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a12      	ldr	r2, [pc, #72]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a10      	ldr	r2, [pc, #64]	@ (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d10c      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4313      	orrs	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800

080058b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e042      	b.n	8005970 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fc f964 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2224      	movs	r2, #36	@ 0x24
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800591a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fd63 	bl	80063e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	@ 0x28
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b20      	cmp	r3, #32
 8005996:	d175      	bne.n	8005a84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_UART_Transmit+0x2c>
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e06e      	b.n	8005a86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2221      	movs	r2, #33	@ 0x21
 80059b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059b6:	f7fc f9d9 	bl	8001d6c <HAL_GetTick>
 80059ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d0:	d108      	bne.n	80059e4 <HAL_UART_Transmit+0x6c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d104      	bne.n	80059e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	e003      	b.n	80059ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059ec:	e02e      	b.n	8005a4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2180      	movs	r1, #128	@ 0x80
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fb01 	bl	8006000 <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e03a      	b.n	8005a86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e007      	b.n	8005a3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1cb      	bne.n	80059ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2140      	movs	r1, #64	@ 0x40
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 facd 	bl	8006000 <UART_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e006      	b.n	8005a86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e000      	b.n	8005a86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a84:	2302      	movs	r3, #2
  }
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b0ba      	sub	sp, #232	@ 0xe8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10f      	bne.n	8005af6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_UART_IRQHandler+0x66>
 8005ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fbbc 	bl	800626c <UART_Receive_IT>
      return;
 8005af4:	e25b      	b.n	8005fae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80de 	beq.w	8005cbc <HAL_UART_IRQHandler+0x22c>
 8005b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80d1 	beq.w	8005cbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_UART_IRQHandler+0xae>
 8005b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	f043 0201 	orr.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <HAL_UART_IRQHandler+0xd2>
 8005b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5a:	f043 0202 	orr.w	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <HAL_UART_IRQHandler+0xf6>
 8005b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	f043 0204 	orr.w	r2, r3, #4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d011      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x126>
 8005b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	f043 0208 	orr.w	r2, r3, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 81f2 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_UART_IRQHandler+0x14e>
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fb47 	bl	800626c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bf14      	ite	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	2300      	moveq	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <HAL_UART_IRQHandler+0x17a>
 8005c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d04f      	beq.n	8005caa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa51 	bl	80060b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d041      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1d9      	bne.n	8005c1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d013      	beq.n	8005c9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	4a7e      	ldr	r2, [pc, #504]	@ (8005e70 <HAL_UART_IRQHandler+0x3e0>)
 8005c78:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fc ff38 	bl	8002af4 <HAL_DMA_Abort_IT>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d016      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e00e      	b.n	8005cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f99c 	bl	8005fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e00a      	b.n	8005cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f998 	bl	8005fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	e006      	b.n	8005cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f994 	bl	8005fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005cb6:	e175      	b.n	8005fa4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb8:	bf00      	nop
    return;
 8005cba:	e173      	b.n	8005fa4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	f040 814f 	bne.w	8005f64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8148 	beq.w	8005f64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8141 	beq.w	8005f64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80b6 	beq.w	8005e74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8145 	beq.w	8005fa8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d26:	429a      	cmp	r2, r3
 8005d28:	f080 813e 	bcs.w	8005fa8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	f000 8088 	beq.w	8005e50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1d9      	bne.n	8005d40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3314      	adds	r3, #20
 8005dac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005db0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005db4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005db8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e1      	bne.n	8005d8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3314      	adds	r3, #20
 8005de8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005df2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e3      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e20:	f023 0310 	bic.w	r3, r3, #16
 8005e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e3      	bne.n	8005e0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fc fe16 	bl	8002a7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8bf 	bl	8005fea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e6c:	e09c      	b.n	8005fa8 <HAL_UART_IRQHandler+0x518>
 8005e6e:	bf00      	nop
 8005e70:	08006177 	.word	0x08006177
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 808e 	beq.w	8005fac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8089 	beq.w	8005fac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ebe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ec0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e3      	bne.n	8005e9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ef6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e3      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0310 	bic.w	r3, r3, #16
 8005f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f3c:	61fa      	str	r2, [r7, #28]
 8005f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	69b9      	ldr	r1, [r7, #24]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	617b      	str	r3, [r7, #20]
   return(result);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e3      	bne.n	8005f18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f844 	bl	8005fea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f62:	e023      	b.n	8005fac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <HAL_UART_IRQHandler+0x4f4>
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f90e 	bl	800619e <UART_Transmit_IT>
    return;
 8005f82:	e014      	b.n	8005fae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <HAL_UART_IRQHandler+0x51e>
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f94d 	bl	800623c <UART_EndTransmit_IT>
    return;
 8005fa2:	e004      	b.n	8005fae <HAL_UART_IRQHandler+0x51e>
    return;
 8005fa4:	bf00      	nop
 8005fa6:	e002      	b.n	8005fae <HAL_UART_IRQHandler+0x51e>
      return;
 8005fa8:	bf00      	nop
 8005faa:	e000      	b.n	8005fae <HAL_UART_IRQHandler+0x51e>
      return;
 8005fac:	bf00      	nop
  }
}
 8005fae:	37e8      	adds	r7, #232	@ 0xe8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006010:	e03b      	b.n	800608a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d037      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601a:	f7fb fea7 	bl	8001d6c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <UART_WaitOnFlagUntilTimeout+0x30>
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e03a      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	d023      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b80      	cmp	r3, #128	@ 0x80
 8006046:	d020      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b40      	cmp	r3, #64	@ 0x40
 800604c:	d01d      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b08      	cmp	r3, #8
 800605a:	d116      	bne.n	800608a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f81d 	bl	80060b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2208      	movs	r2, #8
 800607c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e00f      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4013      	ands	r3, r2
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	bf0c      	ite	eq
 800609a:	2301      	moveq	r3, #1
 800609c:	2300      	movne	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d0b4      	beq.n	8006012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b095      	sub	sp, #84	@ 0x54
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060da:	643a      	str	r2, [r7, #64]	@ 0x40
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800610e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006126:	2b01      	cmp	r3, #1
 8006128:	d119      	bne.n	800615e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	60bb      	str	r3, [r7, #8]
   return(result);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f023 0310 	bic.w	r3, r3, #16
 8006140:	647b      	str	r3, [r7, #68]	@ 0x44
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800614a:	61ba      	str	r2, [r7, #24]
 800614c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	613b      	str	r3, [r7, #16]
   return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800616c:	bf00      	nop
 800616e:	3754      	adds	r7, #84	@ 0x54
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr

08006176 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff ff21 	bl	8005fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b21      	cmp	r3, #33	@ 0x21
 80061b0:	d13e      	bne.n	8006230 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ba:	d114      	bne.n	80061e6 <UART_Transmit_IT+0x48>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d110      	bne.n	80061e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	621a      	str	r2, [r3, #32]
 80061e4:	e008      	b.n	80061f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6211      	str	r1, [r2, #32]
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29b      	uxth	r3, r3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4619      	mov	r1, r3
 8006206:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10f      	bne.n	800622c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800621a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800622a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	e000      	b.n	8006232 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006230:	2302      	movs	r3, #2
  }
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006252:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fea9 	bl	8005fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08c      	sub	sp, #48	@ 0x30
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b22      	cmp	r3, #34	@ 0x22
 800627e:	f040 80ae 	bne.w	80063de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628a:	d117      	bne.n	80062bc <UART_Receive_IT+0x50>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d113      	bne.n	80062bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ba:	e026      	b.n	800630a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ce:	d007      	beq.n	80062e0 <UART_Receive_IT+0x74>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <UART_Receive_IT+0x82>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e008      	b.n	8006300 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	4619      	mov	r1, r3
 8006318:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800631a:	2b00      	cmp	r3, #0
 800631c:	d15d      	bne.n	80063da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0220 	bic.w	r2, r2, #32
 800632c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800633c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006360:	2b01      	cmp	r3, #1
 8006362:	d135      	bne.n	80063d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	613b      	str	r3, [r7, #16]
   return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f023 0310 	bic.w	r3, r3, #16
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638a:	623a      	str	r2, [r7, #32]
 800638c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	69f9      	ldr	r1, [r7, #28]
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	61bb      	str	r3, [r7, #24]
   return(result);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d10a      	bne.n	80063c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fe0e 	bl	8005fea <HAL_UARTEx_RxEventCallback>
 80063ce:	e002      	b.n	80063d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fdf8 	bl	8005fc6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	e002      	b.n	80063e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3730      	adds	r7, #48	@ 0x30
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006422:	f023 030c 	bic.w	r3, r3, #12
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	430b      	orrs	r3, r1
 800642e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2c      	ldr	r2, [pc, #176]	@ (80064fc <UART_SetConfig+0x114>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d103      	bne.n	8006458 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006450:	f7fd fefa 	bl	8004248 <HAL_RCC_GetPCLK2Freq>
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	e002      	b.n	800645e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006458:	f7fd fee2 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 800645c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009a      	lsls	r2, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	fbb2 f3f3 	udiv	r3, r2, r3
 8006474:	4a22      	ldr	r2, [pc, #136]	@ (8006500 <UART_SetConfig+0x118>)
 8006476:	fba2 2303 	umull	r2, r3, r2, r3
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	0119      	lsls	r1, r3, #4
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009a      	lsls	r2, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	fbb2 f2f3 	udiv	r2, r2, r3
 8006494:	4b1a      	ldr	r3, [pc, #104]	@ (8006500 <UART_SetConfig+0x118>)
 8006496:	fba3 0302 	umull	r0, r3, r3, r2
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	2064      	movs	r0, #100	@ 0x64
 800649e:	fb00 f303 	mul.w	r3, r0, r3
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	3332      	adds	r3, #50	@ 0x32
 80064a8:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <UART_SetConfig+0x118>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064b4:	4419      	add	r1, r3
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009a      	lsls	r2, r3, #2
 80064c0:	441a      	add	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <UART_SetConfig+0x118>)
 80064ce:	fba3 0302 	umull	r0, r3, r3, r2
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	2064      	movs	r0, #100	@ 0x64
 80064d6:	fb00 f303 	mul.w	r3, r0, r3
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	3332      	adds	r3, #50	@ 0x32
 80064e0:	4a07      	ldr	r2, [pc, #28]	@ (8006500 <UART_SetConfig+0x118>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	f003 020f 	and.w	r2, r3, #15
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	440a      	add	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40013800 	.word	0x40013800
 8006500:	51eb851f 	.word	0x51eb851f

08006504 <__cvt>:
 8006504:	2b00      	cmp	r3, #0
 8006506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800650a:	461d      	mov	r5, r3
 800650c:	bfbb      	ittet	lt
 800650e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006512:	461d      	movlt	r5, r3
 8006514:	2300      	movge	r3, #0
 8006516:	232d      	movlt	r3, #45	@ 0x2d
 8006518:	b088      	sub	sp, #32
 800651a:	4614      	mov	r4, r2
 800651c:	bfb8      	it	lt
 800651e:	4614      	movlt	r4, r2
 8006520:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006522:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006524:	7013      	strb	r3, [r2, #0]
 8006526:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006528:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800652c:	f023 0820 	bic.w	r8, r3, #32
 8006530:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006534:	d005      	beq.n	8006542 <__cvt+0x3e>
 8006536:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800653a:	d100      	bne.n	800653e <__cvt+0x3a>
 800653c:	3601      	adds	r6, #1
 800653e:	2302      	movs	r3, #2
 8006540:	e000      	b.n	8006544 <__cvt+0x40>
 8006542:	2303      	movs	r3, #3
 8006544:	aa07      	add	r2, sp, #28
 8006546:	9204      	str	r2, [sp, #16]
 8006548:	aa06      	add	r2, sp, #24
 800654a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800654e:	e9cd 3600 	strd	r3, r6, [sp]
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	f000 fe6f 	bl	8007238 <_dtoa_r>
 800655a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800655e:	4607      	mov	r7, r0
 8006560:	d119      	bne.n	8006596 <__cvt+0x92>
 8006562:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006564:	07db      	lsls	r3, r3, #31
 8006566:	d50e      	bpl.n	8006586 <__cvt+0x82>
 8006568:	eb00 0906 	add.w	r9, r0, r6
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7fa fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8006578:	b108      	cbz	r0, 800657e <__cvt+0x7a>
 800657a:	f8cd 901c 	str.w	r9, [sp, #28]
 800657e:	2230      	movs	r2, #48	@ 0x30
 8006580:	9b07      	ldr	r3, [sp, #28]
 8006582:	454b      	cmp	r3, r9
 8006584:	d31e      	bcc.n	80065c4 <__cvt+0xc0>
 8006586:	4638      	mov	r0, r7
 8006588:	9b07      	ldr	r3, [sp, #28]
 800658a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800658c:	1bdb      	subs	r3, r3, r7
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	b008      	add	sp, #32
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800659a:	eb00 0906 	add.w	r9, r0, r6
 800659e:	d1e5      	bne.n	800656c <__cvt+0x68>
 80065a0:	7803      	ldrb	r3, [r0, #0]
 80065a2:	2b30      	cmp	r3, #48	@ 0x30
 80065a4:	d10a      	bne.n	80065bc <__cvt+0xb8>
 80065a6:	2200      	movs	r2, #0
 80065a8:	2300      	movs	r3, #0
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7fa f9fb 	bl	80009a8 <__aeabi_dcmpeq>
 80065b2:	b918      	cbnz	r0, 80065bc <__cvt+0xb8>
 80065b4:	f1c6 0601 	rsb	r6, r6, #1
 80065b8:	f8ca 6000 	str.w	r6, [sl]
 80065bc:	f8da 3000 	ldr.w	r3, [sl]
 80065c0:	4499      	add	r9, r3
 80065c2:	e7d3      	b.n	800656c <__cvt+0x68>
 80065c4:	1c59      	adds	r1, r3, #1
 80065c6:	9107      	str	r1, [sp, #28]
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e7d9      	b.n	8006580 <__cvt+0x7c>

080065cc <__exponent>:
 80065cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ce:	2900      	cmp	r1, #0
 80065d0:	bfb6      	itet	lt
 80065d2:	232d      	movlt	r3, #45	@ 0x2d
 80065d4:	232b      	movge	r3, #43	@ 0x2b
 80065d6:	4249      	neglt	r1, r1
 80065d8:	2909      	cmp	r1, #9
 80065da:	7002      	strb	r2, [r0, #0]
 80065dc:	7043      	strb	r3, [r0, #1]
 80065de:	dd29      	ble.n	8006634 <__exponent+0x68>
 80065e0:	f10d 0307 	add.w	r3, sp, #7
 80065e4:	461d      	mov	r5, r3
 80065e6:	270a      	movs	r7, #10
 80065e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80065ec:	461a      	mov	r2, r3
 80065ee:	fb07 1416 	mls	r4, r7, r6, r1
 80065f2:	3430      	adds	r4, #48	@ 0x30
 80065f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065f8:	460c      	mov	r4, r1
 80065fa:	2c63      	cmp	r4, #99	@ 0x63
 80065fc:	4631      	mov	r1, r6
 80065fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8006602:	dcf1      	bgt.n	80065e8 <__exponent+0x1c>
 8006604:	3130      	adds	r1, #48	@ 0x30
 8006606:	1e94      	subs	r4, r2, #2
 8006608:	f803 1c01 	strb.w	r1, [r3, #-1]
 800660c:	4623      	mov	r3, r4
 800660e:	1c41      	adds	r1, r0, #1
 8006610:	42ab      	cmp	r3, r5
 8006612:	d30a      	bcc.n	800662a <__exponent+0x5e>
 8006614:	f10d 0309 	add.w	r3, sp, #9
 8006618:	1a9b      	subs	r3, r3, r2
 800661a:	42ac      	cmp	r4, r5
 800661c:	bf88      	it	hi
 800661e:	2300      	movhi	r3, #0
 8006620:	3302      	adds	r3, #2
 8006622:	4403      	add	r3, r0
 8006624:	1a18      	subs	r0, r3, r0
 8006626:	b003      	add	sp, #12
 8006628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800662a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800662e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006632:	e7ed      	b.n	8006610 <__exponent+0x44>
 8006634:	2330      	movs	r3, #48	@ 0x30
 8006636:	3130      	adds	r1, #48	@ 0x30
 8006638:	7083      	strb	r3, [r0, #2]
 800663a:	70c1      	strb	r1, [r0, #3]
 800663c:	1d03      	adds	r3, r0, #4
 800663e:	e7f1      	b.n	8006624 <__exponent+0x58>

08006640 <_printf_float>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	b091      	sub	sp, #68	@ 0x44
 8006646:	460c      	mov	r4, r1
 8006648:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800664c:	4616      	mov	r6, r2
 800664e:	461f      	mov	r7, r3
 8006650:	4605      	mov	r5, r0
 8006652:	f000 fce1 	bl	8007018 <_localeconv_r>
 8006656:	6803      	ldr	r3, [r0, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	9308      	str	r3, [sp, #32]
 800665c:	f7f9 fd78 	bl	8000150 <strlen>
 8006660:	2300      	movs	r3, #0
 8006662:	930e      	str	r3, [sp, #56]	@ 0x38
 8006664:	f8d8 3000 	ldr.w	r3, [r8]
 8006668:	9009      	str	r0, [sp, #36]	@ 0x24
 800666a:	3307      	adds	r3, #7
 800666c:	f023 0307 	bic.w	r3, r3, #7
 8006670:	f103 0208 	add.w	r2, r3, #8
 8006674:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006678:	f8d4 b000 	ldr.w	fp, [r4]
 800667c:	f8c8 2000 	str.w	r2, [r8]
 8006680:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006684:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800668a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006696:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800669a:	4b9c      	ldr	r3, [pc, #624]	@ (800690c <_printf_float+0x2cc>)
 800669c:	f7fa f9b6 	bl	8000a0c <__aeabi_dcmpun>
 80066a0:	bb70      	cbnz	r0, 8006700 <_printf_float+0xc0>
 80066a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295
 80066aa:	4b98      	ldr	r3, [pc, #608]	@ (800690c <_printf_float+0x2cc>)
 80066ac:	f7fa f990 	bl	80009d0 <__aeabi_dcmple>
 80066b0:	bb30      	cbnz	r0, 8006700 <_printf_float+0xc0>
 80066b2:	2200      	movs	r2, #0
 80066b4:	2300      	movs	r3, #0
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7fa f97f 	bl	80009bc <__aeabi_dcmplt>
 80066be:	b110      	cbz	r0, 80066c6 <_printf_float+0x86>
 80066c0:	232d      	movs	r3, #45	@ 0x2d
 80066c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066c6:	4a92      	ldr	r2, [pc, #584]	@ (8006910 <_printf_float+0x2d0>)
 80066c8:	4b92      	ldr	r3, [pc, #584]	@ (8006914 <_printf_float+0x2d4>)
 80066ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066ce:	bf8c      	ite	hi
 80066d0:	4690      	movhi	r8, r2
 80066d2:	4698      	movls	r8, r3
 80066d4:	2303      	movs	r3, #3
 80066d6:	f04f 0900 	mov.w	r9, #0
 80066da:	6123      	str	r3, [r4, #16]
 80066dc:	f02b 0304 	bic.w	r3, fp, #4
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	4633      	mov	r3, r6
 80066e4:	4621      	mov	r1, r4
 80066e6:	4628      	mov	r0, r5
 80066e8:	9700      	str	r7, [sp, #0]
 80066ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80066ec:	f000 f9d4 	bl	8006a98 <_printf_common>
 80066f0:	3001      	adds	r0, #1
 80066f2:	f040 8090 	bne.w	8006816 <_printf_float+0x1d6>
 80066f6:	f04f 30ff 	mov.w	r0, #4294967295
 80066fa:	b011      	add	sp, #68	@ 0x44
 80066fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006700:	4642      	mov	r2, r8
 8006702:	464b      	mov	r3, r9
 8006704:	4640      	mov	r0, r8
 8006706:	4649      	mov	r1, r9
 8006708:	f7fa f980 	bl	8000a0c <__aeabi_dcmpun>
 800670c:	b148      	cbz	r0, 8006722 <_printf_float+0xe2>
 800670e:	464b      	mov	r3, r9
 8006710:	2b00      	cmp	r3, #0
 8006712:	bfb8      	it	lt
 8006714:	232d      	movlt	r3, #45	@ 0x2d
 8006716:	4a80      	ldr	r2, [pc, #512]	@ (8006918 <_printf_float+0x2d8>)
 8006718:	bfb8      	it	lt
 800671a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800671e:	4b7f      	ldr	r3, [pc, #508]	@ (800691c <_printf_float+0x2dc>)
 8006720:	e7d3      	b.n	80066ca <_printf_float+0x8a>
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	d13f      	bne.n	80067ac <_printf_float+0x16c>
 800672c:	2306      	movs	r3, #6
 800672e:	6063      	str	r3, [r4, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	9206      	str	r2, [sp, #24]
 800673a:	aa0e      	add	r2, sp, #56	@ 0x38
 800673c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006740:	aa0d      	add	r2, sp, #52	@ 0x34
 8006742:	9203      	str	r2, [sp, #12]
 8006744:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006748:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800674c:	6863      	ldr	r3, [r4, #4]
 800674e:	4642      	mov	r2, r8
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4628      	mov	r0, r5
 8006754:	464b      	mov	r3, r9
 8006756:	910a      	str	r1, [sp, #40]	@ 0x28
 8006758:	f7ff fed4 	bl	8006504 <__cvt>
 800675c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800675e:	4680      	mov	r8, r0
 8006760:	2947      	cmp	r1, #71	@ 0x47
 8006762:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006764:	d128      	bne.n	80067b8 <_printf_float+0x178>
 8006766:	1cc8      	adds	r0, r1, #3
 8006768:	db02      	blt.n	8006770 <_printf_float+0x130>
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	4299      	cmp	r1, r3
 800676e:	dd40      	ble.n	80067f2 <_printf_float+0x1b2>
 8006770:	f1aa 0a02 	sub.w	sl, sl, #2
 8006774:	fa5f fa8a 	uxtb.w	sl, sl
 8006778:	4652      	mov	r2, sl
 800677a:	3901      	subs	r1, #1
 800677c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006780:	910d      	str	r1, [sp, #52]	@ 0x34
 8006782:	f7ff ff23 	bl	80065cc <__exponent>
 8006786:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006788:	4681      	mov	r9, r0
 800678a:	1813      	adds	r3, r2, r0
 800678c:	2a01      	cmp	r2, #1
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	dc02      	bgt.n	8006798 <_printf_float+0x158>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	07d2      	lsls	r2, r2, #31
 8006796:	d501      	bpl.n	800679c <_printf_float+0x15c>
 8006798:	3301      	adds	r3, #1
 800679a:	6123      	str	r3, [r4, #16]
 800679c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d09e      	beq.n	80066e2 <_printf_float+0xa2>
 80067a4:	232d      	movs	r3, #45	@ 0x2d
 80067a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067aa:	e79a      	b.n	80066e2 <_printf_float+0xa2>
 80067ac:	2947      	cmp	r1, #71	@ 0x47
 80067ae:	d1bf      	bne.n	8006730 <_printf_float+0xf0>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1bd      	bne.n	8006730 <_printf_float+0xf0>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e7ba      	b.n	800672e <_printf_float+0xee>
 80067b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067bc:	d9dc      	bls.n	8006778 <_printf_float+0x138>
 80067be:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067c2:	d118      	bne.n	80067f6 <_printf_float+0x1b6>
 80067c4:	2900      	cmp	r1, #0
 80067c6:	6863      	ldr	r3, [r4, #4]
 80067c8:	dd0b      	ble.n	80067e2 <_printf_float+0x1a2>
 80067ca:	6121      	str	r1, [r4, #16]
 80067cc:	b913      	cbnz	r3, 80067d4 <_printf_float+0x194>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	07d0      	lsls	r0, r2, #31
 80067d2:	d502      	bpl.n	80067da <_printf_float+0x19a>
 80067d4:	3301      	adds	r3, #1
 80067d6:	440b      	add	r3, r1
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	f04f 0900 	mov.w	r9, #0
 80067de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067e0:	e7dc      	b.n	800679c <_printf_float+0x15c>
 80067e2:	b913      	cbnz	r3, 80067ea <_printf_float+0x1aa>
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	07d2      	lsls	r2, r2, #31
 80067e8:	d501      	bpl.n	80067ee <_printf_float+0x1ae>
 80067ea:	3302      	adds	r3, #2
 80067ec:	e7f4      	b.n	80067d8 <_printf_float+0x198>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e7f2      	b.n	80067d8 <_printf_float+0x198>
 80067f2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067f8:	4299      	cmp	r1, r3
 80067fa:	db05      	blt.n	8006808 <_printf_float+0x1c8>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	6121      	str	r1, [r4, #16]
 8006800:	07d8      	lsls	r0, r3, #31
 8006802:	d5ea      	bpl.n	80067da <_printf_float+0x19a>
 8006804:	1c4b      	adds	r3, r1, #1
 8006806:	e7e7      	b.n	80067d8 <_printf_float+0x198>
 8006808:	2900      	cmp	r1, #0
 800680a:	bfcc      	ite	gt
 800680c:	2201      	movgt	r2, #1
 800680e:	f1c1 0202 	rsble	r2, r1, #2
 8006812:	4413      	add	r3, r2
 8006814:	e7e0      	b.n	80067d8 <_printf_float+0x198>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	055a      	lsls	r2, r3, #21
 800681a:	d407      	bmi.n	800682c <_printf_float+0x1ec>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	4642      	mov	r2, r8
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	d12b      	bne.n	8006882 <_printf_float+0x242>
 800682a:	e764      	b.n	80066f6 <_printf_float+0xb6>
 800682c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006830:	f240 80dc 	bls.w	80069ec <_printf_float+0x3ac>
 8006834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006838:	2200      	movs	r2, #0
 800683a:	2300      	movs	r3, #0
 800683c:	f7fa f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8006840:	2800      	cmp	r0, #0
 8006842:	d033      	beq.n	80068ac <_printf_float+0x26c>
 8006844:	2301      	movs	r3, #1
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	4a35      	ldr	r2, [pc, #212]	@ (8006920 <_printf_float+0x2e0>)
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f af51 	beq.w	80066f6 <_printf_float+0xb6>
 8006854:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006858:	4543      	cmp	r3, r8
 800685a:	db02      	blt.n	8006862 <_printf_float+0x222>
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	07d8      	lsls	r0, r3, #31
 8006860:	d50f      	bpl.n	8006882 <_printf_float+0x242>
 8006862:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f af42 	beq.w	80066f6 <_printf_float+0xb6>
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	f108 38ff 	add.w	r8, r8, #4294967295
 800687a:	f104 0a1a 	add.w	sl, r4, #26
 800687e:	45c8      	cmp	r8, r9
 8006880:	dc09      	bgt.n	8006896 <_printf_float+0x256>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	079b      	lsls	r3, r3, #30
 8006886:	f100 8102 	bmi.w	8006a8e <_printf_float+0x44e>
 800688a:	68e0      	ldr	r0, [r4, #12]
 800688c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800688e:	4298      	cmp	r0, r3
 8006890:	bfb8      	it	lt
 8006892:	4618      	movlt	r0, r3
 8006894:	e731      	b.n	80066fa <_printf_float+0xba>
 8006896:	2301      	movs	r3, #1
 8006898:	4652      	mov	r2, sl
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f af28 	beq.w	80066f6 <_printf_float+0xb6>
 80068a6:	f109 0901 	add.w	r9, r9, #1
 80068aa:	e7e8      	b.n	800687e <_printf_float+0x23e>
 80068ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dc38      	bgt.n	8006924 <_printf_float+0x2e4>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	4a19      	ldr	r2, [pc, #100]	@ (8006920 <_printf_float+0x2e0>)
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f af1a 	beq.w	80066f6 <_printf_float+0xb6>
 80068c2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80068c6:	ea59 0303 	orrs.w	r3, r9, r3
 80068ca:	d102      	bne.n	80068d2 <_printf_float+0x292>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	07d9      	lsls	r1, r3, #31
 80068d0:	d5d7      	bpl.n	8006882 <_printf_float+0x242>
 80068d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f af0a 	beq.w	80066f6 <_printf_float+0xb6>
 80068e2:	f04f 0a00 	mov.w	sl, #0
 80068e6:	f104 0b1a 	add.w	fp, r4, #26
 80068ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068ec:	425b      	negs	r3, r3
 80068ee:	4553      	cmp	r3, sl
 80068f0:	dc01      	bgt.n	80068f6 <_printf_float+0x2b6>
 80068f2:	464b      	mov	r3, r9
 80068f4:	e793      	b.n	800681e <_printf_float+0x1de>
 80068f6:	2301      	movs	r3, #1
 80068f8:	465a      	mov	r2, fp
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	f43f aef8 	beq.w	80066f6 <_printf_float+0xb6>
 8006906:	f10a 0a01 	add.w	sl, sl, #1
 800690a:	e7ee      	b.n	80068ea <_printf_float+0x2aa>
 800690c:	7fefffff 	.word	0x7fefffff
 8006910:	08009266 	.word	0x08009266
 8006914:	08009262 	.word	0x08009262
 8006918:	0800926e 	.word	0x0800926e
 800691c:	0800926a 	.word	0x0800926a
 8006920:	08009272 	.word	0x08009272
 8006924:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006926:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800692a:	4553      	cmp	r3, sl
 800692c:	bfa8      	it	ge
 800692e:	4653      	movge	r3, sl
 8006930:	2b00      	cmp	r3, #0
 8006932:	4699      	mov	r9, r3
 8006934:	dc36      	bgt.n	80069a4 <_printf_float+0x364>
 8006936:	f04f 0b00 	mov.w	fp, #0
 800693a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800693e:	f104 021a 	add.w	r2, r4, #26
 8006942:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006944:	930a      	str	r3, [sp, #40]	@ 0x28
 8006946:	eba3 0309 	sub.w	r3, r3, r9
 800694a:	455b      	cmp	r3, fp
 800694c:	dc31      	bgt.n	80069b2 <_printf_float+0x372>
 800694e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006950:	459a      	cmp	sl, r3
 8006952:	dc3a      	bgt.n	80069ca <_printf_float+0x38a>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	07da      	lsls	r2, r3, #31
 8006958:	d437      	bmi.n	80069ca <_printf_float+0x38a>
 800695a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800695c:	ebaa 0903 	sub.w	r9, sl, r3
 8006960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006962:	ebaa 0303 	sub.w	r3, sl, r3
 8006966:	4599      	cmp	r9, r3
 8006968:	bfa8      	it	ge
 800696a:	4699      	movge	r9, r3
 800696c:	f1b9 0f00 	cmp.w	r9, #0
 8006970:	dc33      	bgt.n	80069da <_printf_float+0x39a>
 8006972:	f04f 0800 	mov.w	r8, #0
 8006976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800697a:	f104 0b1a 	add.w	fp, r4, #26
 800697e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006980:	ebaa 0303 	sub.w	r3, sl, r3
 8006984:	eba3 0309 	sub.w	r3, r3, r9
 8006988:	4543      	cmp	r3, r8
 800698a:	f77f af7a 	ble.w	8006882 <_printf_float+0x242>
 800698e:	2301      	movs	r3, #1
 8006990:	465a      	mov	r2, fp
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	f43f aeac 	beq.w	80066f6 <_printf_float+0xb6>
 800699e:	f108 0801 	add.w	r8, r8, #1
 80069a2:	e7ec      	b.n	800697e <_printf_float+0x33e>
 80069a4:	4642      	mov	r2, r8
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	d1c2      	bne.n	8006936 <_printf_float+0x2f6>
 80069b0:	e6a1      	b.n	80066f6 <_printf_float+0xb6>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f ae9a 	beq.w	80066f6 <_printf_float+0xb6>
 80069c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069c4:	f10b 0b01 	add.w	fp, fp, #1
 80069c8:	e7bb      	b.n	8006942 <_printf_float+0x302>
 80069ca:	4631      	mov	r1, r6
 80069cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	d1c0      	bne.n	800695a <_printf_float+0x31a>
 80069d8:	e68d      	b.n	80066f6 <_printf_float+0xb6>
 80069da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069dc:	464b      	mov	r3, r9
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	4442      	add	r2, r8
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	d1c3      	bne.n	8006972 <_printf_float+0x332>
 80069ea:	e684      	b.n	80066f6 <_printf_float+0xb6>
 80069ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80069f0:	f1ba 0f01 	cmp.w	sl, #1
 80069f4:	dc01      	bgt.n	80069fa <_printf_float+0x3ba>
 80069f6:	07db      	lsls	r3, r3, #31
 80069f8:	d536      	bpl.n	8006a68 <_printf_float+0x428>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4642      	mov	r2, r8
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	f43f ae76 	beq.w	80066f6 <_printf_float+0xb6>
 8006a0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	f43f ae6e 	beq.w	80066f6 <_printf_float+0xb6>
 8006a1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2300      	movs	r3, #0
 8006a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a26:	f7f9 ffbf 	bl	80009a8 <__aeabi_dcmpeq>
 8006a2a:	b9c0      	cbnz	r0, 8006a5e <_printf_float+0x41e>
 8006a2c:	4653      	mov	r3, sl
 8006a2e:	f108 0201 	add.w	r2, r8, #1
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d10c      	bne.n	8006a56 <_printf_float+0x416>
 8006a3c:	e65b      	b.n	80066f6 <_printf_float+0xb6>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	465a      	mov	r2, fp
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f43f ae54 	beq.w	80066f6 <_printf_float+0xb6>
 8006a4e:	f108 0801 	add.w	r8, r8, #1
 8006a52:	45d0      	cmp	r8, sl
 8006a54:	dbf3      	blt.n	8006a3e <_printf_float+0x3fe>
 8006a56:	464b      	mov	r3, r9
 8006a58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a5c:	e6e0      	b.n	8006820 <_printf_float+0x1e0>
 8006a5e:	f04f 0800 	mov.w	r8, #0
 8006a62:	f104 0b1a 	add.w	fp, r4, #26
 8006a66:	e7f4      	b.n	8006a52 <_printf_float+0x412>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	e7e1      	b.n	8006a32 <_printf_float+0x3f2>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	464a      	mov	r2, r9
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f ae3c 	beq.w	80066f6 <_printf_float+0xb6>
 8006a7e:	f108 0801 	add.w	r8, r8, #1
 8006a82:	68e3      	ldr	r3, [r4, #12]
 8006a84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a86:	1a5b      	subs	r3, r3, r1
 8006a88:	4543      	cmp	r3, r8
 8006a8a:	dcf0      	bgt.n	8006a6e <_printf_float+0x42e>
 8006a8c:	e6fd      	b.n	800688a <_printf_float+0x24a>
 8006a8e:	f04f 0800 	mov.w	r8, #0
 8006a92:	f104 0919 	add.w	r9, r4, #25
 8006a96:	e7f4      	b.n	8006a82 <_printf_float+0x442>

08006a98 <_printf_common>:
 8006a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	4698      	mov	r8, r3
 8006aa0:	688a      	ldr	r2, [r1, #8]
 8006aa2:	690b      	ldr	r3, [r1, #16]
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bfb8      	it	lt
 8006aaa:	4613      	movlt	r3, r2
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ab8:	b10a      	cbz	r2, 8006abe <_printf_common+0x26>
 8006aba:	3301      	adds	r3, #1
 8006abc:	6033      	str	r3, [r6, #0]
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	0699      	lsls	r1, r3, #26
 8006ac2:	bf42      	ittt	mi
 8006ac4:	6833      	ldrmi	r3, [r6, #0]
 8006ac6:	3302      	addmi	r3, #2
 8006ac8:	6033      	strmi	r3, [r6, #0]
 8006aca:	6825      	ldr	r5, [r4, #0]
 8006acc:	f015 0506 	ands.w	r5, r5, #6
 8006ad0:	d106      	bne.n	8006ae0 <_printf_common+0x48>
 8006ad2:	f104 0a19 	add.w	sl, r4, #25
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	6832      	ldr	r2, [r6, #0]
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dc2b      	bgt.n	8006b38 <_printf_common+0xa0>
 8006ae0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ae4:	6822      	ldr	r2, [r4, #0]
 8006ae6:	3b00      	subs	r3, #0
 8006ae8:	bf18      	it	ne
 8006aea:	2301      	movne	r3, #1
 8006aec:	0692      	lsls	r2, r2, #26
 8006aee:	d430      	bmi.n	8006b52 <_printf_common+0xba>
 8006af0:	4641      	mov	r1, r8
 8006af2:	4638      	mov	r0, r7
 8006af4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006af8:	47c8      	blx	r9
 8006afa:	3001      	adds	r0, #1
 8006afc:	d023      	beq.n	8006b46 <_printf_common+0xae>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	6922      	ldr	r2, [r4, #16]
 8006b02:	f003 0306 	and.w	r3, r3, #6
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	bf14      	ite	ne
 8006b0a:	2500      	movne	r5, #0
 8006b0c:	6833      	ldreq	r3, [r6, #0]
 8006b0e:	f04f 0600 	mov.w	r6, #0
 8006b12:	bf08      	it	eq
 8006b14:	68e5      	ldreq	r5, [r4, #12]
 8006b16:	f104 041a 	add.w	r4, r4, #26
 8006b1a:	bf08      	it	eq
 8006b1c:	1aed      	subeq	r5, r5, r3
 8006b1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b22:	bf08      	it	eq
 8006b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	bfc4      	itt	gt
 8006b2c:	1a9b      	subgt	r3, r3, r2
 8006b2e:	18ed      	addgt	r5, r5, r3
 8006b30:	42b5      	cmp	r5, r6
 8006b32:	d11a      	bne.n	8006b6a <_printf_common+0xd2>
 8006b34:	2000      	movs	r0, #0
 8006b36:	e008      	b.n	8006b4a <_printf_common+0xb2>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	4641      	mov	r1, r8
 8006b3e:	4638      	mov	r0, r7
 8006b40:	47c8      	blx	r9
 8006b42:	3001      	adds	r0, #1
 8006b44:	d103      	bne.n	8006b4e <_printf_common+0xb6>
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	3501      	adds	r5, #1
 8006b50:	e7c1      	b.n	8006ad6 <_printf_common+0x3e>
 8006b52:	2030      	movs	r0, #48	@ 0x30
 8006b54:	18e1      	adds	r1, r4, r3
 8006b56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b60:	4422      	add	r2, r4
 8006b62:	3302      	adds	r3, #2
 8006b64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b68:	e7c2      	b.n	8006af0 <_printf_common+0x58>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4641      	mov	r1, r8
 8006b70:	4638      	mov	r0, r7
 8006b72:	47c8      	blx	r9
 8006b74:	3001      	adds	r0, #1
 8006b76:	d0e6      	beq.n	8006b46 <_printf_common+0xae>
 8006b78:	3601      	adds	r6, #1
 8006b7a:	e7d9      	b.n	8006b30 <_printf_common+0x98>

08006b7c <_printf_i>:
 8006b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b80:	7e0f      	ldrb	r7, [r1, #24]
 8006b82:	4691      	mov	r9, r2
 8006b84:	2f78      	cmp	r7, #120	@ 0x78
 8006b86:	4680      	mov	r8, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	469a      	mov	sl, r3
 8006b8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b92:	d807      	bhi.n	8006ba4 <_printf_i+0x28>
 8006b94:	2f62      	cmp	r7, #98	@ 0x62
 8006b96:	d80a      	bhi.n	8006bae <_printf_i+0x32>
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	f000 80d1 	beq.w	8006d40 <_printf_i+0x1c4>
 8006b9e:	2f58      	cmp	r7, #88	@ 0x58
 8006ba0:	f000 80b8 	beq.w	8006d14 <_printf_i+0x198>
 8006ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ba8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bac:	e03a      	b.n	8006c24 <_printf_i+0xa8>
 8006bae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bb2:	2b15      	cmp	r3, #21
 8006bb4:	d8f6      	bhi.n	8006ba4 <_printf_i+0x28>
 8006bb6:	a101      	add	r1, pc, #4	@ (adr r1, 8006bbc <_printf_i+0x40>)
 8006bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c29 	.word	0x08006c29
 8006bc4:	08006ba5 	.word	0x08006ba5
 8006bc8:	08006ba5 	.word	0x08006ba5
 8006bcc:	08006ba5 	.word	0x08006ba5
 8006bd0:	08006ba5 	.word	0x08006ba5
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006ba5 	.word	0x08006ba5
 8006bdc:	08006ba5 	.word	0x08006ba5
 8006be0:	08006ba5 	.word	0x08006ba5
 8006be4:	08006ba5 	.word	0x08006ba5
 8006be8:	08006d27 	.word	0x08006d27
 8006bec:	08006c53 	.word	0x08006c53
 8006bf0:	08006ce1 	.word	0x08006ce1
 8006bf4:	08006ba5 	.word	0x08006ba5
 8006bf8:	08006ba5 	.word	0x08006ba5
 8006bfc:	08006d49 	.word	0x08006d49
 8006c00:	08006ba5 	.word	0x08006ba5
 8006c04:	08006c53 	.word	0x08006c53
 8006c08:	08006ba5 	.word	0x08006ba5
 8006c0c:	08006ba5 	.word	0x08006ba5
 8006c10:	08006ce9 	.word	0x08006ce9
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6032      	str	r2, [r6, #0]
 8006c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c24:	2301      	movs	r3, #1
 8006c26:	e09c      	b.n	8006d62 <_printf_i+0x1e6>
 8006c28:	6833      	ldr	r3, [r6, #0]
 8006c2a:	6820      	ldr	r0, [r4, #0]
 8006c2c:	1d19      	adds	r1, r3, #4
 8006c2e:	6031      	str	r1, [r6, #0]
 8006c30:	0606      	lsls	r6, r0, #24
 8006c32:	d501      	bpl.n	8006c38 <_printf_i+0xbc>
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	e003      	b.n	8006c40 <_printf_i+0xc4>
 8006c38:	0645      	lsls	r5, r0, #25
 8006c3a:	d5fb      	bpl.n	8006c34 <_printf_i+0xb8>
 8006c3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	da03      	bge.n	8006c4c <_printf_i+0xd0>
 8006c44:	232d      	movs	r3, #45	@ 0x2d
 8006c46:	426d      	negs	r5, r5
 8006c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c4c:	230a      	movs	r3, #10
 8006c4e:	4858      	ldr	r0, [pc, #352]	@ (8006db0 <_printf_i+0x234>)
 8006c50:	e011      	b.n	8006c76 <_printf_i+0xfa>
 8006c52:	6821      	ldr	r1, [r4, #0]
 8006c54:	6833      	ldr	r3, [r6, #0]
 8006c56:	0608      	lsls	r0, r1, #24
 8006c58:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c5c:	d402      	bmi.n	8006c64 <_printf_i+0xe8>
 8006c5e:	0649      	lsls	r1, r1, #25
 8006c60:	bf48      	it	mi
 8006c62:	b2ad      	uxthmi	r5, r5
 8006c64:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c66:	6033      	str	r3, [r6, #0]
 8006c68:	bf14      	ite	ne
 8006c6a:	230a      	movne	r3, #10
 8006c6c:	2308      	moveq	r3, #8
 8006c6e:	4850      	ldr	r0, [pc, #320]	@ (8006db0 <_printf_i+0x234>)
 8006c70:	2100      	movs	r1, #0
 8006c72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c76:	6866      	ldr	r6, [r4, #4]
 8006c78:	2e00      	cmp	r6, #0
 8006c7a:	60a6      	str	r6, [r4, #8]
 8006c7c:	db05      	blt.n	8006c8a <_printf_i+0x10e>
 8006c7e:	6821      	ldr	r1, [r4, #0]
 8006c80:	432e      	orrs	r6, r5
 8006c82:	f021 0104 	bic.w	r1, r1, #4
 8006c86:	6021      	str	r1, [r4, #0]
 8006c88:	d04b      	beq.n	8006d22 <_printf_i+0x1a6>
 8006c8a:	4616      	mov	r6, r2
 8006c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c90:	fb03 5711 	mls	r7, r3, r1, r5
 8006c94:	5dc7      	ldrb	r7, [r0, r7]
 8006c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c9a:	462f      	mov	r7, r5
 8006c9c:	42bb      	cmp	r3, r7
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	d9f4      	bls.n	8006c8c <_printf_i+0x110>
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d10b      	bne.n	8006cbe <_printf_i+0x142>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	07df      	lsls	r7, r3, #31
 8006caa:	d508      	bpl.n	8006cbe <_printf_i+0x142>
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	6861      	ldr	r1, [r4, #4]
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	bfde      	ittt	le
 8006cb4:	2330      	movle	r3, #48	@ 0x30
 8006cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cbe:	1b92      	subs	r2, r2, r6
 8006cc0:	6122      	str	r2, [r4, #16]
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	f8cd a000 	str.w	sl, [sp]
 8006ccc:	aa03      	add	r2, sp, #12
 8006cce:	f7ff fee3 	bl	8006a98 <_printf_common>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d14a      	bne.n	8006d6c <_printf_i+0x1f0>
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cda:	b004      	add	sp, #16
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	f043 0320 	orr.w	r3, r3, #32
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	2778      	movs	r7, #120	@ 0x78
 8006cea:	4832      	ldr	r0, [pc, #200]	@ (8006db4 <_printf_i+0x238>)
 8006cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	6831      	ldr	r1, [r6, #0]
 8006cf4:	061f      	lsls	r7, r3, #24
 8006cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cfa:	d402      	bmi.n	8006d02 <_printf_i+0x186>
 8006cfc:	065f      	lsls	r7, r3, #25
 8006cfe:	bf48      	it	mi
 8006d00:	b2ad      	uxthmi	r5, r5
 8006d02:	6031      	str	r1, [r6, #0]
 8006d04:	07d9      	lsls	r1, r3, #31
 8006d06:	bf44      	itt	mi
 8006d08:	f043 0320 	orrmi.w	r3, r3, #32
 8006d0c:	6023      	strmi	r3, [r4, #0]
 8006d0e:	b11d      	cbz	r5, 8006d18 <_printf_i+0x19c>
 8006d10:	2310      	movs	r3, #16
 8006d12:	e7ad      	b.n	8006c70 <_printf_i+0xf4>
 8006d14:	4826      	ldr	r0, [pc, #152]	@ (8006db0 <_printf_i+0x234>)
 8006d16:	e7e9      	b.n	8006cec <_printf_i+0x170>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	f023 0320 	bic.w	r3, r3, #32
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	e7f6      	b.n	8006d10 <_printf_i+0x194>
 8006d22:	4616      	mov	r6, r2
 8006d24:	e7bd      	b.n	8006ca2 <_printf_i+0x126>
 8006d26:	6833      	ldr	r3, [r6, #0]
 8006d28:	6825      	ldr	r5, [r4, #0]
 8006d2a:	1d18      	adds	r0, r3, #4
 8006d2c:	6961      	ldr	r1, [r4, #20]
 8006d2e:	6030      	str	r0, [r6, #0]
 8006d30:	062e      	lsls	r6, r5, #24
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	d501      	bpl.n	8006d3a <_printf_i+0x1be>
 8006d36:	6019      	str	r1, [r3, #0]
 8006d38:	e002      	b.n	8006d40 <_printf_i+0x1c4>
 8006d3a:	0668      	lsls	r0, r5, #25
 8006d3c:	d5fb      	bpl.n	8006d36 <_printf_i+0x1ba>
 8006d3e:	8019      	strh	r1, [r3, #0]
 8006d40:	2300      	movs	r3, #0
 8006d42:	4616      	mov	r6, r2
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	e7bc      	b.n	8006cc2 <_printf_i+0x146>
 8006d48:	6833      	ldr	r3, [r6, #0]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	1d1a      	adds	r2, r3, #4
 8006d4e:	6032      	str	r2, [r6, #0]
 8006d50:	681e      	ldr	r6, [r3, #0]
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	4630      	mov	r0, r6
 8006d56:	f000 f9d6 	bl	8007106 <memchr>
 8006d5a:	b108      	cbz	r0, 8006d60 <_printf_i+0x1e4>
 8006d5c:	1b80      	subs	r0, r0, r6
 8006d5e:	6060      	str	r0, [r4, #4]
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	2300      	movs	r3, #0
 8006d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d6a:	e7aa      	b.n	8006cc2 <_printf_i+0x146>
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	4649      	mov	r1, r9
 8006d70:	4640      	mov	r0, r8
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	47d0      	blx	sl
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0ad      	beq.n	8006cd6 <_printf_i+0x15a>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	079b      	lsls	r3, r3, #30
 8006d7e:	d413      	bmi.n	8006da8 <_printf_i+0x22c>
 8006d80:	68e0      	ldr	r0, [r4, #12]
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	4298      	cmp	r0, r3
 8006d86:	bfb8      	it	lt
 8006d88:	4618      	movlt	r0, r3
 8006d8a:	e7a6      	b.n	8006cda <_printf_i+0x15e>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4632      	mov	r2, r6
 8006d90:	4649      	mov	r1, r9
 8006d92:	4640      	mov	r0, r8
 8006d94:	47d0      	blx	sl
 8006d96:	3001      	adds	r0, #1
 8006d98:	d09d      	beq.n	8006cd6 <_printf_i+0x15a>
 8006d9a:	3501      	adds	r5, #1
 8006d9c:	68e3      	ldr	r3, [r4, #12]
 8006d9e:	9903      	ldr	r1, [sp, #12]
 8006da0:	1a5b      	subs	r3, r3, r1
 8006da2:	42ab      	cmp	r3, r5
 8006da4:	dcf2      	bgt.n	8006d8c <_printf_i+0x210>
 8006da6:	e7eb      	b.n	8006d80 <_printf_i+0x204>
 8006da8:	2500      	movs	r5, #0
 8006daa:	f104 0619 	add.w	r6, r4, #25
 8006dae:	e7f5      	b.n	8006d9c <_printf_i+0x220>
 8006db0:	08009274 	.word	0x08009274
 8006db4:	08009285 	.word	0x08009285

08006db8 <std>:
 8006db8:	2300      	movs	r3, #0
 8006dba:	b510      	push	{r4, lr}
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dc6:	6083      	str	r3, [r0, #8]
 8006dc8:	8181      	strh	r1, [r0, #12]
 8006dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dcc:	81c2      	strh	r2, [r0, #14]
 8006dce:	6183      	str	r3, [r0, #24]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	305c      	adds	r0, #92	@ 0x5c
 8006dd6:	f000 f916 	bl	8007006 <memset>
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <std+0x58>)
 8006ddc:	6224      	str	r4, [r4, #32]
 8006dde:	6263      	str	r3, [r4, #36]	@ 0x24
 8006de0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <std+0x5c>)
 8006de2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006de4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e18 <std+0x60>)
 8006de6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006de8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e1c <std+0x64>)
 8006dea:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dec:	4b0c      	ldr	r3, [pc, #48]	@ (8006e20 <std+0x68>)
 8006dee:	429c      	cmp	r4, r3
 8006df0:	d006      	beq.n	8006e00 <std+0x48>
 8006df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006df6:	4294      	cmp	r4, r2
 8006df8:	d002      	beq.n	8006e00 <std+0x48>
 8006dfa:	33d0      	adds	r3, #208	@ 0xd0
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	d105      	bne.n	8006e0c <std+0x54>
 8006e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e08:	f000 b97a 	b.w	8007100 <__retarget_lock_init_recursive>
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	bf00      	nop
 8006e10:	08006f81 	.word	0x08006f81
 8006e14:	08006fa3 	.word	0x08006fa3
 8006e18:	08006fdb 	.word	0x08006fdb
 8006e1c:	08006fff 	.word	0x08006fff
 8006e20:	200003c4 	.word	0x200003c4

08006e24 <stdio_exit_handler>:
 8006e24:	4a02      	ldr	r2, [pc, #8]	@ (8006e30 <stdio_exit_handler+0xc>)
 8006e26:	4903      	ldr	r1, [pc, #12]	@ (8006e34 <stdio_exit_handler+0x10>)
 8006e28:	4803      	ldr	r0, [pc, #12]	@ (8006e38 <stdio_exit_handler+0x14>)
 8006e2a:	f000 b869 	b.w	8006f00 <_fwalk_sglue>
 8006e2e:	bf00      	nop
 8006e30:	2000000c 	.word	0x2000000c
 8006e34:	08008a81 	.word	0x08008a81
 8006e38:	2000001c 	.word	0x2000001c

08006e3c <cleanup_stdio>:
 8006e3c:	6841      	ldr	r1, [r0, #4]
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <cleanup_stdio+0x34>)
 8006e40:	b510      	push	{r4, lr}
 8006e42:	4299      	cmp	r1, r3
 8006e44:	4604      	mov	r4, r0
 8006e46:	d001      	beq.n	8006e4c <cleanup_stdio+0x10>
 8006e48:	f001 fe1a 	bl	8008a80 <_fflush_r>
 8006e4c:	68a1      	ldr	r1, [r4, #8]
 8006e4e:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <cleanup_stdio+0x38>)
 8006e50:	4299      	cmp	r1, r3
 8006e52:	d002      	beq.n	8006e5a <cleanup_stdio+0x1e>
 8006e54:	4620      	mov	r0, r4
 8006e56:	f001 fe13 	bl	8008a80 <_fflush_r>
 8006e5a:	68e1      	ldr	r1, [r4, #12]
 8006e5c:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <cleanup_stdio+0x3c>)
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	d004      	beq.n	8006e6c <cleanup_stdio+0x30>
 8006e62:	4620      	mov	r0, r4
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	f001 be0a 	b.w	8008a80 <_fflush_r>
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	200003c4 	.word	0x200003c4
 8006e74:	2000042c 	.word	0x2000042c
 8006e78:	20000494 	.word	0x20000494

08006e7c <global_stdio_init.part.0>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006eac <global_stdio_init.part.0+0x30>)
 8006e80:	4c0b      	ldr	r4, [pc, #44]	@ (8006eb0 <global_stdio_init.part.0+0x34>)
 8006e82:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb4 <global_stdio_init.part.0+0x38>)
 8006e84:	4620      	mov	r0, r4
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	2104      	movs	r1, #4
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f7ff ff94 	bl	8006db8 <std>
 8006e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e94:	2201      	movs	r2, #1
 8006e96:	2109      	movs	r1, #9
 8006e98:	f7ff ff8e 	bl	8006db8 <std>
 8006e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea6:	2112      	movs	r1, #18
 8006ea8:	f7ff bf86 	b.w	8006db8 <std>
 8006eac:	200004fc 	.word	0x200004fc
 8006eb0:	200003c4 	.word	0x200003c4
 8006eb4:	08006e25 	.word	0x08006e25

08006eb8 <__sfp_lock_acquire>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	@ (8006ec0 <__sfp_lock_acquire+0x8>)
 8006eba:	f000 b922 	b.w	8007102 <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20000505 	.word	0x20000505

08006ec4 <__sfp_lock_release>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	@ (8006ecc <__sfp_lock_release+0x8>)
 8006ec6:	f000 b91d 	b.w	8007104 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	20000505 	.word	0x20000505

08006ed0 <__sinit>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	f7ff fff0 	bl	8006eb8 <__sfp_lock_acquire>
 8006ed8:	6a23      	ldr	r3, [r4, #32]
 8006eda:	b11b      	cbz	r3, 8006ee4 <__sinit+0x14>
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee0:	f7ff bff0 	b.w	8006ec4 <__sfp_lock_release>
 8006ee4:	4b04      	ldr	r3, [pc, #16]	@ (8006ef8 <__sinit+0x28>)
 8006ee6:	6223      	str	r3, [r4, #32]
 8006ee8:	4b04      	ldr	r3, [pc, #16]	@ (8006efc <__sinit+0x2c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1f5      	bne.n	8006edc <__sinit+0xc>
 8006ef0:	f7ff ffc4 	bl	8006e7c <global_stdio_init.part.0>
 8006ef4:	e7f2      	b.n	8006edc <__sinit+0xc>
 8006ef6:	bf00      	nop
 8006ef8:	08006e3d 	.word	0x08006e3d
 8006efc:	200004fc 	.word	0x200004fc

08006f00 <_fwalk_sglue>:
 8006f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f04:	4607      	mov	r7, r0
 8006f06:	4688      	mov	r8, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f10:	f1b9 0901 	subs.w	r9, r9, #1
 8006f14:	d505      	bpl.n	8006f22 <_fwalk_sglue+0x22>
 8006f16:	6824      	ldr	r4, [r4, #0]
 8006f18:	2c00      	cmp	r4, #0
 8006f1a:	d1f7      	bne.n	8006f0c <_fwalk_sglue+0xc>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d907      	bls.n	8006f38 <_fwalk_sglue+0x38>
 8006f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	d003      	beq.n	8006f38 <_fwalk_sglue+0x38>
 8006f30:	4629      	mov	r1, r5
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c0      	blx	r8
 8006f36:	4306      	orrs	r6, r0
 8006f38:	3568      	adds	r5, #104	@ 0x68
 8006f3a:	e7e9      	b.n	8006f10 <_fwalk_sglue+0x10>

08006f3c <siprintf>:
 8006f3c:	b40e      	push	{r1, r2, r3}
 8006f3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f42:	b510      	push	{r4, lr}
 8006f44:	2400      	movs	r4, #0
 8006f46:	b09d      	sub	sp, #116	@ 0x74
 8006f48:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f4a:	9002      	str	r0, [sp, #8]
 8006f4c:	9006      	str	r0, [sp, #24]
 8006f4e:	9107      	str	r1, [sp, #28]
 8006f50:	9104      	str	r1, [sp, #16]
 8006f52:	4809      	ldr	r0, [pc, #36]	@ (8006f78 <siprintf+0x3c>)
 8006f54:	4909      	ldr	r1, [pc, #36]	@ (8006f7c <siprintf+0x40>)
 8006f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f5a:	9105      	str	r1, [sp, #20]
 8006f5c:	6800      	ldr	r0, [r0, #0]
 8006f5e:	a902      	add	r1, sp, #8
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f64:	f001 fc10 	bl	8008788 <_svfiprintf_r>
 8006f68:	9b02      	ldr	r3, [sp, #8]
 8006f6a:	701c      	strb	r4, [r3, #0]
 8006f6c:	b01d      	add	sp, #116	@ 0x74
 8006f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f72:	b003      	add	sp, #12
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000018 	.word	0x20000018
 8006f7c:	ffff0208 	.word	0xffff0208

08006f80 <__sread>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f88:	f000 f86c 	bl	8007064 <_read_r>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	bfab      	itete	ge
 8006f90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f92:	89a3      	ldrhlt	r3, [r4, #12]
 8006f94:	181b      	addge	r3, r3, r0
 8006f96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f9a:	bfac      	ite	ge
 8006f9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f9e:	81a3      	strhlt	r3, [r4, #12]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__swrite>:
 8006fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	898b      	ldrh	r3, [r1, #12]
 8006faa:	4605      	mov	r5, r0
 8006fac:	05db      	lsls	r3, r3, #23
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	d505      	bpl.n	8006fc0 <__swrite+0x1e>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	f000 f840 	bl	8007040 <_lseek_r>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	4632      	mov	r2, r6
 8006fc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	4628      	mov	r0, r5
 8006fcc:	463b      	mov	r3, r7
 8006fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	f000 b857 	b.w	8007088 <_write_r>

08006fda <__sseek>:
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 f82d 	bl	8007040 <_lseek_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	bf15      	itete	ne
 8006fec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ff2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ff6:	81a3      	strheq	r3, [r4, #12]
 8006ff8:	bf18      	it	ne
 8006ffa:	81a3      	strhne	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__sclose>:
 8006ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007002:	f000 b80d 	b.w	8007020 <_close_r>

08007006 <memset>:
 8007006:	4603      	mov	r3, r0
 8007008:	4402      	add	r2, r0
 800700a:	4293      	cmp	r3, r2
 800700c:	d100      	bne.n	8007010 <memset+0xa>
 800700e:	4770      	bx	lr
 8007010:	f803 1b01 	strb.w	r1, [r3], #1
 8007014:	e7f9      	b.n	800700a <memset+0x4>
	...

08007018 <_localeconv_r>:
 8007018:	4800      	ldr	r0, [pc, #0]	@ (800701c <_localeconv_r+0x4>)
 800701a:	4770      	bx	lr
 800701c:	20000158 	.word	0x20000158

08007020 <_close_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	2300      	movs	r3, #0
 8007024:	4d05      	ldr	r5, [pc, #20]	@ (800703c <_close_r+0x1c>)
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fa fbc9 	bl	80017c2 <_close>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_close_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_close_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000500 	.word	0x20000500

08007040 <_lseek_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	4611      	mov	r1, r2
 8007048:	2200      	movs	r2, #0
 800704a:	4d05      	ldr	r5, [pc, #20]	@ (8007060 <_lseek_r+0x20>)
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fa fbdb 	bl	800180a <_lseek>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_lseek_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_lseek_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000500 	.word	0x20000500

08007064 <_read_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	2200      	movs	r2, #0
 800706e:	4d05      	ldr	r5, [pc, #20]	@ (8007084 <_read_r+0x20>)
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fa fb6c 	bl	8001750 <_read>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_read_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_read_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000500 	.word	0x20000500

08007088 <_write_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	2200      	movs	r2, #0
 8007092:	4d05      	ldr	r5, [pc, #20]	@ (80070a8 <_write_r+0x20>)
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7fa fb77 	bl	800178a <_write>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_write_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_write_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20000500 	.word	0x20000500

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	@ (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000018 	.word	0x20000018

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	2600      	movs	r6, #0
 80070bc:	4d0c      	ldr	r5, [pc, #48]	@ (80070f0 <__libc_init_array+0x38>)
 80070be:	4c0d      	ldr	r4, [pc, #52]	@ (80070f4 <__libc_init_array+0x3c>)
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	f002 f876 	bl	80091b8 <_init>
 80070cc:	2600      	movs	r6, #0
 80070ce:	4d0a      	ldr	r5, [pc, #40]	@ (80070f8 <__libc_init_array+0x40>)
 80070d0:	4c0a      	ldr	r4, [pc, #40]	@ (80070fc <__libc_init_array+0x44>)
 80070d2:	1b64      	subs	r4, r4, r5
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	080095dc 	.word	0x080095dc
 80070f4:	080095dc 	.word	0x080095dc
 80070f8:	080095dc 	.word	0x080095dc
 80070fc:	080095e0 	.word	0x080095e0

08007100 <__retarget_lock_init_recursive>:
 8007100:	4770      	bx	lr

08007102 <__retarget_lock_acquire_recursive>:
 8007102:	4770      	bx	lr

08007104 <__retarget_lock_release_recursive>:
 8007104:	4770      	bx	lr

08007106 <memchr>:
 8007106:	4603      	mov	r3, r0
 8007108:	b510      	push	{r4, lr}
 800710a:	b2c9      	uxtb	r1, r1
 800710c:	4402      	add	r2, r0
 800710e:	4293      	cmp	r3, r2
 8007110:	4618      	mov	r0, r3
 8007112:	d101      	bne.n	8007118 <memchr+0x12>
 8007114:	2000      	movs	r0, #0
 8007116:	e003      	b.n	8007120 <memchr+0x1a>
 8007118:	7804      	ldrb	r4, [r0, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	428c      	cmp	r4, r1
 800711e:	d1f6      	bne.n	800710e <memchr+0x8>
 8007120:	bd10      	pop	{r4, pc}

08007122 <quorem>:
 8007122:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007126:	6903      	ldr	r3, [r0, #16]
 8007128:	690c      	ldr	r4, [r1, #16]
 800712a:	4607      	mov	r7, r0
 800712c:	42a3      	cmp	r3, r4
 800712e:	db7e      	blt.n	800722e <quorem+0x10c>
 8007130:	3c01      	subs	r4, #1
 8007132:	00a3      	lsls	r3, r4, #2
 8007134:	f100 0514 	add.w	r5, r0, #20
 8007138:	f101 0814 	add.w	r8, r1, #20
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800714c:	3301      	adds	r3, #1
 800714e:	429a      	cmp	r2, r3
 8007150:	fbb2 f6f3 	udiv	r6, r2, r3
 8007154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007158:	d32e      	bcc.n	80071b8 <quorem+0x96>
 800715a:	f04f 0a00 	mov.w	sl, #0
 800715e:	46c4      	mov	ip, r8
 8007160:	46ae      	mov	lr, r5
 8007162:	46d3      	mov	fp, sl
 8007164:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007168:	b298      	uxth	r0, r3
 800716a:	fb06 a000 	mla	r0, r6, r0, sl
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	0c02      	lsrs	r2, r0, #16
 8007172:	fb06 2303 	mla	r3, r6, r3, r2
 8007176:	f8de 2000 	ldr.w	r2, [lr]
 800717a:	b280      	uxth	r0, r0
 800717c:	b292      	uxth	r2, r2
 800717e:	1a12      	subs	r2, r2, r0
 8007180:	445a      	add	r2, fp
 8007182:	f8de 0000 	ldr.w	r0, [lr]
 8007186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800718a:	b29b      	uxth	r3, r3
 800718c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007190:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007194:	b292      	uxth	r2, r2
 8007196:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800719a:	45e1      	cmp	r9, ip
 800719c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071a0:	f84e 2b04 	str.w	r2, [lr], #4
 80071a4:	d2de      	bcs.n	8007164 <quorem+0x42>
 80071a6:	9b00      	ldr	r3, [sp, #0]
 80071a8:	58eb      	ldr	r3, [r5, r3]
 80071aa:	b92b      	cbnz	r3, 80071b8 <quorem+0x96>
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	3b04      	subs	r3, #4
 80071b0:	429d      	cmp	r5, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	d32f      	bcc.n	8007216 <quorem+0xf4>
 80071b6:	613c      	str	r4, [r7, #16]
 80071b8:	4638      	mov	r0, r7
 80071ba:	f001 f981 	bl	80084c0 <__mcmp>
 80071be:	2800      	cmp	r0, #0
 80071c0:	db25      	blt.n	800720e <quorem+0xec>
 80071c2:	4629      	mov	r1, r5
 80071c4:	2000      	movs	r0, #0
 80071c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80071ca:	f8d1 c000 	ldr.w	ip, [r1]
 80071ce:	fa1f fe82 	uxth.w	lr, r2
 80071d2:	fa1f f38c 	uxth.w	r3, ip
 80071d6:	eba3 030e 	sub.w	r3, r3, lr
 80071da:	4403      	add	r3, r0
 80071dc:	0c12      	lsrs	r2, r2, #16
 80071de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ec:	45c1      	cmp	r9, r8
 80071ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071f2:	f841 3b04 	str.w	r3, [r1], #4
 80071f6:	d2e6      	bcs.n	80071c6 <quorem+0xa4>
 80071f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007200:	b922      	cbnz	r2, 800720c <quorem+0xea>
 8007202:	3b04      	subs	r3, #4
 8007204:	429d      	cmp	r5, r3
 8007206:	461a      	mov	r2, r3
 8007208:	d30b      	bcc.n	8007222 <quorem+0x100>
 800720a:	613c      	str	r4, [r7, #16]
 800720c:	3601      	adds	r6, #1
 800720e:	4630      	mov	r0, r6
 8007210:	b003      	add	sp, #12
 8007212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	3b04      	subs	r3, #4
 800721a:	2a00      	cmp	r2, #0
 800721c:	d1cb      	bne.n	80071b6 <quorem+0x94>
 800721e:	3c01      	subs	r4, #1
 8007220:	e7c6      	b.n	80071b0 <quorem+0x8e>
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	3b04      	subs	r3, #4
 8007226:	2a00      	cmp	r2, #0
 8007228:	d1ef      	bne.n	800720a <quorem+0xe8>
 800722a:	3c01      	subs	r4, #1
 800722c:	e7ea      	b.n	8007204 <quorem+0xe2>
 800722e:	2000      	movs	r0, #0
 8007230:	e7ee      	b.n	8007210 <quorem+0xee>
 8007232:	0000      	movs	r0, r0
 8007234:	0000      	movs	r0, r0
	...

08007238 <_dtoa_r>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	4614      	mov	r4, r2
 800723e:	461d      	mov	r5, r3
 8007240:	69c7      	ldr	r7, [r0, #28]
 8007242:	b097      	sub	sp, #92	@ 0x5c
 8007244:	4681      	mov	r9, r0
 8007246:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800724a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800724c:	b97f      	cbnz	r7, 800726e <_dtoa_r+0x36>
 800724e:	2010      	movs	r0, #16
 8007250:	f000 fe0e 	bl	8007e70 <malloc>
 8007254:	4602      	mov	r2, r0
 8007256:	f8c9 001c 	str.w	r0, [r9, #28]
 800725a:	b920      	cbnz	r0, 8007266 <_dtoa_r+0x2e>
 800725c:	21ef      	movs	r1, #239	@ 0xef
 800725e:	4bac      	ldr	r3, [pc, #688]	@ (8007510 <_dtoa_r+0x2d8>)
 8007260:	48ac      	ldr	r0, [pc, #688]	@ (8007514 <_dtoa_r+0x2dc>)
 8007262:	f001 fc6d 	bl	8008b40 <__assert_func>
 8007266:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800726a:	6007      	str	r7, [r0, #0]
 800726c:	60c7      	str	r7, [r0, #12]
 800726e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007272:	6819      	ldr	r1, [r3, #0]
 8007274:	b159      	cbz	r1, 800728e <_dtoa_r+0x56>
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	2301      	movs	r3, #1
 800727a:	4093      	lsls	r3, r2
 800727c:	604a      	str	r2, [r1, #4]
 800727e:	608b      	str	r3, [r1, #8]
 8007280:	4648      	mov	r0, r9
 8007282:	f000 feeb 	bl	800805c <_Bfree>
 8007286:	2200      	movs	r2, #0
 8007288:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	1e2b      	subs	r3, r5, #0
 8007290:	bfaf      	iteee	ge
 8007292:	2300      	movge	r3, #0
 8007294:	2201      	movlt	r2, #1
 8007296:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800729a:	9307      	strlt	r3, [sp, #28]
 800729c:	bfa8      	it	ge
 800729e:	6033      	strge	r3, [r6, #0]
 80072a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80072a4:	4b9c      	ldr	r3, [pc, #624]	@ (8007518 <_dtoa_r+0x2e0>)
 80072a6:	bfb8      	it	lt
 80072a8:	6032      	strlt	r2, [r6, #0]
 80072aa:	ea33 0308 	bics.w	r3, r3, r8
 80072ae:	d112      	bne.n	80072d6 <_dtoa_r+0x9e>
 80072b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80072bc:	4323      	orrs	r3, r4
 80072be:	f000 855e 	beq.w	8007d7e <_dtoa_r+0xb46>
 80072c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800751c <_dtoa_r+0x2e4>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8560 	beq.w	8007d8e <_dtoa_r+0xb56>
 80072ce:	f10a 0303 	add.w	r3, sl, #3
 80072d2:	f000 bd5a 	b.w	8007d8a <_dtoa_r+0xb52>
 80072d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80072de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072e2:	2200      	movs	r2, #0
 80072e4:	2300      	movs	r3, #0
 80072e6:	f7f9 fb5f 	bl	80009a8 <__aeabi_dcmpeq>
 80072ea:	4607      	mov	r7, r0
 80072ec:	b158      	cbz	r0, 8007306 <_dtoa_r+0xce>
 80072ee:	2301      	movs	r3, #1
 80072f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072f6:	b113      	cbz	r3, 80072fe <_dtoa_r+0xc6>
 80072f8:	4b89      	ldr	r3, [pc, #548]	@ (8007520 <_dtoa_r+0x2e8>)
 80072fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007524 <_dtoa_r+0x2ec>
 8007302:	f000 bd44 	b.w	8007d8e <_dtoa_r+0xb56>
 8007306:	ab14      	add	r3, sp, #80	@ 0x50
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	ab15      	add	r3, sp, #84	@ 0x54
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4648      	mov	r0, r9
 8007310:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007314:	f001 f984 	bl	8008620 <__d2b>
 8007318:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800731c:	9003      	str	r0, [sp, #12]
 800731e:	2e00      	cmp	r6, #0
 8007320:	d078      	beq.n	8007414 <_dtoa_r+0x1dc>
 8007322:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007328:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800732c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007330:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007334:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007338:	9712      	str	r7, [sp, #72]	@ 0x48
 800733a:	4619      	mov	r1, r3
 800733c:	2200      	movs	r2, #0
 800733e:	4b7a      	ldr	r3, [pc, #488]	@ (8007528 <_dtoa_r+0x2f0>)
 8007340:	f7f8 ff12 	bl	8000168 <__aeabi_dsub>
 8007344:	a36c      	add	r3, pc, #432	@ (adr r3, 80074f8 <_dtoa_r+0x2c0>)
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f7f9 f8c5 	bl	80004d8 <__aeabi_dmul>
 800734e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007500 <_dtoa_r+0x2c8>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f7f8 ff0a 	bl	800016c <__adddf3>
 8007358:	4604      	mov	r4, r0
 800735a:	4630      	mov	r0, r6
 800735c:	460d      	mov	r5, r1
 800735e:	f7f9 f851 	bl	8000404 <__aeabi_i2d>
 8007362:	a369      	add	r3, pc, #420	@ (adr r3, 8007508 <_dtoa_r+0x2d0>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f9 f8b6 	bl	80004d8 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4620      	mov	r0, r4
 8007372:	4629      	mov	r1, r5
 8007374:	f7f8 fefa 	bl	800016c <__adddf3>
 8007378:	4604      	mov	r4, r0
 800737a:	460d      	mov	r5, r1
 800737c:	f7f9 fb5c 	bl	8000a38 <__aeabi_d2iz>
 8007380:	2200      	movs	r2, #0
 8007382:	4607      	mov	r7, r0
 8007384:	2300      	movs	r3, #0
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	f7f9 fb17 	bl	80009bc <__aeabi_dcmplt>
 800738e:	b140      	cbz	r0, 80073a2 <_dtoa_r+0x16a>
 8007390:	4638      	mov	r0, r7
 8007392:	f7f9 f837 	bl	8000404 <__aeabi_i2d>
 8007396:	4622      	mov	r2, r4
 8007398:	462b      	mov	r3, r5
 800739a:	f7f9 fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800739e:	b900      	cbnz	r0, 80073a2 <_dtoa_r+0x16a>
 80073a0:	3f01      	subs	r7, #1
 80073a2:	2f16      	cmp	r7, #22
 80073a4:	d854      	bhi.n	8007450 <_dtoa_r+0x218>
 80073a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073aa:	4b60      	ldr	r3, [pc, #384]	@ (800752c <_dtoa_r+0x2f4>)
 80073ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f9 fb02 	bl	80009bc <__aeabi_dcmplt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d04b      	beq.n	8007454 <_dtoa_r+0x21c>
 80073bc:	2300      	movs	r3, #0
 80073be:	3f01      	subs	r7, #1
 80073c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073c4:	1b9b      	subs	r3, r3, r6
 80073c6:	1e5a      	subs	r2, r3, #1
 80073c8:	bf49      	itett	mi
 80073ca:	f1c3 0301 	rsbmi	r3, r3, #1
 80073ce:	2300      	movpl	r3, #0
 80073d0:	9304      	strmi	r3, [sp, #16]
 80073d2:	2300      	movmi	r3, #0
 80073d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073d6:	bf54      	ite	pl
 80073d8:	9304      	strpl	r3, [sp, #16]
 80073da:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80073dc:	2f00      	cmp	r7, #0
 80073de:	db3b      	blt.n	8007458 <_dtoa_r+0x220>
 80073e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e2:	970e      	str	r7, [sp, #56]	@ 0x38
 80073e4:	443b      	add	r3, r7
 80073e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e8:	2300      	movs	r3, #0
 80073ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073ee:	2b09      	cmp	r3, #9
 80073f0:	d865      	bhi.n	80074be <_dtoa_r+0x286>
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	bfc4      	itt	gt
 80073f6:	3b04      	subgt	r3, #4
 80073f8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80073fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073fc:	bfc8      	it	gt
 80073fe:	2400      	movgt	r4, #0
 8007400:	f1a3 0302 	sub.w	r3, r3, #2
 8007404:	bfd8      	it	le
 8007406:	2401      	movle	r4, #1
 8007408:	2b03      	cmp	r3, #3
 800740a:	d864      	bhi.n	80074d6 <_dtoa_r+0x29e>
 800740c:	e8df f003 	tbb	[pc, r3]
 8007410:	2c385553 	.word	0x2c385553
 8007414:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007418:	441e      	add	r6, r3
 800741a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800741e:	2b20      	cmp	r3, #32
 8007420:	bfc1      	itttt	gt
 8007422:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007426:	fa08 f803 	lslgt.w	r8, r8, r3
 800742a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800742e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007432:	bfd6      	itet	le
 8007434:	f1c3 0320 	rsble	r3, r3, #32
 8007438:	ea48 0003 	orrgt.w	r0, r8, r3
 800743c:	fa04 f003 	lslle.w	r0, r4, r3
 8007440:	f7f8 ffd0 	bl	80003e4 <__aeabi_ui2d>
 8007444:	2201      	movs	r2, #1
 8007446:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800744a:	3e01      	subs	r6, #1
 800744c:	9212      	str	r2, [sp, #72]	@ 0x48
 800744e:	e774      	b.n	800733a <_dtoa_r+0x102>
 8007450:	2301      	movs	r3, #1
 8007452:	e7b5      	b.n	80073c0 <_dtoa_r+0x188>
 8007454:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007456:	e7b4      	b.n	80073c2 <_dtoa_r+0x18a>
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	1bdb      	subs	r3, r3, r7
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	427b      	negs	r3, r7
 8007460:	930a      	str	r3, [sp, #40]	@ 0x28
 8007462:	2300      	movs	r3, #0
 8007464:	930e      	str	r3, [sp, #56]	@ 0x38
 8007466:	e7c1      	b.n	80073ec <_dtoa_r+0x1b4>
 8007468:	2301      	movs	r3, #1
 800746a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800746c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800746e:	eb07 0b03 	add.w	fp, r7, r3
 8007472:	f10b 0301 	add.w	r3, fp, #1
 8007476:	2b01      	cmp	r3, #1
 8007478:	9308      	str	r3, [sp, #32]
 800747a:	bfb8      	it	lt
 800747c:	2301      	movlt	r3, #1
 800747e:	e006      	b.n	800748e <_dtoa_r+0x256>
 8007480:	2301      	movs	r3, #1
 8007482:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007484:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007486:	2b00      	cmp	r3, #0
 8007488:	dd28      	ble.n	80074dc <_dtoa_r+0x2a4>
 800748a:	469b      	mov	fp, r3
 800748c:	9308      	str	r3, [sp, #32]
 800748e:	2100      	movs	r1, #0
 8007490:	2204      	movs	r2, #4
 8007492:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007496:	f102 0514 	add.w	r5, r2, #20
 800749a:	429d      	cmp	r5, r3
 800749c:	d926      	bls.n	80074ec <_dtoa_r+0x2b4>
 800749e:	6041      	str	r1, [r0, #4]
 80074a0:	4648      	mov	r0, r9
 80074a2:	f000 fd9b 	bl	8007fdc <_Balloc>
 80074a6:	4682      	mov	sl, r0
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d143      	bne.n	8007534 <_dtoa_r+0x2fc>
 80074ac:	4602      	mov	r2, r0
 80074ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80074b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007530 <_dtoa_r+0x2f8>)
 80074b4:	e6d4      	b.n	8007260 <_dtoa_r+0x28>
 80074b6:	2300      	movs	r3, #0
 80074b8:	e7e3      	b.n	8007482 <_dtoa_r+0x24a>
 80074ba:	2300      	movs	r3, #0
 80074bc:	e7d5      	b.n	800746a <_dtoa_r+0x232>
 80074be:	2401      	movs	r4, #1
 80074c0:	2300      	movs	r3, #0
 80074c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80074c6:	f04f 3bff 	mov.w	fp, #4294967295
 80074ca:	2200      	movs	r2, #0
 80074cc:	2312      	movs	r3, #18
 80074ce:	f8cd b020 	str.w	fp, [sp, #32]
 80074d2:	9221      	str	r2, [sp, #132]	@ 0x84
 80074d4:	e7db      	b.n	800748e <_dtoa_r+0x256>
 80074d6:	2301      	movs	r3, #1
 80074d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074da:	e7f4      	b.n	80074c6 <_dtoa_r+0x28e>
 80074dc:	f04f 0b01 	mov.w	fp, #1
 80074e0:	465b      	mov	r3, fp
 80074e2:	f8cd b020 	str.w	fp, [sp, #32]
 80074e6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80074ea:	e7d0      	b.n	800748e <_dtoa_r+0x256>
 80074ec:	3101      	adds	r1, #1
 80074ee:	0052      	lsls	r2, r2, #1
 80074f0:	e7d1      	b.n	8007496 <_dtoa_r+0x25e>
 80074f2:	bf00      	nop
 80074f4:	f3af 8000 	nop.w
 80074f8:	636f4361 	.word	0x636f4361
 80074fc:	3fd287a7 	.word	0x3fd287a7
 8007500:	8b60c8b3 	.word	0x8b60c8b3
 8007504:	3fc68a28 	.word	0x3fc68a28
 8007508:	509f79fb 	.word	0x509f79fb
 800750c:	3fd34413 	.word	0x3fd34413
 8007510:	080092a3 	.word	0x080092a3
 8007514:	080092ba 	.word	0x080092ba
 8007518:	7ff00000 	.word	0x7ff00000
 800751c:	0800929f 	.word	0x0800929f
 8007520:	08009273 	.word	0x08009273
 8007524:	08009272 	.word	0x08009272
 8007528:	3ff80000 	.word	0x3ff80000
 800752c:	08009408 	.word	0x08009408
 8007530:	08009312 	.word	0x08009312
 8007534:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007538:	6018      	str	r0, [r3, #0]
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	2b0e      	cmp	r3, #14
 800753e:	f200 80a1 	bhi.w	8007684 <_dtoa_r+0x44c>
 8007542:	2c00      	cmp	r4, #0
 8007544:	f000 809e 	beq.w	8007684 <_dtoa_r+0x44c>
 8007548:	2f00      	cmp	r7, #0
 800754a:	dd33      	ble.n	80075b4 <_dtoa_r+0x37c>
 800754c:	4b9c      	ldr	r3, [pc, #624]	@ (80077c0 <_dtoa_r+0x588>)
 800754e:	f007 020f 	and.w	r2, r7, #15
 8007552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007556:	05f8      	lsls	r0, r7, #23
 8007558:	e9d3 3400 	ldrd	r3, r4, [r3]
 800755c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007560:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007564:	d516      	bpl.n	8007594 <_dtoa_r+0x35c>
 8007566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800756a:	4b96      	ldr	r3, [pc, #600]	@ (80077c4 <_dtoa_r+0x58c>)
 800756c:	2603      	movs	r6, #3
 800756e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007572:	f7f9 f8db 	bl	800072c <__aeabi_ddiv>
 8007576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800757a:	f004 040f 	and.w	r4, r4, #15
 800757e:	4d91      	ldr	r5, [pc, #580]	@ (80077c4 <_dtoa_r+0x58c>)
 8007580:	b954      	cbnz	r4, 8007598 <_dtoa_r+0x360>
 8007582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800758a:	f7f9 f8cf 	bl	800072c <__aeabi_ddiv>
 800758e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007592:	e028      	b.n	80075e6 <_dtoa_r+0x3ae>
 8007594:	2602      	movs	r6, #2
 8007596:	e7f2      	b.n	800757e <_dtoa_r+0x346>
 8007598:	07e1      	lsls	r1, r4, #31
 800759a:	d508      	bpl.n	80075ae <_dtoa_r+0x376>
 800759c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075a4:	f7f8 ff98 	bl	80004d8 <__aeabi_dmul>
 80075a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075ac:	3601      	adds	r6, #1
 80075ae:	1064      	asrs	r4, r4, #1
 80075b0:	3508      	adds	r5, #8
 80075b2:	e7e5      	b.n	8007580 <_dtoa_r+0x348>
 80075b4:	f000 80af 	beq.w	8007716 <_dtoa_r+0x4de>
 80075b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075bc:	427c      	negs	r4, r7
 80075be:	4b80      	ldr	r3, [pc, #512]	@ (80077c0 <_dtoa_r+0x588>)
 80075c0:	f004 020f 	and.w	r2, r4, #15
 80075c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f8 ff84 	bl	80004d8 <__aeabi_dmul>
 80075d0:	2602      	movs	r6, #2
 80075d2:	2300      	movs	r3, #0
 80075d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075d8:	4d7a      	ldr	r5, [pc, #488]	@ (80077c4 <_dtoa_r+0x58c>)
 80075da:	1124      	asrs	r4, r4, #4
 80075dc:	2c00      	cmp	r4, #0
 80075de:	f040 808f 	bne.w	8007700 <_dtoa_r+0x4c8>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d3      	bne.n	800758e <_dtoa_r+0x356>
 80075e6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80075ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8094 	beq.w	800771a <_dtoa_r+0x4e2>
 80075f2:	2200      	movs	r2, #0
 80075f4:	4620      	mov	r0, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	4b73      	ldr	r3, [pc, #460]	@ (80077c8 <_dtoa_r+0x590>)
 80075fa:	f7f9 f9df 	bl	80009bc <__aeabi_dcmplt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	f000 808b 	beq.w	800771a <_dtoa_r+0x4e2>
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 8087 	beq.w	800771a <_dtoa_r+0x4e2>
 800760c:	f1bb 0f00 	cmp.w	fp, #0
 8007610:	dd34      	ble.n	800767c <_dtoa_r+0x444>
 8007612:	4620      	mov	r0, r4
 8007614:	2200      	movs	r2, #0
 8007616:	4629      	mov	r1, r5
 8007618:	4b6c      	ldr	r3, [pc, #432]	@ (80077cc <_dtoa_r+0x594>)
 800761a:	f7f8 ff5d 	bl	80004d8 <__aeabi_dmul>
 800761e:	465c      	mov	r4, fp
 8007620:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007624:	f107 38ff 	add.w	r8, r7, #4294967295
 8007628:	3601      	adds	r6, #1
 800762a:	4630      	mov	r0, r6
 800762c:	f7f8 feea 	bl	8000404 <__aeabi_i2d>
 8007630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007634:	f7f8 ff50 	bl	80004d8 <__aeabi_dmul>
 8007638:	2200      	movs	r2, #0
 800763a:	4b65      	ldr	r3, [pc, #404]	@ (80077d0 <_dtoa_r+0x598>)
 800763c:	f7f8 fd96 	bl	800016c <__adddf3>
 8007640:	4605      	mov	r5, r0
 8007642:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007646:	2c00      	cmp	r4, #0
 8007648:	d16a      	bne.n	8007720 <_dtoa_r+0x4e8>
 800764a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800764e:	2200      	movs	r2, #0
 8007650:	4b60      	ldr	r3, [pc, #384]	@ (80077d4 <_dtoa_r+0x59c>)
 8007652:	f7f8 fd89 	bl	8000168 <__aeabi_dsub>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800765e:	462a      	mov	r2, r5
 8007660:	4633      	mov	r3, r6
 8007662:	f7f9 f9c9 	bl	80009f8 <__aeabi_dcmpgt>
 8007666:	2800      	cmp	r0, #0
 8007668:	f040 8298 	bne.w	8007b9c <_dtoa_r+0x964>
 800766c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007670:	462a      	mov	r2, r5
 8007672:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007676:	f7f9 f9a1 	bl	80009bc <__aeabi_dcmplt>
 800767a:	bb38      	cbnz	r0, 80076cc <_dtoa_r+0x494>
 800767c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007680:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007684:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007686:	2b00      	cmp	r3, #0
 8007688:	f2c0 8157 	blt.w	800793a <_dtoa_r+0x702>
 800768c:	2f0e      	cmp	r7, #14
 800768e:	f300 8154 	bgt.w	800793a <_dtoa_r+0x702>
 8007692:	4b4b      	ldr	r3, [pc, #300]	@ (80077c0 <_dtoa_r+0x588>)
 8007694:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800769c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f280 80e5 	bge.w	8007872 <_dtoa_r+0x63a>
 80076a8:	9b08      	ldr	r3, [sp, #32]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f300 80e1 	bgt.w	8007872 <_dtoa_r+0x63a>
 80076b0:	d10c      	bne.n	80076cc <_dtoa_r+0x494>
 80076b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b6:	2200      	movs	r2, #0
 80076b8:	4b46      	ldr	r3, [pc, #280]	@ (80077d4 <_dtoa_r+0x59c>)
 80076ba:	f7f8 ff0d 	bl	80004d8 <__aeabi_dmul>
 80076be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076c2:	f7f9 f98f 	bl	80009e4 <__aeabi_dcmpge>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f000 8266 	beq.w	8007b98 <_dtoa_r+0x960>
 80076cc:	2400      	movs	r4, #0
 80076ce:	4625      	mov	r5, r4
 80076d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076d2:	4656      	mov	r6, sl
 80076d4:	ea6f 0803 	mvn.w	r8, r3
 80076d8:	2700      	movs	r7, #0
 80076da:	4621      	mov	r1, r4
 80076dc:	4648      	mov	r0, r9
 80076de:	f000 fcbd 	bl	800805c <_Bfree>
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	f000 80bd 	beq.w	8007862 <_dtoa_r+0x62a>
 80076e8:	b12f      	cbz	r7, 80076f6 <_dtoa_r+0x4be>
 80076ea:	42af      	cmp	r7, r5
 80076ec:	d003      	beq.n	80076f6 <_dtoa_r+0x4be>
 80076ee:	4639      	mov	r1, r7
 80076f0:	4648      	mov	r0, r9
 80076f2:	f000 fcb3 	bl	800805c <_Bfree>
 80076f6:	4629      	mov	r1, r5
 80076f8:	4648      	mov	r0, r9
 80076fa:	f000 fcaf 	bl	800805c <_Bfree>
 80076fe:	e0b0      	b.n	8007862 <_dtoa_r+0x62a>
 8007700:	07e2      	lsls	r2, r4, #31
 8007702:	d505      	bpl.n	8007710 <_dtoa_r+0x4d8>
 8007704:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007708:	f7f8 fee6 	bl	80004d8 <__aeabi_dmul>
 800770c:	2301      	movs	r3, #1
 800770e:	3601      	adds	r6, #1
 8007710:	1064      	asrs	r4, r4, #1
 8007712:	3508      	adds	r5, #8
 8007714:	e762      	b.n	80075dc <_dtoa_r+0x3a4>
 8007716:	2602      	movs	r6, #2
 8007718:	e765      	b.n	80075e6 <_dtoa_r+0x3ae>
 800771a:	46b8      	mov	r8, r7
 800771c:	9c08      	ldr	r4, [sp, #32]
 800771e:	e784      	b.n	800762a <_dtoa_r+0x3f2>
 8007720:	4b27      	ldr	r3, [pc, #156]	@ (80077c0 <_dtoa_r+0x588>)
 8007722:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007724:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007728:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800772c:	4454      	add	r4, sl
 800772e:	2900      	cmp	r1, #0
 8007730:	d054      	beq.n	80077dc <_dtoa_r+0x5a4>
 8007732:	2000      	movs	r0, #0
 8007734:	4928      	ldr	r1, [pc, #160]	@ (80077d8 <_dtoa_r+0x5a0>)
 8007736:	f7f8 fff9 	bl	800072c <__aeabi_ddiv>
 800773a:	4633      	mov	r3, r6
 800773c:	462a      	mov	r2, r5
 800773e:	f7f8 fd13 	bl	8000168 <__aeabi_dsub>
 8007742:	4656      	mov	r6, sl
 8007744:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800774c:	f7f9 f974 	bl	8000a38 <__aeabi_d2iz>
 8007750:	4605      	mov	r5, r0
 8007752:	f7f8 fe57 	bl	8000404 <__aeabi_i2d>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800775e:	f7f8 fd03 	bl	8000168 <__aeabi_dsub>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	3530      	adds	r5, #48	@ 0x30
 8007768:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800776c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007770:	f806 5b01 	strb.w	r5, [r6], #1
 8007774:	f7f9 f922 	bl	80009bc <__aeabi_dcmplt>
 8007778:	2800      	cmp	r0, #0
 800777a:	d172      	bne.n	8007862 <_dtoa_r+0x62a>
 800777c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007780:	2000      	movs	r0, #0
 8007782:	4911      	ldr	r1, [pc, #68]	@ (80077c8 <_dtoa_r+0x590>)
 8007784:	f7f8 fcf0 	bl	8000168 <__aeabi_dsub>
 8007788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800778c:	f7f9 f916 	bl	80009bc <__aeabi_dcmplt>
 8007790:	2800      	cmp	r0, #0
 8007792:	f040 80b4 	bne.w	80078fe <_dtoa_r+0x6c6>
 8007796:	42a6      	cmp	r6, r4
 8007798:	f43f af70 	beq.w	800767c <_dtoa_r+0x444>
 800779c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077a0:	2200      	movs	r2, #0
 80077a2:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <_dtoa_r+0x594>)
 80077a4:	f7f8 fe98 	bl	80004d8 <__aeabi_dmul>
 80077a8:	2200      	movs	r2, #0
 80077aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <_dtoa_r+0x594>)
 80077b4:	f7f8 fe90 	bl	80004d8 <__aeabi_dmul>
 80077b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077bc:	e7c4      	b.n	8007748 <_dtoa_r+0x510>
 80077be:	bf00      	nop
 80077c0:	08009408 	.word	0x08009408
 80077c4:	080093e0 	.word	0x080093e0
 80077c8:	3ff00000 	.word	0x3ff00000
 80077cc:	40240000 	.word	0x40240000
 80077d0:	401c0000 	.word	0x401c0000
 80077d4:	40140000 	.word	0x40140000
 80077d8:	3fe00000 	.word	0x3fe00000
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	f7f8 fe7a 	bl	80004d8 <__aeabi_dmul>
 80077e4:	4656      	mov	r6, sl
 80077e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80077ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f0:	f7f9 f922 	bl	8000a38 <__aeabi_d2iz>
 80077f4:	4605      	mov	r5, r0
 80077f6:	f7f8 fe05 	bl	8000404 <__aeabi_i2d>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007802:	f7f8 fcb1 	bl	8000168 <__aeabi_dsub>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	3530      	adds	r5, #48	@ 0x30
 800780c:	f806 5b01 	strb.w	r5, [r6], #1
 8007810:	42a6      	cmp	r6, r4
 8007812:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	d124      	bne.n	8007866 <_dtoa_r+0x62e>
 800781c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007820:	4bae      	ldr	r3, [pc, #696]	@ (8007adc <_dtoa_r+0x8a4>)
 8007822:	f7f8 fca3 	bl	800016c <__adddf3>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800782e:	f7f9 f8e3 	bl	80009f8 <__aeabi_dcmpgt>
 8007832:	2800      	cmp	r0, #0
 8007834:	d163      	bne.n	80078fe <_dtoa_r+0x6c6>
 8007836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800783a:	2000      	movs	r0, #0
 800783c:	49a7      	ldr	r1, [pc, #668]	@ (8007adc <_dtoa_r+0x8a4>)
 800783e:	f7f8 fc93 	bl	8000168 <__aeabi_dsub>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800784a:	f7f9 f8b7 	bl	80009bc <__aeabi_dcmplt>
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f af14 	beq.w	800767c <_dtoa_r+0x444>
 8007854:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007856:	1e73      	subs	r3, r6, #1
 8007858:	9313      	str	r3, [sp, #76]	@ 0x4c
 800785a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800785e:	2b30      	cmp	r3, #48	@ 0x30
 8007860:	d0f8      	beq.n	8007854 <_dtoa_r+0x61c>
 8007862:	4647      	mov	r7, r8
 8007864:	e03b      	b.n	80078de <_dtoa_r+0x6a6>
 8007866:	4b9e      	ldr	r3, [pc, #632]	@ (8007ae0 <_dtoa_r+0x8a8>)
 8007868:	f7f8 fe36 	bl	80004d8 <__aeabi_dmul>
 800786c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007870:	e7bc      	b.n	80077ec <_dtoa_r+0x5b4>
 8007872:	4656      	mov	r6, sl
 8007874:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800787c:	4620      	mov	r0, r4
 800787e:	4629      	mov	r1, r5
 8007880:	f7f8 ff54 	bl	800072c <__aeabi_ddiv>
 8007884:	f7f9 f8d8 	bl	8000a38 <__aeabi_d2iz>
 8007888:	4680      	mov	r8, r0
 800788a:	f7f8 fdbb 	bl	8000404 <__aeabi_i2d>
 800788e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007892:	f7f8 fe21 	bl	80004d8 <__aeabi_dmul>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4620      	mov	r0, r4
 800789c:	4629      	mov	r1, r5
 800789e:	f7f8 fc63 	bl	8000168 <__aeabi_dsub>
 80078a2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078a6:	9d08      	ldr	r5, [sp, #32]
 80078a8:	f806 4b01 	strb.w	r4, [r6], #1
 80078ac:	eba6 040a 	sub.w	r4, r6, sl
 80078b0:	42a5      	cmp	r5, r4
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	d133      	bne.n	8007920 <_dtoa_r+0x6e8>
 80078b8:	f7f8 fc58 	bl	800016c <__adddf3>
 80078bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c0:	4604      	mov	r4, r0
 80078c2:	460d      	mov	r5, r1
 80078c4:	f7f9 f898 	bl	80009f8 <__aeabi_dcmpgt>
 80078c8:	b9c0      	cbnz	r0, 80078fc <_dtoa_r+0x6c4>
 80078ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f9 f869 	bl	80009a8 <__aeabi_dcmpeq>
 80078d6:	b110      	cbz	r0, 80078de <_dtoa_r+0x6a6>
 80078d8:	f018 0f01 	tst.w	r8, #1
 80078dc:	d10e      	bne.n	80078fc <_dtoa_r+0x6c4>
 80078de:	4648      	mov	r0, r9
 80078e0:	9903      	ldr	r1, [sp, #12]
 80078e2:	f000 fbbb 	bl	800805c <_Bfree>
 80078e6:	2300      	movs	r3, #0
 80078e8:	7033      	strb	r3, [r6, #0]
 80078ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078ec:	3701      	adds	r7, #1
 80078ee:	601f      	str	r7, [r3, #0]
 80078f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 824b 	beq.w	8007d8e <_dtoa_r+0xb56>
 80078f8:	601e      	str	r6, [r3, #0]
 80078fa:	e248      	b.n	8007d8e <_dtoa_r+0xb56>
 80078fc:	46b8      	mov	r8, r7
 80078fe:	4633      	mov	r3, r6
 8007900:	461e      	mov	r6, r3
 8007902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007906:	2a39      	cmp	r2, #57	@ 0x39
 8007908:	d106      	bne.n	8007918 <_dtoa_r+0x6e0>
 800790a:	459a      	cmp	sl, r3
 800790c:	d1f8      	bne.n	8007900 <_dtoa_r+0x6c8>
 800790e:	2230      	movs	r2, #48	@ 0x30
 8007910:	f108 0801 	add.w	r8, r8, #1
 8007914:	f88a 2000 	strb.w	r2, [sl]
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	3201      	adds	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e7a0      	b.n	8007862 <_dtoa_r+0x62a>
 8007920:	2200      	movs	r2, #0
 8007922:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae0 <_dtoa_r+0x8a8>)
 8007924:	f7f8 fdd8 	bl	80004d8 <__aeabi_dmul>
 8007928:	2200      	movs	r2, #0
 800792a:	2300      	movs	r3, #0
 800792c:	4604      	mov	r4, r0
 800792e:	460d      	mov	r5, r1
 8007930:	f7f9 f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8007934:	2800      	cmp	r0, #0
 8007936:	d09f      	beq.n	8007878 <_dtoa_r+0x640>
 8007938:	e7d1      	b.n	80078de <_dtoa_r+0x6a6>
 800793a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800793c:	2a00      	cmp	r2, #0
 800793e:	f000 80ea 	beq.w	8007b16 <_dtoa_r+0x8de>
 8007942:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007944:	2a01      	cmp	r2, #1
 8007946:	f300 80cd 	bgt.w	8007ae4 <_dtoa_r+0x8ac>
 800794a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800794c:	2a00      	cmp	r2, #0
 800794e:	f000 80c1 	beq.w	8007ad4 <_dtoa_r+0x89c>
 8007952:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007956:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007958:	9e04      	ldr	r6, [sp, #16]
 800795a:	9a04      	ldr	r2, [sp, #16]
 800795c:	2101      	movs	r1, #1
 800795e:	441a      	add	r2, r3
 8007960:	9204      	str	r2, [sp, #16]
 8007962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007964:	4648      	mov	r0, r9
 8007966:	441a      	add	r2, r3
 8007968:	9209      	str	r2, [sp, #36]	@ 0x24
 800796a:	f000 fc2b 	bl	80081c4 <__i2b>
 800796e:	4605      	mov	r5, r0
 8007970:	b166      	cbz	r6, 800798c <_dtoa_r+0x754>
 8007972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd09      	ble.n	800798c <_dtoa_r+0x754>
 8007978:	42b3      	cmp	r3, r6
 800797a:	bfa8      	it	ge
 800797c:	4633      	movge	r3, r6
 800797e:	9a04      	ldr	r2, [sp, #16]
 8007980:	1af6      	subs	r6, r6, r3
 8007982:	1ad2      	subs	r2, r2, r3
 8007984:	9204      	str	r2, [sp, #16]
 8007986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	9309      	str	r3, [sp, #36]	@ 0x24
 800798c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800798e:	b30b      	cbz	r3, 80079d4 <_dtoa_r+0x79c>
 8007990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80c6 	beq.w	8007b24 <_dtoa_r+0x8ec>
 8007998:	2c00      	cmp	r4, #0
 800799a:	f000 80c0 	beq.w	8007b1e <_dtoa_r+0x8e6>
 800799e:	4629      	mov	r1, r5
 80079a0:	4622      	mov	r2, r4
 80079a2:	4648      	mov	r0, r9
 80079a4:	f000 fcc6 	bl	8008334 <__pow5mult>
 80079a8:	9a03      	ldr	r2, [sp, #12]
 80079aa:	4601      	mov	r1, r0
 80079ac:	4605      	mov	r5, r0
 80079ae:	4648      	mov	r0, r9
 80079b0:	f000 fc1e 	bl	80081f0 <__multiply>
 80079b4:	9903      	ldr	r1, [sp, #12]
 80079b6:	4680      	mov	r8, r0
 80079b8:	4648      	mov	r0, r9
 80079ba:	f000 fb4f 	bl	800805c <_Bfree>
 80079be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c0:	1b1b      	subs	r3, r3, r4
 80079c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c4:	f000 80b1 	beq.w	8007b2a <_dtoa_r+0x8f2>
 80079c8:	4641      	mov	r1, r8
 80079ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079cc:	4648      	mov	r0, r9
 80079ce:	f000 fcb1 	bl	8008334 <__pow5mult>
 80079d2:	9003      	str	r0, [sp, #12]
 80079d4:	2101      	movs	r1, #1
 80079d6:	4648      	mov	r0, r9
 80079d8:	f000 fbf4 	bl	80081c4 <__i2b>
 80079dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079de:	4604      	mov	r4, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 81d8 	beq.w	8007d96 <_dtoa_r+0xb5e>
 80079e6:	461a      	mov	r2, r3
 80079e8:	4601      	mov	r1, r0
 80079ea:	4648      	mov	r0, r9
 80079ec:	f000 fca2 	bl	8008334 <__pow5mult>
 80079f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079f2:	4604      	mov	r4, r0
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	f300 809f 	bgt.w	8007b38 <_dtoa_r+0x900>
 80079fa:	9b06      	ldr	r3, [sp, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8097 	bne.w	8007b30 <_dtoa_r+0x8f8>
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8093 	bne.w	8007b34 <_dtoa_r+0x8fc>
 8007a0e:	9b07      	ldr	r3, [sp, #28]
 8007a10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a14:	0d1b      	lsrs	r3, r3, #20
 8007a16:	051b      	lsls	r3, r3, #20
 8007a18:	b133      	cbz	r3, 8007a28 <_dtoa_r+0x7f0>
 8007a1a:	9b04      	ldr	r3, [sp, #16]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	9304      	str	r3, [sp, #16]
 8007a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a22:	3301      	adds	r3, #1
 8007a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a26:	2301      	movs	r3, #1
 8007a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 81b8 	beq.w	8007da2 <_dtoa_r+0xb6a>
 8007a32:	6923      	ldr	r3, [r4, #16]
 8007a34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a38:	6918      	ldr	r0, [r3, #16]
 8007a3a:	f000 fb77 	bl	800812c <__hi0bits>
 8007a3e:	f1c0 0020 	rsb	r0, r0, #32
 8007a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a44:	4418      	add	r0, r3
 8007a46:	f010 001f 	ands.w	r0, r0, #31
 8007a4a:	f000 8082 	beq.w	8007b52 <_dtoa_r+0x91a>
 8007a4e:	f1c0 0320 	rsb	r3, r0, #32
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	dd73      	ble.n	8007b3e <_dtoa_r+0x906>
 8007a56:	9b04      	ldr	r3, [sp, #16]
 8007a58:	f1c0 001c 	rsb	r0, r0, #28
 8007a5c:	4403      	add	r3, r0
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a62:	4406      	add	r6, r0
 8007a64:	4403      	add	r3, r0
 8007a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a68:	9b04      	ldr	r3, [sp, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	dd05      	ble.n	8007a7a <_dtoa_r+0x842>
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4648      	mov	r0, r9
 8007a72:	9903      	ldr	r1, [sp, #12]
 8007a74:	f000 fcb8 	bl	80083e8 <__lshift>
 8007a78:	9003      	str	r0, [sp, #12]
 8007a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd05      	ble.n	8007a8c <_dtoa_r+0x854>
 8007a80:	4621      	mov	r1, r4
 8007a82:	461a      	mov	r2, r3
 8007a84:	4648      	mov	r0, r9
 8007a86:	f000 fcaf 	bl	80083e8 <__lshift>
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d061      	beq.n	8007b56 <_dtoa_r+0x91e>
 8007a92:	4621      	mov	r1, r4
 8007a94:	9803      	ldr	r0, [sp, #12]
 8007a96:	f000 fd13 	bl	80084c0 <__mcmp>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	da5b      	bge.n	8007b56 <_dtoa_r+0x91e>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	4648      	mov	r0, r9
 8007aa4:	9903      	ldr	r1, [sp, #12]
 8007aa6:	f000 fafb 	bl	80080a0 <__multadd>
 8007aaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aac:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ab0:	9003      	str	r0, [sp, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8177 	beq.w	8007da6 <_dtoa_r+0xb6e>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	2300      	movs	r3, #0
 8007abc:	220a      	movs	r2, #10
 8007abe:	4648      	mov	r0, r9
 8007ac0:	f000 faee 	bl	80080a0 <__multadd>
 8007ac4:	f1bb 0f00 	cmp.w	fp, #0
 8007ac8:	4605      	mov	r5, r0
 8007aca:	dc6f      	bgt.n	8007bac <_dtoa_r+0x974>
 8007acc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	dc49      	bgt.n	8007b66 <_dtoa_r+0x92e>
 8007ad2:	e06b      	b.n	8007bac <_dtoa_r+0x974>
 8007ad4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ad6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ada:	e73c      	b.n	8007956 <_dtoa_r+0x71e>
 8007adc:	3fe00000 	.word	0x3fe00000
 8007ae0:	40240000 	.word	0x40240000
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	1e5c      	subs	r4, r3, #1
 8007ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	db09      	blt.n	8007b02 <_dtoa_r+0x8ca>
 8007aee:	1b1c      	subs	r4, r3, r4
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f6bf af30 	bge.w	8007958 <_dtoa_r+0x720>
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	9a08      	ldr	r2, [sp, #32]
 8007afc:	1a9e      	subs	r6, r3, r2
 8007afe:	2300      	movs	r3, #0
 8007b00:	e72b      	b.n	800795a <_dtoa_r+0x722>
 8007b02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b06:	1ae3      	subs	r3, r4, r3
 8007b08:	441a      	add	r2, r3
 8007b0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b0c:	9e04      	ldr	r6, [sp, #16]
 8007b0e:	2400      	movs	r4, #0
 8007b10:	9b08      	ldr	r3, [sp, #32]
 8007b12:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b14:	e721      	b.n	800795a <_dtoa_r+0x722>
 8007b16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b18:	9e04      	ldr	r6, [sp, #16]
 8007b1a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b1c:	e728      	b.n	8007970 <_dtoa_r+0x738>
 8007b1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b22:	e751      	b.n	80079c8 <_dtoa_r+0x790>
 8007b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b26:	9903      	ldr	r1, [sp, #12]
 8007b28:	e750      	b.n	80079cc <_dtoa_r+0x794>
 8007b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b2e:	e751      	b.n	80079d4 <_dtoa_r+0x79c>
 8007b30:	2300      	movs	r3, #0
 8007b32:	e779      	b.n	8007a28 <_dtoa_r+0x7f0>
 8007b34:	9b06      	ldr	r3, [sp, #24]
 8007b36:	e777      	b.n	8007a28 <_dtoa_r+0x7f0>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b3c:	e779      	b.n	8007a32 <_dtoa_r+0x7fa>
 8007b3e:	d093      	beq.n	8007a68 <_dtoa_r+0x830>
 8007b40:	9a04      	ldr	r2, [sp, #16]
 8007b42:	331c      	adds	r3, #28
 8007b44:	441a      	add	r2, r3
 8007b46:	9204      	str	r2, [sp, #16]
 8007b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b4a:	441e      	add	r6, r3
 8007b4c:	441a      	add	r2, r3
 8007b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b50:	e78a      	b.n	8007a68 <_dtoa_r+0x830>
 8007b52:	4603      	mov	r3, r0
 8007b54:	e7f4      	b.n	8007b40 <_dtoa_r+0x908>
 8007b56:	9b08      	ldr	r3, [sp, #32]
 8007b58:	46b8      	mov	r8, r7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dc20      	bgt.n	8007ba0 <_dtoa_r+0x968>
 8007b5e:	469b      	mov	fp, r3
 8007b60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	dd1e      	ble.n	8007ba4 <_dtoa_r+0x96c>
 8007b66:	f1bb 0f00 	cmp.w	fp, #0
 8007b6a:	f47f adb1 	bne.w	80076d0 <_dtoa_r+0x498>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	465b      	mov	r3, fp
 8007b72:	2205      	movs	r2, #5
 8007b74:	4648      	mov	r0, r9
 8007b76:	f000 fa93 	bl	80080a0 <__multadd>
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	9803      	ldr	r0, [sp, #12]
 8007b80:	f000 fc9e 	bl	80084c0 <__mcmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f77f ada3 	ble.w	80076d0 <_dtoa_r+0x498>
 8007b8a:	4656      	mov	r6, sl
 8007b8c:	2331      	movs	r3, #49	@ 0x31
 8007b8e:	f108 0801 	add.w	r8, r8, #1
 8007b92:	f806 3b01 	strb.w	r3, [r6], #1
 8007b96:	e59f      	b.n	80076d8 <_dtoa_r+0x4a0>
 8007b98:	46b8      	mov	r8, r7
 8007b9a:	9c08      	ldr	r4, [sp, #32]
 8007b9c:	4625      	mov	r5, r4
 8007b9e:	e7f4      	b.n	8007b8a <_dtoa_r+0x952>
 8007ba0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8101 	beq.w	8007dae <_dtoa_r+0xb76>
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	dd05      	ble.n	8007bbc <_dtoa_r+0x984>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	4648      	mov	r0, r9
 8007bb6:	f000 fc17 	bl	80083e8 <__lshift>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d05c      	beq.n	8007c7c <_dtoa_r+0xa44>
 8007bc2:	4648      	mov	r0, r9
 8007bc4:	6869      	ldr	r1, [r5, #4]
 8007bc6:	f000 fa09 	bl	8007fdc <_Balloc>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <_dtoa_r+0x9a2>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bd4:	4b80      	ldr	r3, [pc, #512]	@ (8007dd8 <_dtoa_r+0xba0>)
 8007bd6:	f7ff bb43 	b.w	8007260 <_dtoa_r+0x28>
 8007bda:	692a      	ldr	r2, [r5, #16]
 8007bdc:	f105 010c 	add.w	r1, r5, #12
 8007be0:	3202      	adds	r2, #2
 8007be2:	0092      	lsls	r2, r2, #2
 8007be4:	300c      	adds	r0, #12
 8007be6:	f000 ff9d 	bl	8008b24 <memcpy>
 8007bea:	2201      	movs	r2, #1
 8007bec:	4631      	mov	r1, r6
 8007bee:	4648      	mov	r0, r9
 8007bf0:	f000 fbfa 	bl	80083e8 <__lshift>
 8007bf4:	462f      	mov	r7, r5
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	f10a 0301 	add.w	r3, sl, #1
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	eb0a 030b 	add.w	r3, sl, fp
 8007c02:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c04:	9b06      	ldr	r3, [sp, #24]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	4621      	mov	r1, r4
 8007c10:	9803      	ldr	r0, [sp, #12]
 8007c12:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c16:	f7ff fa84 	bl	8007122 <quorem>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	3330      	adds	r3, #48	@ 0x30
 8007c20:	9006      	str	r0, [sp, #24]
 8007c22:	9803      	ldr	r0, [sp, #12]
 8007c24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c26:	f000 fc4b 	bl	80084c0 <__mcmp>
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	9008      	str	r0, [sp, #32]
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4648      	mov	r0, r9
 8007c32:	f000 fc61 	bl	80084f8 <__mdiff>
 8007c36:	68c2      	ldr	r2, [r0, #12]
 8007c38:	4606      	mov	r6, r0
 8007c3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c3c:	bb02      	cbnz	r2, 8007c80 <_dtoa_r+0xa48>
 8007c3e:	4601      	mov	r1, r0
 8007c40:	9803      	ldr	r0, [sp, #12]
 8007c42:	f000 fc3d 	bl	80084c0 <__mcmp>
 8007c46:	4602      	mov	r2, r0
 8007c48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4648      	mov	r0, r9
 8007c4e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007c52:	f000 fa03 	bl	800805c <_Bfree>
 8007c56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c5a:	9e04      	ldr	r6, [sp, #16]
 8007c5c:	ea42 0103 	orr.w	r1, r2, r3
 8007c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c62:	4319      	orrs	r1, r3
 8007c64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c66:	d10d      	bne.n	8007c84 <_dtoa_r+0xa4c>
 8007c68:	2b39      	cmp	r3, #57	@ 0x39
 8007c6a:	d027      	beq.n	8007cbc <_dtoa_r+0xa84>
 8007c6c:	9a08      	ldr	r2, [sp, #32]
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	dd01      	ble.n	8007c76 <_dtoa_r+0xa3e>
 8007c72:	9b06      	ldr	r3, [sp, #24]
 8007c74:	3331      	adds	r3, #49	@ 0x31
 8007c76:	f88b 3000 	strb.w	r3, [fp]
 8007c7a:	e52e      	b.n	80076da <_dtoa_r+0x4a2>
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	e7b9      	b.n	8007bf4 <_dtoa_r+0x9bc>
 8007c80:	2201      	movs	r2, #1
 8007c82:	e7e2      	b.n	8007c4a <_dtoa_r+0xa12>
 8007c84:	9908      	ldr	r1, [sp, #32]
 8007c86:	2900      	cmp	r1, #0
 8007c88:	db04      	blt.n	8007c94 <_dtoa_r+0xa5c>
 8007c8a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007c8c:	4301      	orrs	r1, r0
 8007c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c90:	4301      	orrs	r1, r0
 8007c92:	d120      	bne.n	8007cd6 <_dtoa_r+0xa9e>
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	ddee      	ble.n	8007c76 <_dtoa_r+0xa3e>
 8007c98:	2201      	movs	r2, #1
 8007c9a:	9903      	ldr	r1, [sp, #12]
 8007c9c:	4648      	mov	r0, r9
 8007c9e:	9304      	str	r3, [sp, #16]
 8007ca0:	f000 fba2 	bl	80083e8 <__lshift>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	9003      	str	r0, [sp, #12]
 8007ca8:	f000 fc0a 	bl	80084c0 <__mcmp>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	9b04      	ldr	r3, [sp, #16]
 8007cb0:	dc02      	bgt.n	8007cb8 <_dtoa_r+0xa80>
 8007cb2:	d1e0      	bne.n	8007c76 <_dtoa_r+0xa3e>
 8007cb4:	07da      	lsls	r2, r3, #31
 8007cb6:	d5de      	bpl.n	8007c76 <_dtoa_r+0xa3e>
 8007cb8:	2b39      	cmp	r3, #57	@ 0x39
 8007cba:	d1da      	bne.n	8007c72 <_dtoa_r+0xa3a>
 8007cbc:	2339      	movs	r3, #57	@ 0x39
 8007cbe:	f88b 3000 	strb.w	r3, [fp]
 8007cc2:	4633      	mov	r3, r6
 8007cc4:	461e      	mov	r6, r3
 8007cc6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	2a39      	cmp	r2, #57	@ 0x39
 8007cce:	d04e      	beq.n	8007d6e <_dtoa_r+0xb36>
 8007cd0:	3201      	adds	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	e501      	b.n	80076da <_dtoa_r+0x4a2>
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	dd03      	ble.n	8007ce2 <_dtoa_r+0xaaa>
 8007cda:	2b39      	cmp	r3, #57	@ 0x39
 8007cdc:	d0ee      	beq.n	8007cbc <_dtoa_r+0xa84>
 8007cde:	3301      	adds	r3, #1
 8007ce0:	e7c9      	b.n	8007c76 <_dtoa_r+0xa3e>
 8007ce2:	9a04      	ldr	r2, [sp, #16]
 8007ce4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ce6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cea:	428a      	cmp	r2, r1
 8007cec:	d028      	beq.n	8007d40 <_dtoa_r+0xb08>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	220a      	movs	r2, #10
 8007cf2:	9903      	ldr	r1, [sp, #12]
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	f000 f9d3 	bl	80080a0 <__multadd>
 8007cfa:	42af      	cmp	r7, r5
 8007cfc:	9003      	str	r0, [sp, #12]
 8007cfe:	f04f 0300 	mov.w	r3, #0
 8007d02:	f04f 020a 	mov.w	r2, #10
 8007d06:	4639      	mov	r1, r7
 8007d08:	4648      	mov	r0, r9
 8007d0a:	d107      	bne.n	8007d1c <_dtoa_r+0xae4>
 8007d0c:	f000 f9c8 	bl	80080a0 <__multadd>
 8007d10:	4607      	mov	r7, r0
 8007d12:	4605      	mov	r5, r0
 8007d14:	9b04      	ldr	r3, [sp, #16]
 8007d16:	3301      	adds	r3, #1
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	e777      	b.n	8007c0c <_dtoa_r+0x9d4>
 8007d1c:	f000 f9c0 	bl	80080a0 <__multadd>
 8007d20:	4629      	mov	r1, r5
 8007d22:	4607      	mov	r7, r0
 8007d24:	2300      	movs	r3, #0
 8007d26:	220a      	movs	r2, #10
 8007d28:	4648      	mov	r0, r9
 8007d2a:	f000 f9b9 	bl	80080a0 <__multadd>
 8007d2e:	4605      	mov	r5, r0
 8007d30:	e7f0      	b.n	8007d14 <_dtoa_r+0xadc>
 8007d32:	f1bb 0f00 	cmp.w	fp, #0
 8007d36:	bfcc      	ite	gt
 8007d38:	465e      	movgt	r6, fp
 8007d3a:	2601      	movle	r6, #1
 8007d3c:	2700      	movs	r7, #0
 8007d3e:	4456      	add	r6, sl
 8007d40:	2201      	movs	r2, #1
 8007d42:	9903      	ldr	r1, [sp, #12]
 8007d44:	4648      	mov	r0, r9
 8007d46:	9304      	str	r3, [sp, #16]
 8007d48:	f000 fb4e 	bl	80083e8 <__lshift>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	9003      	str	r0, [sp, #12]
 8007d50:	f000 fbb6 	bl	80084c0 <__mcmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	dcb4      	bgt.n	8007cc2 <_dtoa_r+0xa8a>
 8007d58:	d102      	bne.n	8007d60 <_dtoa_r+0xb28>
 8007d5a:	9b04      	ldr	r3, [sp, #16]
 8007d5c:	07db      	lsls	r3, r3, #31
 8007d5e:	d4b0      	bmi.n	8007cc2 <_dtoa_r+0xa8a>
 8007d60:	4633      	mov	r3, r6
 8007d62:	461e      	mov	r6, r3
 8007d64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d68:	2a30      	cmp	r2, #48	@ 0x30
 8007d6a:	d0fa      	beq.n	8007d62 <_dtoa_r+0xb2a>
 8007d6c:	e4b5      	b.n	80076da <_dtoa_r+0x4a2>
 8007d6e:	459a      	cmp	sl, r3
 8007d70:	d1a8      	bne.n	8007cc4 <_dtoa_r+0xa8c>
 8007d72:	2331      	movs	r3, #49	@ 0x31
 8007d74:	f108 0801 	add.w	r8, r8, #1
 8007d78:	f88a 3000 	strb.w	r3, [sl]
 8007d7c:	e4ad      	b.n	80076da <_dtoa_r+0x4a2>
 8007d7e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007ddc <_dtoa_r+0xba4>
 8007d84:	b11b      	cbz	r3, 8007d8e <_dtoa_r+0xb56>
 8007d86:	f10a 0308 	add.w	r3, sl, #8
 8007d8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	4650      	mov	r0, sl
 8007d90:	b017      	add	sp, #92	@ 0x5c
 8007d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	f77f ae2e 	ble.w	80079fa <_dtoa_r+0x7c2>
 8007d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007da0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da2:	2001      	movs	r0, #1
 8007da4:	e64d      	b.n	8007a42 <_dtoa_r+0x80a>
 8007da6:	f1bb 0f00 	cmp.w	fp, #0
 8007daa:	f77f aed9 	ble.w	8007b60 <_dtoa_r+0x928>
 8007dae:	4656      	mov	r6, sl
 8007db0:	4621      	mov	r1, r4
 8007db2:	9803      	ldr	r0, [sp, #12]
 8007db4:	f7ff f9b5 	bl	8007122 <quorem>
 8007db8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007dbc:	f806 3b01 	strb.w	r3, [r6], #1
 8007dc0:	eba6 020a 	sub.w	r2, r6, sl
 8007dc4:	4593      	cmp	fp, r2
 8007dc6:	ddb4      	ble.n	8007d32 <_dtoa_r+0xafa>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	220a      	movs	r2, #10
 8007dcc:	4648      	mov	r0, r9
 8007dce:	9903      	ldr	r1, [sp, #12]
 8007dd0:	f000 f966 	bl	80080a0 <__multadd>
 8007dd4:	9003      	str	r0, [sp, #12]
 8007dd6:	e7eb      	b.n	8007db0 <_dtoa_r+0xb78>
 8007dd8:	08009312 	.word	0x08009312
 8007ddc:	08009296 	.word	0x08009296

08007de0 <_free_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4605      	mov	r5, r0
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d040      	beq.n	8007e6a <_free_r+0x8a>
 8007de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dec:	1f0c      	subs	r4, r1, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfb8      	it	lt
 8007df2:	18e4      	addlt	r4, r4, r3
 8007df4:	f000 f8e6 	bl	8007fc4 <__malloc_lock>
 8007df8:	4a1c      	ldr	r2, [pc, #112]	@ (8007e6c <_free_r+0x8c>)
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	b933      	cbnz	r3, 8007e0c <_free_r+0x2c>
 8007dfe:	6063      	str	r3, [r4, #4]
 8007e00:	6014      	str	r4, [r2, #0]
 8007e02:	4628      	mov	r0, r5
 8007e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e08:	f000 b8e2 	b.w	8007fd0 <__malloc_unlock>
 8007e0c:	42a3      	cmp	r3, r4
 8007e0e:	d908      	bls.n	8007e22 <_free_r+0x42>
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	1821      	adds	r1, r4, r0
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf01      	itttt	eq
 8007e18:	6819      	ldreq	r1, [r3, #0]
 8007e1a:	685b      	ldreq	r3, [r3, #4]
 8007e1c:	1809      	addeq	r1, r1, r0
 8007e1e:	6021      	streq	r1, [r4, #0]
 8007e20:	e7ed      	b.n	8007dfe <_free_r+0x1e>
 8007e22:	461a      	mov	r2, r3
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	b10b      	cbz	r3, 8007e2c <_free_r+0x4c>
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	d9fa      	bls.n	8007e22 <_free_r+0x42>
 8007e2c:	6811      	ldr	r1, [r2, #0]
 8007e2e:	1850      	adds	r0, r2, r1
 8007e30:	42a0      	cmp	r0, r4
 8007e32:	d10b      	bne.n	8007e4c <_free_r+0x6c>
 8007e34:	6820      	ldr	r0, [r4, #0]
 8007e36:	4401      	add	r1, r0
 8007e38:	1850      	adds	r0, r2, r1
 8007e3a:	4283      	cmp	r3, r0
 8007e3c:	6011      	str	r1, [r2, #0]
 8007e3e:	d1e0      	bne.n	8007e02 <_free_r+0x22>
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4408      	add	r0, r1
 8007e46:	6010      	str	r0, [r2, #0]
 8007e48:	6053      	str	r3, [r2, #4]
 8007e4a:	e7da      	b.n	8007e02 <_free_r+0x22>
 8007e4c:	d902      	bls.n	8007e54 <_free_r+0x74>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	602b      	str	r3, [r5, #0]
 8007e52:	e7d6      	b.n	8007e02 <_free_r+0x22>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	1821      	adds	r1, r4, r0
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf01      	itttt	eq
 8007e5c:	6819      	ldreq	r1, [r3, #0]
 8007e5e:	685b      	ldreq	r3, [r3, #4]
 8007e60:	1809      	addeq	r1, r1, r0
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	6054      	str	r4, [r2, #4]
 8007e68:	e7cb      	b.n	8007e02 <_free_r+0x22>
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	2000050c 	.word	0x2000050c

08007e70 <malloc>:
 8007e70:	4b02      	ldr	r3, [pc, #8]	@ (8007e7c <malloc+0xc>)
 8007e72:	4601      	mov	r1, r0
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f000 b825 	b.w	8007ec4 <_malloc_r>
 8007e7a:	bf00      	nop
 8007e7c:	20000018 	.word	0x20000018

08007e80 <sbrk_aligned>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	4e0f      	ldr	r6, [pc, #60]	@ (8007ec0 <sbrk_aligned+0x40>)
 8007e84:	460c      	mov	r4, r1
 8007e86:	6831      	ldr	r1, [r6, #0]
 8007e88:	4605      	mov	r5, r0
 8007e8a:	b911      	cbnz	r1, 8007e92 <sbrk_aligned+0x12>
 8007e8c:	f000 fe3a 	bl	8008b04 <_sbrk_r>
 8007e90:	6030      	str	r0, [r6, #0]
 8007e92:	4621      	mov	r1, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	f000 fe35 	bl	8008b04 <_sbrk_r>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	d103      	bne.n	8007ea6 <sbrk_aligned+0x26>
 8007e9e:	f04f 34ff 	mov.w	r4, #4294967295
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	1cc4      	adds	r4, r0, #3
 8007ea8:	f024 0403 	bic.w	r4, r4, #3
 8007eac:	42a0      	cmp	r0, r4
 8007eae:	d0f8      	beq.n	8007ea2 <sbrk_aligned+0x22>
 8007eb0:	1a21      	subs	r1, r4, r0
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 fe26 	bl	8008b04 <_sbrk_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d1f2      	bne.n	8007ea2 <sbrk_aligned+0x22>
 8007ebc:	e7ef      	b.n	8007e9e <sbrk_aligned+0x1e>
 8007ebe:	bf00      	nop
 8007ec0:	20000508 	.word	0x20000508

08007ec4 <_malloc_r>:
 8007ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	1ccd      	adds	r5, r1, #3
 8007eca:	f025 0503 	bic.w	r5, r5, #3
 8007ece:	3508      	adds	r5, #8
 8007ed0:	2d0c      	cmp	r5, #12
 8007ed2:	bf38      	it	cc
 8007ed4:	250c      	movcc	r5, #12
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	4606      	mov	r6, r0
 8007eda:	db01      	blt.n	8007ee0 <_malloc_r+0x1c>
 8007edc:	42a9      	cmp	r1, r5
 8007ede:	d904      	bls.n	8007eea <_malloc_r+0x26>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	6033      	str	r3, [r6, #0]
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fc0 <_malloc_r+0xfc>
 8007eee:	f000 f869 	bl	8007fc4 <__malloc_lock>
 8007ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef6:	461c      	mov	r4, r3
 8007ef8:	bb44      	cbnz	r4, 8007f4c <_malloc_r+0x88>
 8007efa:	4629      	mov	r1, r5
 8007efc:	4630      	mov	r0, r6
 8007efe:	f7ff ffbf 	bl	8007e80 <sbrk_aligned>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	4604      	mov	r4, r0
 8007f06:	d158      	bne.n	8007fba <_malloc_r+0xf6>
 8007f08:	f8d8 4000 	ldr.w	r4, [r8]
 8007f0c:	4627      	mov	r7, r4
 8007f0e:	2f00      	cmp	r7, #0
 8007f10:	d143      	bne.n	8007f9a <_malloc_r+0xd6>
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	d04b      	beq.n	8007fae <_malloc_r+0xea>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	4639      	mov	r1, r7
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	eb04 0903 	add.w	r9, r4, r3
 8007f20:	f000 fdf0 	bl	8008b04 <_sbrk_r>
 8007f24:	4581      	cmp	r9, r0
 8007f26:	d142      	bne.n	8007fae <_malloc_r+0xea>
 8007f28:	6821      	ldr	r1, [r4, #0]
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	1a6d      	subs	r5, r5, r1
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7ff ffa6 	bl	8007e80 <sbrk_aligned>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d03a      	beq.n	8007fae <_malloc_r+0xea>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	442b      	add	r3, r5
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	bb62      	cbnz	r2, 8007fa0 <_malloc_r+0xdc>
 8007f46:	f8c8 7000 	str.w	r7, [r8]
 8007f4a:	e00f      	b.n	8007f6c <_malloc_r+0xa8>
 8007f4c:	6822      	ldr	r2, [r4, #0]
 8007f4e:	1b52      	subs	r2, r2, r5
 8007f50:	d420      	bmi.n	8007f94 <_malloc_r+0xd0>
 8007f52:	2a0b      	cmp	r2, #11
 8007f54:	d917      	bls.n	8007f86 <_malloc_r+0xc2>
 8007f56:	1961      	adds	r1, r4, r5
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	6025      	str	r5, [r4, #0]
 8007f5c:	bf18      	it	ne
 8007f5e:	6059      	strne	r1, [r3, #4]
 8007f60:	6863      	ldr	r3, [r4, #4]
 8007f62:	bf08      	it	eq
 8007f64:	f8c8 1000 	streq.w	r1, [r8]
 8007f68:	5162      	str	r2, [r4, r5]
 8007f6a:	604b      	str	r3, [r1, #4]
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 f82f 	bl	8007fd0 <__malloc_unlock>
 8007f72:	f104 000b 	add.w	r0, r4, #11
 8007f76:	1d23      	adds	r3, r4, #4
 8007f78:	f020 0007 	bic.w	r0, r0, #7
 8007f7c:	1ac2      	subs	r2, r0, r3
 8007f7e:	bf1c      	itt	ne
 8007f80:	1a1b      	subne	r3, r3, r0
 8007f82:	50a3      	strne	r3, [r4, r2]
 8007f84:	e7af      	b.n	8007ee6 <_malloc_r+0x22>
 8007f86:	6862      	ldr	r2, [r4, #4]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	bf0c      	ite	eq
 8007f8c:	f8c8 2000 	streq.w	r2, [r8]
 8007f90:	605a      	strne	r2, [r3, #4]
 8007f92:	e7eb      	b.n	8007f6c <_malloc_r+0xa8>
 8007f94:	4623      	mov	r3, r4
 8007f96:	6864      	ldr	r4, [r4, #4]
 8007f98:	e7ae      	b.n	8007ef8 <_malloc_r+0x34>
 8007f9a:	463c      	mov	r4, r7
 8007f9c:	687f      	ldr	r7, [r7, #4]
 8007f9e:	e7b6      	b.n	8007f0e <_malloc_r+0x4a>
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d1fb      	bne.n	8007fa0 <_malloc_r+0xdc>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6053      	str	r3, [r2, #4]
 8007fac:	e7de      	b.n	8007f6c <_malloc_r+0xa8>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	6033      	str	r3, [r6, #0]
 8007fb4:	f000 f80c 	bl	8007fd0 <__malloc_unlock>
 8007fb8:	e794      	b.n	8007ee4 <_malloc_r+0x20>
 8007fba:	6005      	str	r5, [r0, #0]
 8007fbc:	e7d6      	b.n	8007f6c <_malloc_r+0xa8>
 8007fbe:	bf00      	nop
 8007fc0:	2000050c 	.word	0x2000050c

08007fc4 <__malloc_lock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	@ (8007fcc <__malloc_lock+0x8>)
 8007fc6:	f7ff b89c 	b.w	8007102 <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	20000504 	.word	0x20000504

08007fd0 <__malloc_unlock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	@ (8007fd8 <__malloc_unlock+0x8>)
 8007fd2:	f7ff b897 	b.w	8007104 <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	20000504 	.word	0x20000504

08007fdc <_Balloc>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	69c6      	ldr	r6, [r0, #28]
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	b976      	cbnz	r6, 8008004 <_Balloc+0x28>
 8007fe6:	2010      	movs	r0, #16
 8007fe8:	f7ff ff42 	bl	8007e70 <malloc>
 8007fec:	4602      	mov	r2, r0
 8007fee:	61e0      	str	r0, [r4, #28]
 8007ff0:	b920      	cbnz	r0, 8007ffc <_Balloc+0x20>
 8007ff2:	216b      	movs	r1, #107	@ 0x6b
 8007ff4:	4b17      	ldr	r3, [pc, #92]	@ (8008054 <_Balloc+0x78>)
 8007ff6:	4818      	ldr	r0, [pc, #96]	@ (8008058 <_Balloc+0x7c>)
 8007ff8:	f000 fda2 	bl	8008b40 <__assert_func>
 8007ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008000:	6006      	str	r6, [r0, #0]
 8008002:	60c6      	str	r6, [r0, #12]
 8008004:	69e6      	ldr	r6, [r4, #28]
 8008006:	68f3      	ldr	r3, [r6, #12]
 8008008:	b183      	cbz	r3, 800802c <_Balloc+0x50>
 800800a:	69e3      	ldr	r3, [r4, #28]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008012:	b9b8      	cbnz	r0, 8008044 <_Balloc+0x68>
 8008014:	2101      	movs	r1, #1
 8008016:	fa01 f605 	lsl.w	r6, r1, r5
 800801a:	1d72      	adds	r2, r6, #5
 800801c:	4620      	mov	r0, r4
 800801e:	0092      	lsls	r2, r2, #2
 8008020:	f000 fdac 	bl	8008b7c <_calloc_r>
 8008024:	b160      	cbz	r0, 8008040 <_Balloc+0x64>
 8008026:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800802a:	e00e      	b.n	800804a <_Balloc+0x6e>
 800802c:	2221      	movs	r2, #33	@ 0x21
 800802e:	2104      	movs	r1, #4
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fda3 	bl	8008b7c <_calloc_r>
 8008036:	69e3      	ldr	r3, [r4, #28]
 8008038:	60f0      	str	r0, [r6, #12]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e4      	bne.n	800800a <_Balloc+0x2e>
 8008040:	2000      	movs	r0, #0
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	6802      	ldr	r2, [r0, #0]
 8008046:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800804a:	2300      	movs	r3, #0
 800804c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008050:	e7f7      	b.n	8008042 <_Balloc+0x66>
 8008052:	bf00      	nop
 8008054:	080092a3 	.word	0x080092a3
 8008058:	08009323 	.word	0x08009323

0800805c <_Bfree>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	69c6      	ldr	r6, [r0, #28]
 8008060:	4605      	mov	r5, r0
 8008062:	460c      	mov	r4, r1
 8008064:	b976      	cbnz	r6, 8008084 <_Bfree+0x28>
 8008066:	2010      	movs	r0, #16
 8008068:	f7ff ff02 	bl	8007e70 <malloc>
 800806c:	4602      	mov	r2, r0
 800806e:	61e8      	str	r0, [r5, #28]
 8008070:	b920      	cbnz	r0, 800807c <_Bfree+0x20>
 8008072:	218f      	movs	r1, #143	@ 0x8f
 8008074:	4b08      	ldr	r3, [pc, #32]	@ (8008098 <_Bfree+0x3c>)
 8008076:	4809      	ldr	r0, [pc, #36]	@ (800809c <_Bfree+0x40>)
 8008078:	f000 fd62 	bl	8008b40 <__assert_func>
 800807c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008080:	6006      	str	r6, [r0, #0]
 8008082:	60c6      	str	r6, [r0, #12]
 8008084:	b13c      	cbz	r4, 8008096 <_Bfree+0x3a>
 8008086:	69eb      	ldr	r3, [r5, #28]
 8008088:	6862      	ldr	r2, [r4, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008090:	6021      	str	r1, [r4, #0]
 8008092:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	080092a3 	.word	0x080092a3
 800809c:	08009323 	.word	0x08009323

080080a0 <__multadd>:
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	4607      	mov	r7, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	461e      	mov	r6, r3
 80080aa:	2000      	movs	r0, #0
 80080ac:	690d      	ldr	r5, [r1, #16]
 80080ae:	f101 0c14 	add.w	ip, r1, #20
 80080b2:	f8dc 3000 	ldr.w	r3, [ip]
 80080b6:	3001      	adds	r0, #1
 80080b8:	b299      	uxth	r1, r3
 80080ba:	fb02 6101 	mla	r1, r2, r1, r6
 80080be:	0c1e      	lsrs	r6, r3, #16
 80080c0:	0c0b      	lsrs	r3, r1, #16
 80080c2:	fb02 3306 	mla	r3, r2, r6, r3
 80080c6:	b289      	uxth	r1, r1
 80080c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080cc:	4285      	cmp	r5, r0
 80080ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080d2:	f84c 1b04 	str.w	r1, [ip], #4
 80080d6:	dcec      	bgt.n	80080b2 <__multadd+0x12>
 80080d8:	b30e      	cbz	r6, 800811e <__multadd+0x7e>
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dc19      	bgt.n	8008114 <__multadd+0x74>
 80080e0:	6861      	ldr	r1, [r4, #4]
 80080e2:	4638      	mov	r0, r7
 80080e4:	3101      	adds	r1, #1
 80080e6:	f7ff ff79 	bl	8007fdc <_Balloc>
 80080ea:	4680      	mov	r8, r0
 80080ec:	b928      	cbnz	r0, 80080fa <__multadd+0x5a>
 80080ee:	4602      	mov	r2, r0
 80080f0:	21ba      	movs	r1, #186	@ 0xba
 80080f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008124 <__multadd+0x84>)
 80080f4:	480c      	ldr	r0, [pc, #48]	@ (8008128 <__multadd+0x88>)
 80080f6:	f000 fd23 	bl	8008b40 <__assert_func>
 80080fa:	6922      	ldr	r2, [r4, #16]
 80080fc:	f104 010c 	add.w	r1, r4, #12
 8008100:	3202      	adds	r2, #2
 8008102:	0092      	lsls	r2, r2, #2
 8008104:	300c      	adds	r0, #12
 8008106:	f000 fd0d 	bl	8008b24 <memcpy>
 800810a:	4621      	mov	r1, r4
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff ffa5 	bl	800805c <_Bfree>
 8008112:	4644      	mov	r4, r8
 8008114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008118:	3501      	adds	r5, #1
 800811a:	615e      	str	r6, [r3, #20]
 800811c:	6125      	str	r5, [r4, #16]
 800811e:	4620      	mov	r0, r4
 8008120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008124:	08009312 	.word	0x08009312
 8008128:	08009323 	.word	0x08009323

0800812c <__hi0bits>:
 800812c:	4603      	mov	r3, r0
 800812e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008132:	bf3a      	itte	cc
 8008134:	0403      	lslcc	r3, r0, #16
 8008136:	2010      	movcc	r0, #16
 8008138:	2000      	movcs	r0, #0
 800813a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800813e:	bf3c      	itt	cc
 8008140:	021b      	lslcc	r3, r3, #8
 8008142:	3008      	addcc	r0, #8
 8008144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008148:	bf3c      	itt	cc
 800814a:	011b      	lslcc	r3, r3, #4
 800814c:	3004      	addcc	r0, #4
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008152:	bf3c      	itt	cc
 8008154:	009b      	lslcc	r3, r3, #2
 8008156:	3002      	addcc	r0, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	db05      	blt.n	8008168 <__hi0bits+0x3c>
 800815c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008160:	f100 0001 	add.w	r0, r0, #1
 8008164:	bf08      	it	eq
 8008166:	2020      	moveq	r0, #32
 8008168:	4770      	bx	lr

0800816a <__lo0bits>:
 800816a:	6803      	ldr	r3, [r0, #0]
 800816c:	4602      	mov	r2, r0
 800816e:	f013 0007 	ands.w	r0, r3, #7
 8008172:	d00b      	beq.n	800818c <__lo0bits+0x22>
 8008174:	07d9      	lsls	r1, r3, #31
 8008176:	d421      	bmi.n	80081bc <__lo0bits+0x52>
 8008178:	0798      	lsls	r0, r3, #30
 800817a:	bf49      	itett	mi
 800817c:	085b      	lsrmi	r3, r3, #1
 800817e:	089b      	lsrpl	r3, r3, #2
 8008180:	2001      	movmi	r0, #1
 8008182:	6013      	strmi	r3, [r2, #0]
 8008184:	bf5c      	itt	pl
 8008186:	2002      	movpl	r0, #2
 8008188:	6013      	strpl	r3, [r2, #0]
 800818a:	4770      	bx	lr
 800818c:	b299      	uxth	r1, r3
 800818e:	b909      	cbnz	r1, 8008194 <__lo0bits+0x2a>
 8008190:	2010      	movs	r0, #16
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	b2d9      	uxtb	r1, r3
 8008196:	b909      	cbnz	r1, 800819c <__lo0bits+0x32>
 8008198:	3008      	adds	r0, #8
 800819a:	0a1b      	lsrs	r3, r3, #8
 800819c:	0719      	lsls	r1, r3, #28
 800819e:	bf04      	itt	eq
 80081a0:	091b      	lsreq	r3, r3, #4
 80081a2:	3004      	addeq	r0, #4
 80081a4:	0799      	lsls	r1, r3, #30
 80081a6:	bf04      	itt	eq
 80081a8:	089b      	lsreq	r3, r3, #2
 80081aa:	3002      	addeq	r0, #2
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d403      	bmi.n	80081b8 <__lo0bits+0x4e>
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	f100 0001 	add.w	r0, r0, #1
 80081b6:	d003      	beq.n	80081c0 <__lo0bits+0x56>
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4770      	bx	lr
 80081bc:	2000      	movs	r0, #0
 80081be:	4770      	bx	lr
 80081c0:	2020      	movs	r0, #32
 80081c2:	4770      	bx	lr

080081c4 <__i2b>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	460c      	mov	r4, r1
 80081c8:	2101      	movs	r1, #1
 80081ca:	f7ff ff07 	bl	8007fdc <_Balloc>
 80081ce:	4602      	mov	r2, r0
 80081d0:	b928      	cbnz	r0, 80081de <__i2b+0x1a>
 80081d2:	f240 1145 	movw	r1, #325	@ 0x145
 80081d6:	4b04      	ldr	r3, [pc, #16]	@ (80081e8 <__i2b+0x24>)
 80081d8:	4804      	ldr	r0, [pc, #16]	@ (80081ec <__i2b+0x28>)
 80081da:	f000 fcb1 	bl	8008b40 <__assert_func>
 80081de:	2301      	movs	r3, #1
 80081e0:	6144      	str	r4, [r0, #20]
 80081e2:	6103      	str	r3, [r0, #16]
 80081e4:	bd10      	pop	{r4, pc}
 80081e6:	bf00      	nop
 80081e8:	08009312 	.word	0x08009312
 80081ec:	08009323 	.word	0x08009323

080081f0 <__multiply>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	4617      	mov	r7, r2
 80081f6:	690a      	ldr	r2, [r1, #16]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	4689      	mov	r9, r1
 80081fc:	429a      	cmp	r2, r3
 80081fe:	bfa2      	ittt	ge
 8008200:	463b      	movge	r3, r7
 8008202:	460f      	movge	r7, r1
 8008204:	4699      	movge	r9, r3
 8008206:	693d      	ldr	r5, [r7, #16]
 8008208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	eb05 060a 	add.w	r6, r5, sl
 8008214:	42b3      	cmp	r3, r6
 8008216:	b085      	sub	sp, #20
 8008218:	bfb8      	it	lt
 800821a:	3101      	addlt	r1, #1
 800821c:	f7ff fede 	bl	8007fdc <_Balloc>
 8008220:	b930      	cbnz	r0, 8008230 <__multiply+0x40>
 8008222:	4602      	mov	r2, r0
 8008224:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008228:	4b40      	ldr	r3, [pc, #256]	@ (800832c <__multiply+0x13c>)
 800822a:	4841      	ldr	r0, [pc, #260]	@ (8008330 <__multiply+0x140>)
 800822c:	f000 fc88 	bl	8008b40 <__assert_func>
 8008230:	f100 0414 	add.w	r4, r0, #20
 8008234:	4623      	mov	r3, r4
 8008236:	2200      	movs	r2, #0
 8008238:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800823c:	4573      	cmp	r3, lr
 800823e:	d320      	bcc.n	8008282 <__multiply+0x92>
 8008240:	f107 0814 	add.w	r8, r7, #20
 8008244:	f109 0114 	add.w	r1, r9, #20
 8008248:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800824c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008250:	9302      	str	r3, [sp, #8]
 8008252:	1beb      	subs	r3, r5, r7
 8008254:	3b15      	subs	r3, #21
 8008256:	f023 0303 	bic.w	r3, r3, #3
 800825a:	3304      	adds	r3, #4
 800825c:	3715      	adds	r7, #21
 800825e:	42bd      	cmp	r5, r7
 8008260:	bf38      	it	cc
 8008262:	2304      	movcc	r3, #4
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	9103      	str	r1, [sp, #12]
 800826a:	428b      	cmp	r3, r1
 800826c:	d80c      	bhi.n	8008288 <__multiply+0x98>
 800826e:	2e00      	cmp	r6, #0
 8008270:	dd03      	ble.n	800827a <__multiply+0x8a>
 8008272:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008276:	2b00      	cmp	r3, #0
 8008278:	d055      	beq.n	8008326 <__multiply+0x136>
 800827a:	6106      	str	r6, [r0, #16]
 800827c:	b005      	add	sp, #20
 800827e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008282:	f843 2b04 	str.w	r2, [r3], #4
 8008286:	e7d9      	b.n	800823c <__multiply+0x4c>
 8008288:	f8b1 a000 	ldrh.w	sl, [r1]
 800828c:	f1ba 0f00 	cmp.w	sl, #0
 8008290:	d01f      	beq.n	80082d2 <__multiply+0xe2>
 8008292:	46c4      	mov	ip, r8
 8008294:	46a1      	mov	r9, r4
 8008296:	2700      	movs	r7, #0
 8008298:	f85c 2b04 	ldr.w	r2, [ip], #4
 800829c:	f8d9 3000 	ldr.w	r3, [r9]
 80082a0:	fa1f fb82 	uxth.w	fp, r2
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80082aa:	443b      	add	r3, r7
 80082ac:	f8d9 7000 	ldr.w	r7, [r9]
 80082b0:	0c12      	lsrs	r2, r2, #16
 80082b2:	0c3f      	lsrs	r7, r7, #16
 80082b4:	fb0a 7202 	mla	r2, sl, r2, r7
 80082b8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082bc:	b29b      	uxth	r3, r3
 80082be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c2:	4565      	cmp	r5, ip
 80082c4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082c8:	f849 3b04 	str.w	r3, [r9], #4
 80082cc:	d8e4      	bhi.n	8008298 <__multiply+0xa8>
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	50e7      	str	r7, [r4, r3]
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	3104      	adds	r1, #4
 80082d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082da:	f1b9 0f00 	cmp.w	r9, #0
 80082de:	d020      	beq.n	8008322 <__multiply+0x132>
 80082e0:	4647      	mov	r7, r8
 80082e2:	46a4      	mov	ip, r4
 80082e4:	f04f 0a00 	mov.w	sl, #0
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	f8b7 b000 	ldrh.w	fp, [r7]
 80082ee:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	fb09 220b 	mla	r2, r9, fp, r2
 80082f8:	4452      	add	r2, sl
 80082fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082fe:	f84c 3b04 	str.w	r3, [ip], #4
 8008302:	f857 3b04 	ldr.w	r3, [r7], #4
 8008306:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800830a:	f8bc 3000 	ldrh.w	r3, [ip]
 800830e:	42bd      	cmp	r5, r7
 8008310:	fb09 330a 	mla	r3, r9, sl, r3
 8008314:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008318:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800831c:	d8e5      	bhi.n	80082ea <__multiply+0xfa>
 800831e:	9a01      	ldr	r2, [sp, #4]
 8008320:	50a3      	str	r3, [r4, r2]
 8008322:	3404      	adds	r4, #4
 8008324:	e79f      	b.n	8008266 <__multiply+0x76>
 8008326:	3e01      	subs	r6, #1
 8008328:	e7a1      	b.n	800826e <__multiply+0x7e>
 800832a:	bf00      	nop
 800832c:	08009312 	.word	0x08009312
 8008330:	08009323 	.word	0x08009323

08008334 <__pow5mult>:
 8008334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008338:	4615      	mov	r5, r2
 800833a:	f012 0203 	ands.w	r2, r2, #3
 800833e:	4607      	mov	r7, r0
 8008340:	460e      	mov	r6, r1
 8008342:	d007      	beq.n	8008354 <__pow5mult+0x20>
 8008344:	4c25      	ldr	r4, [pc, #148]	@ (80083dc <__pow5mult+0xa8>)
 8008346:	3a01      	subs	r2, #1
 8008348:	2300      	movs	r3, #0
 800834a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800834e:	f7ff fea7 	bl	80080a0 <__multadd>
 8008352:	4606      	mov	r6, r0
 8008354:	10ad      	asrs	r5, r5, #2
 8008356:	d03d      	beq.n	80083d4 <__pow5mult+0xa0>
 8008358:	69fc      	ldr	r4, [r7, #28]
 800835a:	b97c      	cbnz	r4, 800837c <__pow5mult+0x48>
 800835c:	2010      	movs	r0, #16
 800835e:	f7ff fd87 	bl	8007e70 <malloc>
 8008362:	4602      	mov	r2, r0
 8008364:	61f8      	str	r0, [r7, #28]
 8008366:	b928      	cbnz	r0, 8008374 <__pow5mult+0x40>
 8008368:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800836c:	4b1c      	ldr	r3, [pc, #112]	@ (80083e0 <__pow5mult+0xac>)
 800836e:	481d      	ldr	r0, [pc, #116]	@ (80083e4 <__pow5mult+0xb0>)
 8008370:	f000 fbe6 	bl	8008b40 <__assert_func>
 8008374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008378:	6004      	str	r4, [r0, #0]
 800837a:	60c4      	str	r4, [r0, #12]
 800837c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008384:	b94c      	cbnz	r4, 800839a <__pow5mult+0x66>
 8008386:	f240 2171 	movw	r1, #625	@ 0x271
 800838a:	4638      	mov	r0, r7
 800838c:	f7ff ff1a 	bl	80081c4 <__i2b>
 8008390:	2300      	movs	r3, #0
 8008392:	4604      	mov	r4, r0
 8008394:	f8c8 0008 	str.w	r0, [r8, #8]
 8008398:	6003      	str	r3, [r0, #0]
 800839a:	f04f 0900 	mov.w	r9, #0
 800839e:	07eb      	lsls	r3, r5, #31
 80083a0:	d50a      	bpl.n	80083b8 <__pow5mult+0x84>
 80083a2:	4631      	mov	r1, r6
 80083a4:	4622      	mov	r2, r4
 80083a6:	4638      	mov	r0, r7
 80083a8:	f7ff ff22 	bl	80081f0 <__multiply>
 80083ac:	4680      	mov	r8, r0
 80083ae:	4631      	mov	r1, r6
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff fe53 	bl	800805c <_Bfree>
 80083b6:	4646      	mov	r6, r8
 80083b8:	106d      	asrs	r5, r5, #1
 80083ba:	d00b      	beq.n	80083d4 <__pow5mult+0xa0>
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	b938      	cbnz	r0, 80083d0 <__pow5mult+0x9c>
 80083c0:	4622      	mov	r2, r4
 80083c2:	4621      	mov	r1, r4
 80083c4:	4638      	mov	r0, r7
 80083c6:	f7ff ff13 	bl	80081f0 <__multiply>
 80083ca:	6020      	str	r0, [r4, #0]
 80083cc:	f8c0 9000 	str.w	r9, [r0]
 80083d0:	4604      	mov	r4, r0
 80083d2:	e7e4      	b.n	800839e <__pow5mult+0x6a>
 80083d4:	4630      	mov	r0, r6
 80083d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083da:	bf00      	nop
 80083dc:	080093d4 	.word	0x080093d4
 80083e0:	080092a3 	.word	0x080092a3
 80083e4:	08009323 	.word	0x08009323

080083e8 <__lshift>:
 80083e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	460c      	mov	r4, r1
 80083ee:	4607      	mov	r7, r0
 80083f0:	4691      	mov	r9, r2
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	6849      	ldr	r1, [r1, #4]
 80083f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083fa:	68a3      	ldr	r3, [r4, #8]
 80083fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008400:	f108 0601 	add.w	r6, r8, #1
 8008404:	42b3      	cmp	r3, r6
 8008406:	db0b      	blt.n	8008420 <__lshift+0x38>
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff fde7 	bl	8007fdc <_Balloc>
 800840e:	4605      	mov	r5, r0
 8008410:	b948      	cbnz	r0, 8008426 <__lshift+0x3e>
 8008412:	4602      	mov	r2, r0
 8008414:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008418:	4b27      	ldr	r3, [pc, #156]	@ (80084b8 <__lshift+0xd0>)
 800841a:	4828      	ldr	r0, [pc, #160]	@ (80084bc <__lshift+0xd4>)
 800841c:	f000 fb90 	bl	8008b40 <__assert_func>
 8008420:	3101      	adds	r1, #1
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	e7ee      	b.n	8008404 <__lshift+0x1c>
 8008426:	2300      	movs	r3, #0
 8008428:	f100 0114 	add.w	r1, r0, #20
 800842c:	f100 0210 	add.w	r2, r0, #16
 8008430:	4618      	mov	r0, r3
 8008432:	4553      	cmp	r3, sl
 8008434:	db33      	blt.n	800849e <__lshift+0xb6>
 8008436:	6920      	ldr	r0, [r4, #16]
 8008438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800843c:	f104 0314 	add.w	r3, r4, #20
 8008440:	f019 091f 	ands.w	r9, r9, #31
 8008444:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008448:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800844c:	d02b      	beq.n	80084a6 <__lshift+0xbe>
 800844e:	468a      	mov	sl, r1
 8008450:	2200      	movs	r2, #0
 8008452:	f1c9 0e20 	rsb	lr, r9, #32
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	fa00 f009 	lsl.w	r0, r0, r9
 800845c:	4310      	orrs	r0, r2
 800845e:	f84a 0b04 	str.w	r0, [sl], #4
 8008462:	f853 2b04 	ldr.w	r2, [r3], #4
 8008466:	459c      	cmp	ip, r3
 8008468:	fa22 f20e 	lsr.w	r2, r2, lr
 800846c:	d8f3      	bhi.n	8008456 <__lshift+0x6e>
 800846e:	ebac 0304 	sub.w	r3, ip, r4
 8008472:	3b15      	subs	r3, #21
 8008474:	f023 0303 	bic.w	r3, r3, #3
 8008478:	3304      	adds	r3, #4
 800847a:	f104 0015 	add.w	r0, r4, #21
 800847e:	4560      	cmp	r0, ip
 8008480:	bf88      	it	hi
 8008482:	2304      	movhi	r3, #4
 8008484:	50ca      	str	r2, [r1, r3]
 8008486:	b10a      	cbz	r2, 800848c <__lshift+0xa4>
 8008488:	f108 0602 	add.w	r6, r8, #2
 800848c:	3e01      	subs	r6, #1
 800848e:	4638      	mov	r0, r7
 8008490:	4621      	mov	r1, r4
 8008492:	612e      	str	r6, [r5, #16]
 8008494:	f7ff fde2 	bl	800805c <_Bfree>
 8008498:	4628      	mov	r0, r5
 800849a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849e:	f842 0f04 	str.w	r0, [r2, #4]!
 80084a2:	3301      	adds	r3, #1
 80084a4:	e7c5      	b.n	8008432 <__lshift+0x4a>
 80084a6:	3904      	subs	r1, #4
 80084a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ac:	459c      	cmp	ip, r3
 80084ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80084b2:	d8f9      	bhi.n	80084a8 <__lshift+0xc0>
 80084b4:	e7ea      	b.n	800848c <__lshift+0xa4>
 80084b6:	bf00      	nop
 80084b8:	08009312 	.word	0x08009312
 80084bc:	08009323 	.word	0x08009323

080084c0 <__mcmp>:
 80084c0:	4603      	mov	r3, r0
 80084c2:	690a      	ldr	r2, [r1, #16]
 80084c4:	6900      	ldr	r0, [r0, #16]
 80084c6:	b530      	push	{r4, r5, lr}
 80084c8:	1a80      	subs	r0, r0, r2
 80084ca:	d10e      	bne.n	80084ea <__mcmp+0x2a>
 80084cc:	3314      	adds	r3, #20
 80084ce:	3114      	adds	r1, #20
 80084d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084e0:	4295      	cmp	r5, r2
 80084e2:	d003      	beq.n	80084ec <__mcmp+0x2c>
 80084e4:	d205      	bcs.n	80084f2 <__mcmp+0x32>
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ea:	bd30      	pop	{r4, r5, pc}
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	d3f3      	bcc.n	80084d8 <__mcmp+0x18>
 80084f0:	e7fb      	b.n	80084ea <__mcmp+0x2a>
 80084f2:	2001      	movs	r0, #1
 80084f4:	e7f9      	b.n	80084ea <__mcmp+0x2a>
	...

080084f8 <__mdiff>:
 80084f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	4689      	mov	r9, r1
 80084fe:	4606      	mov	r6, r0
 8008500:	4611      	mov	r1, r2
 8008502:	4648      	mov	r0, r9
 8008504:	4614      	mov	r4, r2
 8008506:	f7ff ffdb 	bl	80084c0 <__mcmp>
 800850a:	1e05      	subs	r5, r0, #0
 800850c:	d112      	bne.n	8008534 <__mdiff+0x3c>
 800850e:	4629      	mov	r1, r5
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff fd63 	bl	8007fdc <_Balloc>
 8008516:	4602      	mov	r2, r0
 8008518:	b928      	cbnz	r0, 8008526 <__mdiff+0x2e>
 800851a:	f240 2137 	movw	r1, #567	@ 0x237
 800851e:	4b3e      	ldr	r3, [pc, #248]	@ (8008618 <__mdiff+0x120>)
 8008520:	483e      	ldr	r0, [pc, #248]	@ (800861c <__mdiff+0x124>)
 8008522:	f000 fb0d 	bl	8008b40 <__assert_func>
 8008526:	2301      	movs	r3, #1
 8008528:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800852c:	4610      	mov	r0, r2
 800852e:	b003      	add	sp, #12
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008534:	bfbc      	itt	lt
 8008536:	464b      	movlt	r3, r9
 8008538:	46a1      	movlt	r9, r4
 800853a:	4630      	mov	r0, r6
 800853c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008540:	bfba      	itte	lt
 8008542:	461c      	movlt	r4, r3
 8008544:	2501      	movlt	r5, #1
 8008546:	2500      	movge	r5, #0
 8008548:	f7ff fd48 	bl	8007fdc <_Balloc>
 800854c:	4602      	mov	r2, r0
 800854e:	b918      	cbnz	r0, 8008558 <__mdiff+0x60>
 8008550:	f240 2145 	movw	r1, #581	@ 0x245
 8008554:	4b30      	ldr	r3, [pc, #192]	@ (8008618 <__mdiff+0x120>)
 8008556:	e7e3      	b.n	8008520 <__mdiff+0x28>
 8008558:	f100 0b14 	add.w	fp, r0, #20
 800855c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008560:	f109 0310 	add.w	r3, r9, #16
 8008564:	60c5      	str	r5, [r0, #12]
 8008566:	f04f 0c00 	mov.w	ip, #0
 800856a:	f109 0514 	add.w	r5, r9, #20
 800856e:	46d9      	mov	r9, fp
 8008570:	6926      	ldr	r6, [r4, #16]
 8008572:	f104 0e14 	add.w	lr, r4, #20
 8008576:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800857a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	9b01      	ldr	r3, [sp, #4]
 8008582:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008586:	f853 af04 	ldr.w	sl, [r3, #4]!
 800858a:	b281      	uxth	r1, r0
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	fa1f f38a 	uxth.w	r3, sl
 8008592:	1a5b      	subs	r3, r3, r1
 8008594:	0c00      	lsrs	r0, r0, #16
 8008596:	4463      	add	r3, ip
 8008598:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800859c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085a6:	4576      	cmp	r6, lr
 80085a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085ac:	f849 3b04 	str.w	r3, [r9], #4
 80085b0:	d8e6      	bhi.n	8008580 <__mdiff+0x88>
 80085b2:	1b33      	subs	r3, r6, r4
 80085b4:	3b15      	subs	r3, #21
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	3415      	adds	r4, #21
 80085bc:	3304      	adds	r3, #4
 80085be:	42a6      	cmp	r6, r4
 80085c0:	bf38      	it	cc
 80085c2:	2304      	movcc	r3, #4
 80085c4:	441d      	add	r5, r3
 80085c6:	445b      	add	r3, fp
 80085c8:	461e      	mov	r6, r3
 80085ca:	462c      	mov	r4, r5
 80085cc:	4544      	cmp	r4, r8
 80085ce:	d30e      	bcc.n	80085ee <__mdiff+0xf6>
 80085d0:	f108 0103 	add.w	r1, r8, #3
 80085d4:	1b49      	subs	r1, r1, r5
 80085d6:	f021 0103 	bic.w	r1, r1, #3
 80085da:	3d03      	subs	r5, #3
 80085dc:	45a8      	cmp	r8, r5
 80085de:	bf38      	it	cc
 80085e0:	2100      	movcc	r1, #0
 80085e2:	440b      	add	r3, r1
 80085e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085e8:	b199      	cbz	r1, 8008612 <__mdiff+0x11a>
 80085ea:	6117      	str	r7, [r2, #16]
 80085ec:	e79e      	b.n	800852c <__mdiff+0x34>
 80085ee:	46e6      	mov	lr, ip
 80085f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80085f4:	fa1f fc81 	uxth.w	ip, r1
 80085f8:	44f4      	add	ip, lr
 80085fa:	0c08      	lsrs	r0, r1, #16
 80085fc:	4471      	add	r1, lr
 80085fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008602:	b289      	uxth	r1, r1
 8008604:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008608:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800860c:	f846 1b04 	str.w	r1, [r6], #4
 8008610:	e7dc      	b.n	80085cc <__mdiff+0xd4>
 8008612:	3f01      	subs	r7, #1
 8008614:	e7e6      	b.n	80085e4 <__mdiff+0xec>
 8008616:	bf00      	nop
 8008618:	08009312 	.word	0x08009312
 800861c:	08009323 	.word	0x08009323

08008620 <__d2b>:
 8008620:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008624:	2101      	movs	r1, #1
 8008626:	4690      	mov	r8, r2
 8008628:	4699      	mov	r9, r3
 800862a:	9e08      	ldr	r6, [sp, #32]
 800862c:	f7ff fcd6 	bl	8007fdc <_Balloc>
 8008630:	4604      	mov	r4, r0
 8008632:	b930      	cbnz	r0, 8008642 <__d2b+0x22>
 8008634:	4602      	mov	r2, r0
 8008636:	f240 310f 	movw	r1, #783	@ 0x30f
 800863a:	4b23      	ldr	r3, [pc, #140]	@ (80086c8 <__d2b+0xa8>)
 800863c:	4823      	ldr	r0, [pc, #140]	@ (80086cc <__d2b+0xac>)
 800863e:	f000 fa7f 	bl	8008b40 <__assert_func>
 8008642:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008646:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800864a:	b10d      	cbz	r5, 8008650 <__d2b+0x30>
 800864c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	f1b8 0300 	subs.w	r3, r8, #0
 8008656:	d024      	beq.n	80086a2 <__d2b+0x82>
 8008658:	4668      	mov	r0, sp
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	f7ff fd85 	bl	800816a <__lo0bits>
 8008660:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008664:	b1d8      	cbz	r0, 800869e <__d2b+0x7e>
 8008666:	f1c0 0320 	rsb	r3, r0, #32
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	430b      	orrs	r3, r1
 8008670:	40c2      	lsrs	r2, r0
 8008672:	6163      	str	r3, [r4, #20]
 8008674:	9201      	str	r2, [sp, #4]
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bf0c      	ite	eq
 800867c:	2201      	moveq	r2, #1
 800867e:	2202      	movne	r2, #2
 8008680:	61a3      	str	r3, [r4, #24]
 8008682:	6122      	str	r2, [r4, #16]
 8008684:	b1ad      	cbz	r5, 80086b2 <__d2b+0x92>
 8008686:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800868a:	4405      	add	r5, r0
 800868c:	6035      	str	r5, [r6, #0]
 800868e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008694:	6018      	str	r0, [r3, #0]
 8008696:	4620      	mov	r0, r4
 8008698:	b002      	add	sp, #8
 800869a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800869e:	6161      	str	r1, [r4, #20]
 80086a0:	e7e9      	b.n	8008676 <__d2b+0x56>
 80086a2:	a801      	add	r0, sp, #4
 80086a4:	f7ff fd61 	bl	800816a <__lo0bits>
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	6163      	str	r3, [r4, #20]
 80086ae:	3020      	adds	r0, #32
 80086b0:	e7e7      	b.n	8008682 <__d2b+0x62>
 80086b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086ba:	6030      	str	r0, [r6, #0]
 80086bc:	6918      	ldr	r0, [r3, #16]
 80086be:	f7ff fd35 	bl	800812c <__hi0bits>
 80086c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086c6:	e7e4      	b.n	8008692 <__d2b+0x72>
 80086c8:	08009312 	.word	0x08009312
 80086cc:	08009323 	.word	0x08009323

080086d0 <__ssputs_r>:
 80086d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	461f      	mov	r7, r3
 80086d6:	688e      	ldr	r6, [r1, #8]
 80086d8:	4682      	mov	sl, r0
 80086da:	42be      	cmp	r6, r7
 80086dc:	460c      	mov	r4, r1
 80086de:	4690      	mov	r8, r2
 80086e0:	680b      	ldr	r3, [r1, #0]
 80086e2:	d82d      	bhi.n	8008740 <__ssputs_r+0x70>
 80086e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086ec:	d026      	beq.n	800873c <__ssputs_r+0x6c>
 80086ee:	6965      	ldr	r5, [r4, #20]
 80086f0:	6909      	ldr	r1, [r1, #16]
 80086f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f6:	eba3 0901 	sub.w	r9, r3, r1
 80086fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086fe:	1c7b      	adds	r3, r7, #1
 8008700:	444b      	add	r3, r9
 8008702:	106d      	asrs	r5, r5, #1
 8008704:	429d      	cmp	r5, r3
 8008706:	bf38      	it	cc
 8008708:	461d      	movcc	r5, r3
 800870a:	0553      	lsls	r3, r2, #21
 800870c:	d527      	bpl.n	800875e <__ssputs_r+0x8e>
 800870e:	4629      	mov	r1, r5
 8008710:	f7ff fbd8 	bl	8007ec4 <_malloc_r>
 8008714:	4606      	mov	r6, r0
 8008716:	b360      	cbz	r0, 8008772 <__ssputs_r+0xa2>
 8008718:	464a      	mov	r2, r9
 800871a:	6921      	ldr	r1, [r4, #16]
 800871c:	f000 fa02 	bl	8008b24 <memcpy>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	6126      	str	r6, [r4, #16]
 800872e:	444e      	add	r6, r9
 8008730:	6026      	str	r6, [r4, #0]
 8008732:	463e      	mov	r6, r7
 8008734:	6165      	str	r5, [r4, #20]
 8008736:	eba5 0509 	sub.w	r5, r5, r9
 800873a:	60a5      	str	r5, [r4, #8]
 800873c:	42be      	cmp	r6, r7
 800873e:	d900      	bls.n	8008742 <__ssputs_r+0x72>
 8008740:	463e      	mov	r6, r7
 8008742:	4632      	mov	r2, r6
 8008744:	4641      	mov	r1, r8
 8008746:	6820      	ldr	r0, [r4, #0]
 8008748:	f000 f9c2 	bl	8008ad0 <memmove>
 800874c:	2000      	movs	r0, #0
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	1b9b      	subs	r3, r3, r6
 8008752:	60a3      	str	r3, [r4, #8]
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	4433      	add	r3, r6
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875e:	462a      	mov	r2, r5
 8008760:	f000 fa32 	bl	8008bc8 <_realloc_r>
 8008764:	4606      	mov	r6, r0
 8008766:	2800      	cmp	r0, #0
 8008768:	d1e0      	bne.n	800872c <__ssputs_r+0x5c>
 800876a:	4650      	mov	r0, sl
 800876c:	6921      	ldr	r1, [r4, #16]
 800876e:	f7ff fb37 	bl	8007de0 <_free_r>
 8008772:	230c      	movs	r3, #12
 8008774:	f8ca 3000 	str.w	r3, [sl]
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	f04f 30ff 	mov.w	r0, #4294967295
 800877e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	e7e9      	b.n	800875a <__ssputs_r+0x8a>
	...

08008788 <_svfiprintf_r>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	4698      	mov	r8, r3
 800878e:	898b      	ldrh	r3, [r1, #12]
 8008790:	4607      	mov	r7, r0
 8008792:	061b      	lsls	r3, r3, #24
 8008794:	460d      	mov	r5, r1
 8008796:	4614      	mov	r4, r2
 8008798:	b09d      	sub	sp, #116	@ 0x74
 800879a:	d510      	bpl.n	80087be <_svfiprintf_r+0x36>
 800879c:	690b      	ldr	r3, [r1, #16]
 800879e:	b973      	cbnz	r3, 80087be <_svfiprintf_r+0x36>
 80087a0:	2140      	movs	r1, #64	@ 0x40
 80087a2:	f7ff fb8f 	bl	8007ec4 <_malloc_r>
 80087a6:	6028      	str	r0, [r5, #0]
 80087a8:	6128      	str	r0, [r5, #16]
 80087aa:	b930      	cbnz	r0, 80087ba <_svfiprintf_r+0x32>
 80087ac:	230c      	movs	r3, #12
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	b01d      	add	sp, #116	@ 0x74
 80087b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ba:	2340      	movs	r3, #64	@ 0x40
 80087bc:	616b      	str	r3, [r5, #20]
 80087be:	2300      	movs	r3, #0
 80087c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c2:	2320      	movs	r3, #32
 80087c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087c8:	2330      	movs	r3, #48	@ 0x30
 80087ca:	f04f 0901 	mov.w	r9, #1
 80087ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80087d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800896c <_svfiprintf_r+0x1e4>
 80087d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087da:	4623      	mov	r3, r4
 80087dc:	469a      	mov	sl, r3
 80087de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e2:	b10a      	cbz	r2, 80087e8 <_svfiprintf_r+0x60>
 80087e4:	2a25      	cmp	r2, #37	@ 0x25
 80087e6:	d1f9      	bne.n	80087dc <_svfiprintf_r+0x54>
 80087e8:	ebba 0b04 	subs.w	fp, sl, r4
 80087ec:	d00b      	beq.n	8008806 <_svfiprintf_r+0x7e>
 80087ee:	465b      	mov	r3, fp
 80087f0:	4622      	mov	r2, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	4638      	mov	r0, r7
 80087f6:	f7ff ff6b 	bl	80086d0 <__ssputs_r>
 80087fa:	3001      	adds	r0, #1
 80087fc:	f000 80a7 	beq.w	800894e <_svfiprintf_r+0x1c6>
 8008800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008802:	445a      	add	r2, fp
 8008804:	9209      	str	r2, [sp, #36]	@ 0x24
 8008806:	f89a 3000 	ldrb.w	r3, [sl]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 809f 	beq.w	800894e <_svfiprintf_r+0x1c6>
 8008810:	2300      	movs	r3, #0
 8008812:	f04f 32ff 	mov.w	r2, #4294967295
 8008816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800881a:	f10a 0a01 	add.w	sl, sl, #1
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	9307      	str	r3, [sp, #28]
 8008822:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008826:	931a      	str	r3, [sp, #104]	@ 0x68
 8008828:	4654      	mov	r4, sl
 800882a:	2205      	movs	r2, #5
 800882c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008830:	484e      	ldr	r0, [pc, #312]	@ (800896c <_svfiprintf_r+0x1e4>)
 8008832:	f7fe fc68 	bl	8007106 <memchr>
 8008836:	9a04      	ldr	r2, [sp, #16]
 8008838:	b9d8      	cbnz	r0, 8008872 <_svfiprintf_r+0xea>
 800883a:	06d0      	lsls	r0, r2, #27
 800883c:	bf44      	itt	mi
 800883e:	2320      	movmi	r3, #32
 8008840:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008844:	0711      	lsls	r1, r2, #28
 8008846:	bf44      	itt	mi
 8008848:	232b      	movmi	r3, #43	@ 0x2b
 800884a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800884e:	f89a 3000 	ldrb.w	r3, [sl]
 8008852:	2b2a      	cmp	r3, #42	@ 0x2a
 8008854:	d015      	beq.n	8008882 <_svfiprintf_r+0xfa>
 8008856:	4654      	mov	r4, sl
 8008858:	2000      	movs	r0, #0
 800885a:	f04f 0c0a 	mov.w	ip, #10
 800885e:	9a07      	ldr	r2, [sp, #28]
 8008860:	4621      	mov	r1, r4
 8008862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008866:	3b30      	subs	r3, #48	@ 0x30
 8008868:	2b09      	cmp	r3, #9
 800886a:	d94b      	bls.n	8008904 <_svfiprintf_r+0x17c>
 800886c:	b1b0      	cbz	r0, 800889c <_svfiprintf_r+0x114>
 800886e:	9207      	str	r2, [sp, #28]
 8008870:	e014      	b.n	800889c <_svfiprintf_r+0x114>
 8008872:	eba0 0308 	sub.w	r3, r0, r8
 8008876:	fa09 f303 	lsl.w	r3, r9, r3
 800887a:	4313      	orrs	r3, r2
 800887c:	46a2      	mov	sl, r4
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	e7d2      	b.n	8008828 <_svfiprintf_r+0xa0>
 8008882:	9b03      	ldr	r3, [sp, #12]
 8008884:	1d19      	adds	r1, r3, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	9103      	str	r1, [sp, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	bfbb      	ittet	lt
 800888e:	425b      	neglt	r3, r3
 8008890:	f042 0202 	orrlt.w	r2, r2, #2
 8008894:	9307      	strge	r3, [sp, #28]
 8008896:	9307      	strlt	r3, [sp, #28]
 8008898:	bfb8      	it	lt
 800889a:	9204      	strlt	r2, [sp, #16]
 800889c:	7823      	ldrb	r3, [r4, #0]
 800889e:	2b2e      	cmp	r3, #46	@ 0x2e
 80088a0:	d10a      	bne.n	80088b8 <_svfiprintf_r+0x130>
 80088a2:	7863      	ldrb	r3, [r4, #1]
 80088a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a6:	d132      	bne.n	800890e <_svfiprintf_r+0x186>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	3402      	adds	r4, #2
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	9203      	str	r2, [sp, #12]
 80088b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008970 <_svfiprintf_r+0x1e8>
 80088bc:	2203      	movs	r2, #3
 80088be:	4650      	mov	r0, sl
 80088c0:	7821      	ldrb	r1, [r4, #0]
 80088c2:	f7fe fc20 	bl	8007106 <memchr>
 80088c6:	b138      	cbz	r0, 80088d8 <_svfiprintf_r+0x150>
 80088c8:	2240      	movs	r2, #64	@ 0x40
 80088ca:	9b04      	ldr	r3, [sp, #16]
 80088cc:	eba0 000a 	sub.w	r0, r0, sl
 80088d0:	4082      	lsls	r2, r0
 80088d2:	4313      	orrs	r3, r2
 80088d4:	3401      	adds	r4, #1
 80088d6:	9304      	str	r3, [sp, #16]
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	2206      	movs	r2, #6
 80088de:	4825      	ldr	r0, [pc, #148]	@ (8008974 <_svfiprintf_r+0x1ec>)
 80088e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088e4:	f7fe fc0f 	bl	8007106 <memchr>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d036      	beq.n	800895a <_svfiprintf_r+0x1d2>
 80088ec:	4b22      	ldr	r3, [pc, #136]	@ (8008978 <_svfiprintf_r+0x1f0>)
 80088ee:	bb1b      	cbnz	r3, 8008938 <_svfiprintf_r+0x1b0>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	3307      	adds	r3, #7
 80088f4:	f023 0307 	bic.w	r3, r3, #7
 80088f8:	3308      	adds	r3, #8
 80088fa:	9303      	str	r3, [sp, #12]
 80088fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fe:	4433      	add	r3, r6
 8008900:	9309      	str	r3, [sp, #36]	@ 0x24
 8008902:	e76a      	b.n	80087da <_svfiprintf_r+0x52>
 8008904:	460c      	mov	r4, r1
 8008906:	2001      	movs	r0, #1
 8008908:	fb0c 3202 	mla	r2, ip, r2, r3
 800890c:	e7a8      	b.n	8008860 <_svfiprintf_r+0xd8>
 800890e:	2300      	movs	r3, #0
 8008910:	f04f 0c0a 	mov.w	ip, #10
 8008914:	4619      	mov	r1, r3
 8008916:	3401      	adds	r4, #1
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	4620      	mov	r0, r4
 800891c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008920:	3a30      	subs	r2, #48	@ 0x30
 8008922:	2a09      	cmp	r2, #9
 8008924:	d903      	bls.n	800892e <_svfiprintf_r+0x1a6>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0c6      	beq.n	80088b8 <_svfiprintf_r+0x130>
 800892a:	9105      	str	r1, [sp, #20]
 800892c:	e7c4      	b.n	80088b8 <_svfiprintf_r+0x130>
 800892e:	4604      	mov	r4, r0
 8008930:	2301      	movs	r3, #1
 8008932:	fb0c 2101 	mla	r1, ip, r1, r2
 8008936:	e7f0      	b.n	800891a <_svfiprintf_r+0x192>
 8008938:	ab03      	add	r3, sp, #12
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	462a      	mov	r2, r5
 800893e:	4638      	mov	r0, r7
 8008940:	4b0e      	ldr	r3, [pc, #56]	@ (800897c <_svfiprintf_r+0x1f4>)
 8008942:	a904      	add	r1, sp, #16
 8008944:	f7fd fe7c 	bl	8006640 <_printf_float>
 8008948:	1c42      	adds	r2, r0, #1
 800894a:	4606      	mov	r6, r0
 800894c:	d1d6      	bne.n	80088fc <_svfiprintf_r+0x174>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	065b      	lsls	r3, r3, #25
 8008952:	f53f af2d 	bmi.w	80087b0 <_svfiprintf_r+0x28>
 8008956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008958:	e72c      	b.n	80087b4 <_svfiprintf_r+0x2c>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4638      	mov	r0, r7
 8008962:	4b06      	ldr	r3, [pc, #24]	@ (800897c <_svfiprintf_r+0x1f4>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	f7fe f909 	bl	8006b7c <_printf_i>
 800896a:	e7ed      	b.n	8008948 <_svfiprintf_r+0x1c0>
 800896c:	0800937c 	.word	0x0800937c
 8008970:	08009382 	.word	0x08009382
 8008974:	08009386 	.word	0x08009386
 8008978:	08006641 	.word	0x08006641
 800897c:	080086d1 	.word	0x080086d1

08008980 <__sflush_r>:
 8008980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	0716      	lsls	r6, r2, #28
 8008988:	4605      	mov	r5, r0
 800898a:	460c      	mov	r4, r1
 800898c:	d454      	bmi.n	8008a38 <__sflush_r+0xb8>
 800898e:	684b      	ldr	r3, [r1, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	dc02      	bgt.n	800899a <__sflush_r+0x1a>
 8008994:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd48      	ble.n	8008a2c <__sflush_r+0xac>
 800899a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800899c:	2e00      	cmp	r6, #0
 800899e:	d045      	beq.n	8008a2c <__sflush_r+0xac>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089a6:	682f      	ldr	r7, [r5, #0]
 80089a8:	6a21      	ldr	r1, [r4, #32]
 80089aa:	602b      	str	r3, [r5, #0]
 80089ac:	d030      	beq.n	8008a10 <__sflush_r+0x90>
 80089ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	0759      	lsls	r1, r3, #29
 80089b4:	d505      	bpl.n	80089c2 <__sflush_r+0x42>
 80089b6:	6863      	ldr	r3, [r4, #4]
 80089b8:	1ad2      	subs	r2, r2, r3
 80089ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089bc:	b10b      	cbz	r3, 80089c2 <__sflush_r+0x42>
 80089be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089c0:	1ad2      	subs	r2, r2, r3
 80089c2:	2300      	movs	r3, #0
 80089c4:	4628      	mov	r0, r5
 80089c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089c8:	6a21      	ldr	r1, [r4, #32]
 80089ca:	47b0      	blx	r6
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	d106      	bne.n	80089e0 <__sflush_r+0x60>
 80089d2:	6829      	ldr	r1, [r5, #0]
 80089d4:	291d      	cmp	r1, #29
 80089d6:	d82b      	bhi.n	8008a30 <__sflush_r+0xb0>
 80089d8:	4a28      	ldr	r2, [pc, #160]	@ (8008a7c <__sflush_r+0xfc>)
 80089da:	40ca      	lsrs	r2, r1
 80089dc:	07d6      	lsls	r6, r2, #31
 80089de:	d527      	bpl.n	8008a30 <__sflush_r+0xb0>
 80089e0:	2200      	movs	r2, #0
 80089e2:	6062      	str	r2, [r4, #4]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	04d9      	lsls	r1, r3, #19
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	d504      	bpl.n	80089f6 <__sflush_r+0x76>
 80089ec:	1c42      	adds	r2, r0, #1
 80089ee:	d101      	bne.n	80089f4 <__sflush_r+0x74>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b903      	cbnz	r3, 80089f6 <__sflush_r+0x76>
 80089f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80089f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089f8:	602f      	str	r7, [r5, #0]
 80089fa:	b1b9      	cbz	r1, 8008a2c <__sflush_r+0xac>
 80089fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a00:	4299      	cmp	r1, r3
 8008a02:	d002      	beq.n	8008a0a <__sflush_r+0x8a>
 8008a04:	4628      	mov	r0, r5
 8008a06:	f7ff f9eb 	bl	8007de0 <_free_r>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a0e:	e00d      	b.n	8008a2c <__sflush_r+0xac>
 8008a10:	2301      	movs	r3, #1
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b0      	blx	r6
 8008a16:	4602      	mov	r2, r0
 8008a18:	1c50      	adds	r0, r2, #1
 8008a1a:	d1c9      	bne.n	80089b0 <__sflush_r+0x30>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0c6      	beq.n	80089b0 <__sflush_r+0x30>
 8008a22:	2b1d      	cmp	r3, #29
 8008a24:	d001      	beq.n	8008a2a <__sflush_r+0xaa>
 8008a26:	2b16      	cmp	r3, #22
 8008a28:	d11d      	bne.n	8008a66 <__sflush_r+0xe6>
 8008a2a:	602f      	str	r7, [r5, #0]
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e021      	b.n	8008a74 <__sflush_r+0xf4>
 8008a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a34:	b21b      	sxth	r3, r3
 8008a36:	e01a      	b.n	8008a6e <__sflush_r+0xee>
 8008a38:	690f      	ldr	r7, [r1, #16]
 8008a3a:	2f00      	cmp	r7, #0
 8008a3c:	d0f6      	beq.n	8008a2c <__sflush_r+0xac>
 8008a3e:	0793      	lsls	r3, r2, #30
 8008a40:	bf18      	it	ne
 8008a42:	2300      	movne	r3, #0
 8008a44:	680e      	ldr	r6, [r1, #0]
 8008a46:	bf08      	it	eq
 8008a48:	694b      	ldreq	r3, [r1, #20]
 8008a4a:	1bf6      	subs	r6, r6, r7
 8008a4c:	600f      	str	r7, [r1, #0]
 8008a4e:	608b      	str	r3, [r1, #8]
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	ddeb      	ble.n	8008a2c <__sflush_r+0xac>
 8008a54:	4633      	mov	r3, r6
 8008a56:	463a      	mov	r2, r7
 8008a58:	4628      	mov	r0, r5
 8008a5a:	6a21      	ldr	r1, [r4, #32]
 8008a5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a60:	47e0      	blx	ip
 8008a62:	2800      	cmp	r0, #0
 8008a64:	dc07      	bgt.n	8008a76 <__sflush_r+0xf6>
 8008a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a76:	4407      	add	r7, r0
 8008a78:	1a36      	subs	r6, r6, r0
 8008a7a:	e7e9      	b.n	8008a50 <__sflush_r+0xd0>
 8008a7c:	20400001 	.word	0x20400001

08008a80 <_fflush_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	690b      	ldr	r3, [r1, #16]
 8008a84:	4605      	mov	r5, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	b913      	cbnz	r3, 8008a90 <_fflush_r+0x10>
 8008a8a:	2500      	movs	r5, #0
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	b118      	cbz	r0, 8008a9a <_fflush_r+0x1a>
 8008a92:	6a03      	ldr	r3, [r0, #32]
 8008a94:	b90b      	cbnz	r3, 8008a9a <_fflush_r+0x1a>
 8008a96:	f7fe fa1b 	bl	8006ed0 <__sinit>
 8008a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0f3      	beq.n	8008a8a <_fflush_r+0xa>
 8008aa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008aa4:	07d0      	lsls	r0, r2, #31
 8008aa6:	d404      	bmi.n	8008ab2 <_fflush_r+0x32>
 8008aa8:	0599      	lsls	r1, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_fflush_r+0x32>
 8008aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aae:	f7fe fb28 	bl	8007102 <__retarget_lock_acquire_recursive>
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f7ff ff63 	bl	8008980 <__sflush_r>
 8008aba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008abc:	4605      	mov	r5, r0
 8008abe:	07da      	lsls	r2, r3, #31
 8008ac0:	d4e4      	bmi.n	8008a8c <_fflush_r+0xc>
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	059b      	lsls	r3, r3, #22
 8008ac6:	d4e1      	bmi.n	8008a8c <_fflush_r+0xc>
 8008ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aca:	f7fe fb1b 	bl	8007104 <__retarget_lock_release_recursive>
 8008ace:	e7dd      	b.n	8008a8c <_fflush_r+0xc>

08008ad0 <memmove>:
 8008ad0:	4288      	cmp	r0, r1
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	eb01 0402 	add.w	r4, r1, r2
 8008ad8:	d902      	bls.n	8008ae0 <memmove+0x10>
 8008ada:	4284      	cmp	r4, r0
 8008adc:	4623      	mov	r3, r4
 8008ade:	d807      	bhi.n	8008af0 <memmove+0x20>
 8008ae0:	1e43      	subs	r3, r0, #1
 8008ae2:	42a1      	cmp	r1, r4
 8008ae4:	d008      	beq.n	8008af8 <memmove+0x28>
 8008ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aee:	e7f8      	b.n	8008ae2 <memmove+0x12>
 8008af0:	4601      	mov	r1, r0
 8008af2:	4402      	add	r2, r0
 8008af4:	428a      	cmp	r2, r1
 8008af6:	d100      	bne.n	8008afa <memmove+0x2a>
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b02:	e7f7      	b.n	8008af4 <memmove+0x24>

08008b04 <_sbrk_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	2300      	movs	r3, #0
 8008b08:	4d05      	ldr	r5, [pc, #20]	@ (8008b20 <_sbrk_r+0x1c>)
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7f8 fe88 	bl	8001824 <_sbrk>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_sbrk_r+0x1a>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_sbrk_r+0x1a>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	20000500 	.word	0x20000500

08008b24 <memcpy>:
 8008b24:	440a      	add	r2, r1
 8008b26:	4291      	cmp	r1, r2
 8008b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b2c:	d100      	bne.n	8008b30 <memcpy+0xc>
 8008b2e:	4770      	bx	lr
 8008b30:	b510      	push	{r4, lr}
 8008b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b36:	4291      	cmp	r1, r2
 8008b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b3c:	d1f9      	bne.n	8008b32 <memcpy+0xe>
 8008b3e:	bd10      	pop	{r4, pc}

08008b40 <__assert_func>:
 8008b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b42:	4614      	mov	r4, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <__assert_func+0x2c>)
 8008b48:	4605      	mov	r5, r0
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68d8      	ldr	r0, [r3, #12]
 8008b4e:	b14c      	cbz	r4, 8008b64 <__assert_func+0x24>
 8008b50:	4b07      	ldr	r3, [pc, #28]	@ (8008b70 <__assert_func+0x30>)
 8008b52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b56:	9100      	str	r1, [sp, #0]
 8008b58:	462b      	mov	r3, r5
 8008b5a:	4906      	ldr	r1, [pc, #24]	@ (8008b74 <__assert_func+0x34>)
 8008b5c:	f000 f870 	bl	8008c40 <fiprintf>
 8008b60:	f000 f880 	bl	8008c64 <abort>
 8008b64:	4b04      	ldr	r3, [pc, #16]	@ (8008b78 <__assert_func+0x38>)
 8008b66:	461c      	mov	r4, r3
 8008b68:	e7f3      	b.n	8008b52 <__assert_func+0x12>
 8008b6a:	bf00      	nop
 8008b6c:	20000018 	.word	0x20000018
 8008b70:	08009397 	.word	0x08009397
 8008b74:	080093a4 	.word	0x080093a4
 8008b78:	080093d2 	.word	0x080093d2

08008b7c <_calloc_r>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	fba1 5402 	umull	r5, r4, r1, r2
 8008b82:	b934      	cbnz	r4, 8008b92 <_calloc_r+0x16>
 8008b84:	4629      	mov	r1, r5
 8008b86:	f7ff f99d 	bl	8007ec4 <_malloc_r>
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <_calloc_r+0x1e>
 8008b8e:	4630      	mov	r0, r6
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	220c      	movs	r2, #12
 8008b94:	2600      	movs	r6, #0
 8008b96:	6002      	str	r2, [r0, #0]
 8008b98:	e7f9      	b.n	8008b8e <_calloc_r+0x12>
 8008b9a:	462a      	mov	r2, r5
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	f7fe fa32 	bl	8007006 <memset>
 8008ba2:	e7f4      	b.n	8008b8e <_calloc_r+0x12>

08008ba4 <__ascii_mbtowc>:
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	b901      	cbnz	r1, 8008baa <__ascii_mbtowc+0x6>
 8008ba8:	a901      	add	r1, sp, #4
 8008baa:	b142      	cbz	r2, 8008bbe <__ascii_mbtowc+0x1a>
 8008bac:	b14b      	cbz	r3, 8008bc2 <__ascii_mbtowc+0x1e>
 8008bae:	7813      	ldrb	r3, [r2, #0]
 8008bb0:	600b      	str	r3, [r1, #0]
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	1e10      	subs	r0, r2, #0
 8008bb6:	bf18      	it	ne
 8008bb8:	2001      	movne	r0, #1
 8008bba:	b002      	add	sp, #8
 8008bbc:	4770      	bx	lr
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	e7fb      	b.n	8008bba <__ascii_mbtowc+0x16>
 8008bc2:	f06f 0001 	mvn.w	r0, #1
 8008bc6:	e7f8      	b.n	8008bba <__ascii_mbtowc+0x16>

08008bc8 <_realloc_r>:
 8008bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bcc:	4607      	mov	r7, r0
 8008bce:	4614      	mov	r4, r2
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	b921      	cbnz	r1, 8008bde <_realloc_r+0x16>
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	f7ff b973 	b.w	8007ec4 <_malloc_r>
 8008bde:	b92a      	cbnz	r2, 8008bec <_realloc_r+0x24>
 8008be0:	f7ff f8fe 	bl	8007de0 <_free_r>
 8008be4:	4625      	mov	r5, r4
 8008be6:	4628      	mov	r0, r5
 8008be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bec:	f000 f841 	bl	8008c72 <_malloc_usable_size_r>
 8008bf0:	4284      	cmp	r4, r0
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	d802      	bhi.n	8008bfc <_realloc_r+0x34>
 8008bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bfa:	d8f4      	bhi.n	8008be6 <_realloc_r+0x1e>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7ff f960 	bl	8007ec4 <_malloc_r>
 8008c04:	4680      	mov	r8, r0
 8008c06:	b908      	cbnz	r0, 8008c0c <_realloc_r+0x44>
 8008c08:	4645      	mov	r5, r8
 8008c0a:	e7ec      	b.n	8008be6 <_realloc_r+0x1e>
 8008c0c:	42b4      	cmp	r4, r6
 8008c0e:	4622      	mov	r2, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	bf28      	it	cs
 8008c14:	4632      	movcs	r2, r6
 8008c16:	f7ff ff85 	bl	8008b24 <memcpy>
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f7ff f8df 	bl	8007de0 <_free_r>
 8008c22:	e7f1      	b.n	8008c08 <_realloc_r+0x40>

08008c24 <__ascii_wctomb>:
 8008c24:	4603      	mov	r3, r0
 8008c26:	4608      	mov	r0, r1
 8008c28:	b141      	cbz	r1, 8008c3c <__ascii_wctomb+0x18>
 8008c2a:	2aff      	cmp	r2, #255	@ 0xff
 8008c2c:	d904      	bls.n	8008c38 <__ascii_wctomb+0x14>
 8008c2e:	228a      	movs	r2, #138	@ 0x8a
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	4770      	bx	lr
 8008c38:	2001      	movs	r0, #1
 8008c3a:	700a      	strb	r2, [r1, #0]
 8008c3c:	4770      	bx	lr
	...

08008c40 <fiprintf>:
 8008c40:	b40e      	push	{r1, r2, r3}
 8008c42:	b503      	push	{r0, r1, lr}
 8008c44:	4601      	mov	r1, r0
 8008c46:	ab03      	add	r3, sp, #12
 8008c48:	4805      	ldr	r0, [pc, #20]	@ (8008c60 <fiprintf+0x20>)
 8008c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4e:	6800      	ldr	r0, [r0, #0]
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	f000 f83d 	bl	8008cd0 <_vfiprintf_r>
 8008c56:	b002      	add	sp, #8
 8008c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c5c:	b003      	add	sp, #12
 8008c5e:	4770      	bx	lr
 8008c60:	20000018 	.word	0x20000018

08008c64 <abort>:
 8008c64:	2006      	movs	r0, #6
 8008c66:	b508      	push	{r3, lr}
 8008c68:	f000 fa06 	bl	8009078 <raise>
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	f7f8 fd64 	bl	800173a <_exit>

08008c72 <_malloc_usable_size_r>:
 8008c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c76:	1f18      	subs	r0, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bfbc      	itt	lt
 8008c7c:	580b      	ldrlt	r3, [r1, r0]
 8008c7e:	18c0      	addlt	r0, r0, r3
 8008c80:	4770      	bx	lr

08008c82 <__sfputc_r>:
 8008c82:	6893      	ldr	r3, [r2, #8]
 8008c84:	b410      	push	{r4}
 8008c86:	3b01      	subs	r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	6093      	str	r3, [r2, #8]
 8008c8c:	da07      	bge.n	8008c9e <__sfputc_r+0x1c>
 8008c8e:	6994      	ldr	r4, [r2, #24]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	db01      	blt.n	8008c98 <__sfputc_r+0x16>
 8008c94:	290a      	cmp	r1, #10
 8008c96:	d102      	bne.n	8008c9e <__sfputc_r+0x1c>
 8008c98:	bc10      	pop	{r4}
 8008c9a:	f000 b931 	b.w	8008f00 <__swbuf_r>
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	1c58      	adds	r0, r3, #1
 8008ca2:	6010      	str	r0, [r2, #0]
 8008ca4:	7019      	strb	r1, [r3, #0]
 8008ca6:	4608      	mov	r0, r1
 8008ca8:	bc10      	pop	{r4}
 8008caa:	4770      	bx	lr

08008cac <__sfputs_r>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	18d5      	adds	r5, r2, r3
 8008cb6:	42ac      	cmp	r4, r5
 8008cb8:	d101      	bne.n	8008cbe <__sfputs_r+0x12>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e007      	b.n	8008cce <__sfputs_r+0x22>
 8008cbe:	463a      	mov	r2, r7
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc6:	f7ff ffdc 	bl	8008c82 <__sfputc_r>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d1f3      	bne.n	8008cb6 <__sfputs_r+0xa>
 8008cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cd0 <_vfiprintf_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	4698      	mov	r8, r3
 8008cda:	4606      	mov	r6, r0
 8008cdc:	b09d      	sub	sp, #116	@ 0x74
 8008cde:	b118      	cbz	r0, 8008ce8 <_vfiprintf_r+0x18>
 8008ce0:	6a03      	ldr	r3, [r0, #32]
 8008ce2:	b90b      	cbnz	r3, 8008ce8 <_vfiprintf_r+0x18>
 8008ce4:	f7fe f8f4 	bl	8006ed0 <__sinit>
 8008ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cea:	07d9      	lsls	r1, r3, #31
 8008cec:	d405      	bmi.n	8008cfa <_vfiprintf_r+0x2a>
 8008cee:	89ab      	ldrh	r3, [r5, #12]
 8008cf0:	059a      	lsls	r2, r3, #22
 8008cf2:	d402      	bmi.n	8008cfa <_vfiprintf_r+0x2a>
 8008cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cf6:	f7fe fa04 	bl	8007102 <__retarget_lock_acquire_recursive>
 8008cfa:	89ab      	ldrh	r3, [r5, #12]
 8008cfc:	071b      	lsls	r3, r3, #28
 8008cfe:	d501      	bpl.n	8008d04 <_vfiprintf_r+0x34>
 8008d00:	692b      	ldr	r3, [r5, #16]
 8008d02:	b99b      	cbnz	r3, 8008d2c <_vfiprintf_r+0x5c>
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f000 f938 	bl	8008f7c <__swsetup_r>
 8008d0c:	b170      	cbz	r0, 8008d2c <_vfiprintf_r+0x5c>
 8008d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d10:	07dc      	lsls	r4, r3, #31
 8008d12:	d504      	bpl.n	8008d1e <_vfiprintf_r+0x4e>
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	b01d      	add	sp, #116	@ 0x74
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	0598      	lsls	r0, r3, #22
 8008d22:	d4f7      	bmi.n	8008d14 <_vfiprintf_r+0x44>
 8008d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d26:	f7fe f9ed 	bl	8007104 <__retarget_lock_release_recursive>
 8008d2a:	e7f3      	b.n	8008d14 <_vfiprintf_r+0x44>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d30:	2320      	movs	r3, #32
 8008d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d36:	2330      	movs	r3, #48	@ 0x30
 8008d38:	f04f 0901 	mov.w	r9, #1
 8008d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d40:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008eec <_vfiprintf_r+0x21c>
 8008d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d48:	4623      	mov	r3, r4
 8008d4a:	469a      	mov	sl, r3
 8008d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d50:	b10a      	cbz	r2, 8008d56 <_vfiprintf_r+0x86>
 8008d52:	2a25      	cmp	r2, #37	@ 0x25
 8008d54:	d1f9      	bne.n	8008d4a <_vfiprintf_r+0x7a>
 8008d56:	ebba 0b04 	subs.w	fp, sl, r4
 8008d5a:	d00b      	beq.n	8008d74 <_vfiprintf_r+0xa4>
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ffa2 	bl	8008cac <__sfputs_r>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	f000 80a7 	beq.w	8008ebc <_vfiprintf_r+0x1ec>
 8008d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d70:	445a      	add	r2, fp
 8008d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d74:	f89a 3000 	ldrb.w	r3, [sl]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 809f 	beq.w	8008ebc <_vfiprintf_r+0x1ec>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d88:	f10a 0a01 	add.w	sl, sl, #1
 8008d8c:	9304      	str	r3, [sp, #16]
 8008d8e:	9307      	str	r3, [sp, #28]
 8008d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d96:	4654      	mov	r4, sl
 8008d98:	2205      	movs	r2, #5
 8008d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9e:	4853      	ldr	r0, [pc, #332]	@ (8008eec <_vfiprintf_r+0x21c>)
 8008da0:	f7fe f9b1 	bl	8007106 <memchr>
 8008da4:	9a04      	ldr	r2, [sp, #16]
 8008da6:	b9d8      	cbnz	r0, 8008de0 <_vfiprintf_r+0x110>
 8008da8:	06d1      	lsls	r1, r2, #27
 8008daa:	bf44      	itt	mi
 8008dac:	2320      	movmi	r3, #32
 8008dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db2:	0713      	lsls	r3, r2, #28
 8008db4:	bf44      	itt	mi
 8008db6:	232b      	movmi	r3, #43	@ 0x2b
 8008db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dc2:	d015      	beq.n	8008df0 <_vfiprintf_r+0x120>
 8008dc4:	4654      	mov	r4, sl
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f04f 0c0a 	mov.w	ip, #10
 8008dcc:	9a07      	ldr	r2, [sp, #28]
 8008dce:	4621      	mov	r1, r4
 8008dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd4:	3b30      	subs	r3, #48	@ 0x30
 8008dd6:	2b09      	cmp	r3, #9
 8008dd8:	d94b      	bls.n	8008e72 <_vfiprintf_r+0x1a2>
 8008dda:	b1b0      	cbz	r0, 8008e0a <_vfiprintf_r+0x13a>
 8008ddc:	9207      	str	r2, [sp, #28]
 8008dde:	e014      	b.n	8008e0a <_vfiprintf_r+0x13a>
 8008de0:	eba0 0308 	sub.w	r3, r0, r8
 8008de4:	fa09 f303 	lsl.w	r3, r9, r3
 8008de8:	4313      	orrs	r3, r2
 8008dea:	46a2      	mov	sl, r4
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	e7d2      	b.n	8008d96 <_vfiprintf_r+0xc6>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	1d19      	adds	r1, r3, #4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	9103      	str	r1, [sp, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bfbb      	ittet	lt
 8008dfc:	425b      	neglt	r3, r3
 8008dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8008e02:	9307      	strge	r3, [sp, #28]
 8008e04:	9307      	strlt	r3, [sp, #28]
 8008e06:	bfb8      	it	lt
 8008e08:	9204      	strlt	r2, [sp, #16]
 8008e0a:	7823      	ldrb	r3, [r4, #0]
 8008e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e0e:	d10a      	bne.n	8008e26 <_vfiprintf_r+0x156>
 8008e10:	7863      	ldrb	r3, [r4, #1]
 8008e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e14:	d132      	bne.n	8008e7c <_vfiprintf_r+0x1ac>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	3402      	adds	r4, #2
 8008e1a:	1d1a      	adds	r2, r3, #4
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	9203      	str	r2, [sp, #12]
 8008e20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e24:	9305      	str	r3, [sp, #20]
 8008e26:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008ef0 <_vfiprintf_r+0x220>
 8008e2a:	2203      	movs	r2, #3
 8008e2c:	4650      	mov	r0, sl
 8008e2e:	7821      	ldrb	r1, [r4, #0]
 8008e30:	f7fe f969 	bl	8007106 <memchr>
 8008e34:	b138      	cbz	r0, 8008e46 <_vfiprintf_r+0x176>
 8008e36:	2240      	movs	r2, #64	@ 0x40
 8008e38:	9b04      	ldr	r3, [sp, #16]
 8008e3a:	eba0 000a 	sub.w	r0, r0, sl
 8008e3e:	4082      	lsls	r2, r0
 8008e40:	4313      	orrs	r3, r2
 8008e42:	3401      	adds	r4, #1
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4a:	2206      	movs	r2, #6
 8008e4c:	4829      	ldr	r0, [pc, #164]	@ (8008ef4 <_vfiprintf_r+0x224>)
 8008e4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e52:	f7fe f958 	bl	8007106 <memchr>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d03f      	beq.n	8008eda <_vfiprintf_r+0x20a>
 8008e5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ef8 <_vfiprintf_r+0x228>)
 8008e5c:	bb1b      	cbnz	r3, 8008ea6 <_vfiprintf_r+0x1d6>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	3307      	adds	r3, #7
 8008e62:	f023 0307 	bic.w	r3, r3, #7
 8008e66:	3308      	adds	r3, #8
 8008e68:	9303      	str	r3, [sp, #12]
 8008e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6c:	443b      	add	r3, r7
 8008e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e70:	e76a      	b.n	8008d48 <_vfiprintf_r+0x78>
 8008e72:	460c      	mov	r4, r1
 8008e74:	2001      	movs	r0, #1
 8008e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e7a:	e7a8      	b.n	8008dce <_vfiprintf_r+0xfe>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f04f 0c0a 	mov.w	ip, #10
 8008e82:	4619      	mov	r1, r3
 8008e84:	3401      	adds	r4, #1
 8008e86:	9305      	str	r3, [sp, #20]
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8e:	3a30      	subs	r2, #48	@ 0x30
 8008e90:	2a09      	cmp	r2, #9
 8008e92:	d903      	bls.n	8008e9c <_vfiprintf_r+0x1cc>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0c6      	beq.n	8008e26 <_vfiprintf_r+0x156>
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	e7c4      	b.n	8008e26 <_vfiprintf_r+0x156>
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea4:	e7f0      	b.n	8008e88 <_vfiprintf_r+0x1b8>
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4630      	mov	r0, r6
 8008eae:	4b13      	ldr	r3, [pc, #76]	@ (8008efc <_vfiprintf_r+0x22c>)
 8008eb0:	a904      	add	r1, sp, #16
 8008eb2:	f7fd fbc5 	bl	8006640 <_printf_float>
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	1c78      	adds	r0, r7, #1
 8008eba:	d1d6      	bne.n	8008e6a <_vfiprintf_r+0x19a>
 8008ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ebe:	07d9      	lsls	r1, r3, #31
 8008ec0:	d405      	bmi.n	8008ece <_vfiprintf_r+0x1fe>
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	059a      	lsls	r2, r3, #22
 8008ec6:	d402      	bmi.n	8008ece <_vfiprintf_r+0x1fe>
 8008ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eca:	f7fe f91b 	bl	8007104 <__retarget_lock_release_recursive>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	065b      	lsls	r3, r3, #25
 8008ed2:	f53f af1f 	bmi.w	8008d14 <_vfiprintf_r+0x44>
 8008ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ed8:	e71e      	b.n	8008d18 <_vfiprintf_r+0x48>
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <_vfiprintf_r+0x22c>)
 8008ee4:	a904      	add	r1, sp, #16
 8008ee6:	f7fd fe49 	bl	8006b7c <_printf_i>
 8008eea:	e7e4      	b.n	8008eb6 <_vfiprintf_r+0x1e6>
 8008eec:	0800937c 	.word	0x0800937c
 8008ef0:	08009382 	.word	0x08009382
 8008ef4:	08009386 	.word	0x08009386
 8008ef8:	08006641 	.word	0x08006641
 8008efc:	08008cad 	.word	0x08008cad

08008f00 <__swbuf_r>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	460e      	mov	r6, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	4605      	mov	r5, r0
 8008f08:	b118      	cbz	r0, 8008f12 <__swbuf_r+0x12>
 8008f0a:	6a03      	ldr	r3, [r0, #32]
 8008f0c:	b90b      	cbnz	r3, 8008f12 <__swbuf_r+0x12>
 8008f0e:	f7fd ffdf 	bl	8006ed0 <__sinit>
 8008f12:	69a3      	ldr	r3, [r4, #24]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	071a      	lsls	r2, r3, #28
 8008f1a:	d501      	bpl.n	8008f20 <__swbuf_r+0x20>
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	b943      	cbnz	r3, 8008f32 <__swbuf_r+0x32>
 8008f20:	4621      	mov	r1, r4
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 f82a 	bl	8008f7c <__swsetup_r>
 8008f28:	b118      	cbz	r0, 8008f32 <__swbuf_r+0x32>
 8008f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f2e:	4638      	mov	r0, r7
 8008f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	6922      	ldr	r2, [r4, #16]
 8008f36:	b2f6      	uxtb	r6, r6
 8008f38:	1a98      	subs	r0, r3, r2
 8008f3a:	6963      	ldr	r3, [r4, #20]
 8008f3c:	4637      	mov	r7, r6
 8008f3e:	4283      	cmp	r3, r0
 8008f40:	dc05      	bgt.n	8008f4e <__swbuf_r+0x4e>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f7ff fd9b 	bl	8008a80 <_fflush_r>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d1ed      	bne.n	8008f2a <__swbuf_r+0x2a>
 8008f4e:	68a3      	ldr	r3, [r4, #8]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	60a3      	str	r3, [r4, #8]
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	701e      	strb	r6, [r3, #0]
 8008f5c:	6962      	ldr	r2, [r4, #20]
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d004      	beq.n	8008f6e <__swbuf_r+0x6e>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	07db      	lsls	r3, r3, #31
 8008f68:	d5e1      	bpl.n	8008f2e <__swbuf_r+0x2e>
 8008f6a:	2e0a      	cmp	r6, #10
 8008f6c:	d1df      	bne.n	8008f2e <__swbuf_r+0x2e>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7ff fd85 	bl	8008a80 <_fflush_r>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0d9      	beq.n	8008f2e <__swbuf_r+0x2e>
 8008f7a:	e7d6      	b.n	8008f2a <__swbuf_r+0x2a>

08008f7c <__swsetup_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4b29      	ldr	r3, [pc, #164]	@ (8009024 <__swsetup_r+0xa8>)
 8008f80:	4605      	mov	r5, r0
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	460c      	mov	r4, r1
 8008f86:	b118      	cbz	r0, 8008f90 <__swsetup_r+0x14>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <__swsetup_r+0x14>
 8008f8c:	f7fd ffa0 	bl	8006ed0 <__sinit>
 8008f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f94:	0719      	lsls	r1, r3, #28
 8008f96:	d422      	bmi.n	8008fde <__swsetup_r+0x62>
 8008f98:	06da      	lsls	r2, r3, #27
 8008f9a:	d407      	bmi.n	8008fac <__swsetup_r+0x30>
 8008f9c:	2209      	movs	r2, #9
 8008f9e:	602a      	str	r2, [r5, #0]
 8008fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	e033      	b.n	8009014 <__swsetup_r+0x98>
 8008fac:	0758      	lsls	r0, r3, #29
 8008fae:	d512      	bpl.n	8008fd6 <__swsetup_r+0x5a>
 8008fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fb2:	b141      	cbz	r1, 8008fc6 <__swsetup_r+0x4a>
 8008fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	d002      	beq.n	8008fc2 <__swsetup_r+0x46>
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7fe ff0f 	bl	8007de0 <_free_r>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	6063      	str	r3, [r4, #4]
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f043 0308 	orr.w	r3, r3, #8
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	b94b      	cbnz	r3, 8008ff6 <__swsetup_r+0x7a>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fec:	d003      	beq.n	8008ff6 <__swsetup_r+0x7a>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 f882 	bl	80090fa <__smakebuf_r>
 8008ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffa:	f013 0201 	ands.w	r2, r3, #1
 8008ffe:	d00a      	beq.n	8009016 <__swsetup_r+0x9a>
 8009000:	2200      	movs	r2, #0
 8009002:	60a2      	str	r2, [r4, #8]
 8009004:	6962      	ldr	r2, [r4, #20]
 8009006:	4252      	negs	r2, r2
 8009008:	61a2      	str	r2, [r4, #24]
 800900a:	6922      	ldr	r2, [r4, #16]
 800900c:	b942      	cbnz	r2, 8009020 <__swsetup_r+0xa4>
 800900e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009012:	d1c5      	bne.n	8008fa0 <__swsetup_r+0x24>
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	0799      	lsls	r1, r3, #30
 8009018:	bf58      	it	pl
 800901a:	6962      	ldrpl	r2, [r4, #20]
 800901c:	60a2      	str	r2, [r4, #8]
 800901e:	e7f4      	b.n	800900a <__swsetup_r+0x8e>
 8009020:	2000      	movs	r0, #0
 8009022:	e7f7      	b.n	8009014 <__swsetup_r+0x98>
 8009024:	20000018 	.word	0x20000018

08009028 <_raise_r>:
 8009028:	291f      	cmp	r1, #31
 800902a:	b538      	push	{r3, r4, r5, lr}
 800902c:	4605      	mov	r5, r0
 800902e:	460c      	mov	r4, r1
 8009030:	d904      	bls.n	800903c <_raise_r+0x14>
 8009032:	2316      	movs	r3, #22
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	f04f 30ff 	mov.w	r0, #4294967295
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800903e:	b112      	cbz	r2, 8009046 <_raise_r+0x1e>
 8009040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009044:	b94b      	cbnz	r3, 800905a <_raise_r+0x32>
 8009046:	4628      	mov	r0, r5
 8009048:	f000 f830 	bl	80090ac <_getpid_r>
 800904c:	4622      	mov	r2, r4
 800904e:	4601      	mov	r1, r0
 8009050:	4628      	mov	r0, r5
 8009052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009056:	f000 b817 	b.w	8009088 <_kill_r>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d00a      	beq.n	8009074 <_raise_r+0x4c>
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	d103      	bne.n	800906a <_raise_r+0x42>
 8009062:	2316      	movs	r3, #22
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	2001      	movs	r0, #1
 8009068:	e7e7      	b.n	800903a <_raise_r+0x12>
 800906a:	2100      	movs	r1, #0
 800906c:	4620      	mov	r0, r4
 800906e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009072:	4798      	blx	r3
 8009074:	2000      	movs	r0, #0
 8009076:	e7e0      	b.n	800903a <_raise_r+0x12>

08009078 <raise>:
 8009078:	4b02      	ldr	r3, [pc, #8]	@ (8009084 <raise+0xc>)
 800907a:	4601      	mov	r1, r0
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	f7ff bfd3 	b.w	8009028 <_raise_r>
 8009082:	bf00      	nop
 8009084:	20000018 	.word	0x20000018

08009088 <_kill_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	2300      	movs	r3, #0
 800908c:	4d06      	ldr	r5, [pc, #24]	@ (80090a8 <_kill_r+0x20>)
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	602b      	str	r3, [r5, #0]
 8009096:	f7f8 fb40 	bl	800171a <_kill>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	d102      	bne.n	80090a4 <_kill_r+0x1c>
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	b103      	cbz	r3, 80090a4 <_kill_r+0x1c>
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	bf00      	nop
 80090a8:	20000500 	.word	0x20000500

080090ac <_getpid_r>:
 80090ac:	f7f8 bb2e 	b.w	800170c <_getpid>

080090b0 <__swhatbuf_r>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	460c      	mov	r4, r1
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	4615      	mov	r5, r2
 80090ba:	2900      	cmp	r1, #0
 80090bc:	461e      	mov	r6, r3
 80090be:	b096      	sub	sp, #88	@ 0x58
 80090c0:	da0c      	bge.n	80090dc <__swhatbuf_r+0x2c>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	2100      	movs	r1, #0
 80090c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090ca:	bf14      	ite	ne
 80090cc:	2340      	movne	r3, #64	@ 0x40
 80090ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090d2:	2000      	movs	r0, #0
 80090d4:	6031      	str	r1, [r6, #0]
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	b016      	add	sp, #88	@ 0x58
 80090da:	bd70      	pop	{r4, r5, r6, pc}
 80090dc:	466a      	mov	r2, sp
 80090de:	f000 f849 	bl	8009174 <_fstat_r>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	dbed      	blt.n	80090c2 <__swhatbuf_r+0x12>
 80090e6:	9901      	ldr	r1, [sp, #4]
 80090e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090f0:	4259      	negs	r1, r3
 80090f2:	4159      	adcs	r1, r3
 80090f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f8:	e7eb      	b.n	80090d2 <__swhatbuf_r+0x22>

080090fa <__smakebuf_r>:
 80090fa:	898b      	ldrh	r3, [r1, #12]
 80090fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090fe:	079d      	lsls	r5, r3, #30
 8009100:	4606      	mov	r6, r0
 8009102:	460c      	mov	r4, r1
 8009104:	d507      	bpl.n	8009116 <__smakebuf_r+0x1c>
 8009106:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	2301      	movs	r3, #1
 8009110:	6163      	str	r3, [r4, #20]
 8009112:	b003      	add	sp, #12
 8009114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009116:	466a      	mov	r2, sp
 8009118:	ab01      	add	r3, sp, #4
 800911a:	f7ff ffc9 	bl	80090b0 <__swhatbuf_r>
 800911e:	9f00      	ldr	r7, [sp, #0]
 8009120:	4605      	mov	r5, r0
 8009122:	4639      	mov	r1, r7
 8009124:	4630      	mov	r0, r6
 8009126:	f7fe fecd 	bl	8007ec4 <_malloc_r>
 800912a:	b948      	cbnz	r0, 8009140 <__smakebuf_r+0x46>
 800912c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009130:	059a      	lsls	r2, r3, #22
 8009132:	d4ee      	bmi.n	8009112 <__smakebuf_r+0x18>
 8009134:	f023 0303 	bic.w	r3, r3, #3
 8009138:	f043 0302 	orr.w	r3, r3, #2
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	e7e2      	b.n	8009106 <__smakebuf_r+0xc>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	6020      	str	r0, [r4, #0]
 8009150:	b15b      	cbz	r3, 800916a <__smakebuf_r+0x70>
 8009152:	4630      	mov	r0, r6
 8009154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009158:	f000 f81e 	bl	8009198 <_isatty_r>
 800915c:	b128      	cbz	r0, 800916a <__smakebuf_r+0x70>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	f043 0301 	orr.w	r3, r3, #1
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	431d      	orrs	r5, r3
 800916e:	81a5      	strh	r5, [r4, #12]
 8009170:	e7cf      	b.n	8009112 <__smakebuf_r+0x18>
	...

08009174 <_fstat_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	2300      	movs	r3, #0
 8009178:	4d06      	ldr	r5, [pc, #24]	@ (8009194 <_fstat_r+0x20>)
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	4611      	mov	r1, r2
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	f7f8 fb29 	bl	80017d8 <_fstat>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	d102      	bne.n	8009190 <_fstat_r+0x1c>
 800918a:	682b      	ldr	r3, [r5, #0]
 800918c:	b103      	cbz	r3, 8009190 <_fstat_r+0x1c>
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	bd38      	pop	{r3, r4, r5, pc}
 8009192:	bf00      	nop
 8009194:	20000500 	.word	0x20000500

08009198 <_isatty_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	2300      	movs	r3, #0
 800919c:	4d05      	ldr	r5, [pc, #20]	@ (80091b4 <_isatty_r+0x1c>)
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	f7f8 fb27 	bl	80017f6 <_isatty>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_isatty_r+0x1a>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_isatty_r+0x1a>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000500 	.word	0x20000500

080091b8 <_init>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr

080091c4 <_fini>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr
